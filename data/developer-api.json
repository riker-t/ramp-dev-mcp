{
  "servers": [
    {
      "description": "Production",
      "url": "https://api.ramp.com"
    }
  ],
  "paths": {
    "/developer/v1/accounting/accounts": {
      "get": {
        "operationId": "get_gl_account_list_resource",
        "parameters": [
          {
            "description": "Filter by Remote/external ID",
            "in": "query",
            "name": "remote_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "is_active",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "is_synced",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiAccountingGLAccountResourceSchema"
                }
              }
            },
            "description": "Accounts"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:read"]
          }
        ],
        "summary": "List general ledger accounts",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "post": {
        "description": "You can upload up to 500 general ledger accounts in an all-or-nothing fashion. If a general ledger accounts within a batch is malformed or violates a database constraint, the entire batch containing that account will be disregarded.\nTo have a successful upload, please sanitize the data and ensure the general ledger accounts that you are trying to upload do not already exist on Ramp.\nIf a general ledger account is already on Ramp but you want to update its attributes, please use the PATCH developer/v1/accounting/accounts/{id} endpoint instead.",
        "operationId": "post_gl_account_list_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAccountingGLAccountUploadRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAccountingGLAccountUploadResponse"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Upload general ledger accounts",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/accounting/accounts/{gl_account_id}": {
      "delete": {
        "operationId": "delete_gl_account_resource",
        "responses": {
          "204": {
            "description": "Success, No content"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Delete a general ledger account",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      },
      "get": {
        "operationId": "get_gl_account_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralLedgerAccount"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:read"]
          }
        ],
        "summary": "Fetch a general ledger account",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "gl_account_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "patch": {
        "description": "This endpoint can be used to update the name or code of a GL account;",
        "operationId": "patch_gl_account_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAccountingGLAccountUpdateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralLedgerAccount"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Update a general ledger account",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/accounting/all-connections": {
      "get": {
        "operationId": "get_accounting_all_connections_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAccountingProviderAccessListResource"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:read"]
          }
        ],
        "summary": "Fetch all accounting connections for the current business",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      }
    },
    "/developer/v1/accounting/connection": {
      "delete": {
        "description": "This endpoint only allows disconnecting API based connections.",
        "operationId": "delete_accounting_connection_resource",
        "responses": {
          "204": {
            "description": "Success, No content"
          },
          "404": {
            "description": "raises NotFound"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Disconnect an accounting connection",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      },
      "get": {
        "deprecated": true,
        "description": "This endpoint is now deprecated. Please use the `/all-connections` endpoint instead here.",
        "operationId": "get_accounting_current_connection_resource_deprecated",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AccountingProvider"
                    },
                    {
                      "$ref": "#/components/schemas/ApiEmptyResponse"
                    }
                  ]
                }
              }
            },
            "description": "Success"
          },
          "404": {
            "description": "raises NotFound"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:read"]
          }
        ],
        "summary": "Fetch the current active accounting connection",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "post": {
        "description": "A connection is required in order to use our accounting API functionality.",
        "operationId": "post_accounting_connection_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAccountingProviderAccessCreateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingProvider"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Register a new API based accounting connection",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/accounting/connection/{connection_id}/reactivate": {
      "parameters": [
        {
          "in": "path",
          "name": "connection_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "post": {
        "description": "This endpoint allows reactivating a previously disconnected accounting connection\nby changing its status back to linked. This preserves all previous accounting\nfield configurations and settings.\n\nThe business must not have any other active accounting connections.",
        "operationId": "post_reactivate_connection_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingProvider"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Reactivate a previously unlinked accounting connection",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/accounting/field-options": {
      "get": {
        "operationId": "get_custom_field_option_list_resource",
        "parameters": [
          {
            "description": "Filter by Remote/external ID of custom accounting field options in ERP system.",
            "in": "query",
            "name": "remote_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by code of custom accounting field options.",
            "in": "query",
            "name": "code",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "field_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "is_active",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiAccountingCustomFieldOptionResourceSchema"
                }
              }
            },
            "description": "FieldOptions"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:read"]
          }
        ],
        "summary": "List options for a given custom accounting field",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "post": {
        "description": "You can upload up to 500 new field options for a given custom accounting field in an all-or-nothing fashion. If a field option within a batch is malformed or violates a database constraint, the entire batch containing that field option will be disregarded.\nTo have a successful upload, please sanitize the data and ensure the field options that you are trying to upload do not already exist on Ramp.\nIf a field option is already on Ramp but you want to update its attributes, please use the PATCH developer/v1/accounting/field-options/{id} endpoint instead.",
        "operationId": "post_custom_field_option_list_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAccountingCustomFieldOptionUploadRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAccountingCustomFieldOptionUploadResponse"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Upload new options",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/accounting/field-options/{field_option_id}": {
      "delete": {
        "operationId": "delete_custom_field_option_resource",
        "responses": {
          "204": {
            "description": "Success, No content"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Delete a custom accounting field option",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      },
      "get": {
        "operationId": "get_custom_field_option_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldOption"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:read"]
          }
        ],
        "summary": "Fetch a custom accounting field option",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "field_option_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "patch": {
        "operationId": "patch_custom_field_option_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAccountingCustomFieldOptionUpdateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldOption"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Update a custom accounting field option",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/accounting/fields": {
      "get": {
        "operationId": "get_custom_field_list_resource",
        "parameters": [
          {
            "description": "Filter by Remote/external ID of custom accounting fields in ERP system.",
            "in": "query",
            "name": "remote_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "is_active",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiAccountingCustomFieldResourceSchema"
                }
              }
            },
            "description": "Fields"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:read"]
          }
        ],
        "summary": "List custom accounting fields",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "post": {
        "description": "If an custom field with the same id already exist on Ramp, then that existing one will be returned instead of creating a new one; If the existing custom field is inactive, it will be reactivated.\nIf you want to update the existing custom field, please use the PATCH developer/v1/accounting/fields/{id} endpoint instead.",
        "operationId": "post_custom_field_list_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAccountingCustomFieldCreateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAccountingCustomFieldResource"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Create a new custom accounting field",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/accounting/fields/{field_id}": {
      "delete": {
        "operationId": "delete_custom_field_resource",
        "responses": {
          "204": {
            "description": "Success, No content"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Delete a custom accounting field",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      },
      "get": {
        "operationId": "get_custom_field_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAccountingCustomFieldResource"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:read"]
          }
        ],
        "summary": "Fetch a custom accounting field",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "field_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "patch": {
        "operationId": "patch_custom_field_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAccountingCustomFieldUpdateParamsRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAccountingCustomFieldResource"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Update a custom accounting field",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/accounting/syncs": {
      "post": {
        "description": "This endpoint allows customers to notify Ramp of a list of sync results.\nAn idempotency key is required to ensure that subsequent requests are properly handled.",
        "operationId": "post_sync_list_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAccountingSyncCreateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAccountingSyncResource"
                }
              }
            },
            "description": "Object synced"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Post sync status",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/accounting/vendors": {
      "get": {
        "operationId": "get_accounting_vendor_list_resource",
        "parameters": [
          {
            "description": "Filter by Remote/external ID",
            "in": "query",
            "name": "remote_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "is_active",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "is_synced",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiAccountingVendorResourceSchema"
                }
              }
            },
            "description": "Vendors"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:read"]
          }
        ],
        "summary": "List vendors",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "post": {
        "description": "You can upload up to 500 vendors in an all-or-nothing fashion. If a vendors within a batch is malformed or violates a database constraint, the entire batch containing that vendors will be disregarded.\nTo have a successful upload, please sanitize the data and ensure the vendors that you are trying to upload do not already exist on Ramp.\nIf a vendors is already on Ramp but you want to update its attributes, please use the PATCH developer/v1/accounting/vendors/{id} endpoint instead.",
        "operationId": "post_accounting_vendor_list_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAccountingVendorUploadRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAccountingVendorUploadResponse"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Upload vendors",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/accounting/vendors/{vendor_id}": {
      "delete": {
        "operationId": "delete_accounting_vendor_resource",
        "responses": {
          "204": {
            "description": "Success, No content"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Delete a vendor",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      },
      "get": {
        "operationId": "get_accounting_vendor_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorAccount"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:read"]
          }
        ],
        "summary": "Fetch a vendor",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "vendor_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "patch": {
        "operationId": "patch_accounting_vendor_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAccountingVendorUpdateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorAccount"
                }
              }
            },
            "description": "Update vendor"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Update a vendor",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/bank-accounts/{bank_account_id}": {
      "get": {
        "operationId": "get_bank_account_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBankAccountResource"
                }
              }
            },
            "description": "Bank Account"
          }
        },
        "security": [
          {
            "oauth2": ["bank_accounts:read"]
          }
        ],
        "summary": "Get bank account details",
        "tags": ["Bank Accounts"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "bank_account_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/bills": {
      "get": {
        "operationId": "get_bill_list_with_pagination",
        "parameters": [
          {
            "description": "Filter bills by entity.",
            "in": "query",
            "name": "entity_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter bills by its accounting field selection. Bills that are coded with this accounting field will be returned.",
            "in": "query",
            "name": "accounting_field_selection_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter bills by vendor.",
            "in": "query",
            "name": "vendor_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "List bills of the provided approval status.",
            "in": "query",
            "name": "approval_status",
            "required": false,
            "schema": {
              "enum": ["APPROVED", "INITIALIZED", "PENDING", "REJECTED", "TERMINATED"],
              "type": "string"
            }
          },
          {
            "description": "List bills of the provided payment method.",
            "in": "query",
            "name": "payment_method",
            "required": false,
            "schema": {
              "enum": [
                "ACH",
                "CARD",
                "CHECK",
                "DOMESTIC_WIRE",
                "INTERNATIONAL",
                "ONE_TIME_CARD",
                "ONE_TIME_CARD_DELIVERY",
                "PAID_MANUALLY",
                "SWIFT",
                "UNSPECIFIED",
                "VENDOR_CREDIT"
              ],
              "type": "string"
            }
          },
          {
            "description": "List bills of the provided payment status.",
            "in": "query",
            "name": "payment_status",
            "required": false,
            "schema": {
              "enum": ["OPEN", "PAID"],
              "type": "string"
            }
          },
          {
            "description": "List bills of the provided sync status.",
            "in": "query",
            "name": "sync_status",
            "required": false,
            "schema": {
              "enum": ["BILL_AND_PAYMENT_SYNCED", "BILL_SYNCED", "NOT_SYNCED"],
              "type": "string"
            }
          },
          {
            "description": "Only show bills that are ready to sync to ERP, if set to True",
            "in": "query",
            "name": "sync_ready",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Show archived (deleted) bills instead of active bills. Defaults to False.",
            "in": "query",
            "name": "is_archived",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Shows only bills with a created_at on or after this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "in": "query",
            "name": "from_created_at",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Shows only bills with a created_at on or before this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "in": "query",
            "name": "to_created_at",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Shows only bills with a due_at on or after this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "in": "query",
            "name": "from_due_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Shows only bills with a due_at on or before this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "in": "query",
            "name": "to_due_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Shows only bills with a issued_at on or after this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "in": "query",
            "name": "from_issued_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Shows only bills with a issued_at on or before this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "in": "query",
            "name": "to_issued_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Shows only bills with a paid_at on or after this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "in": "query",
            "name": "from_paid_at",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Shows only bills with a paid_at on or before this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "in": "query",
            "name": "to_paid_at",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Shows only bills with an amount greater than or equal to this value.",
            "in": "query",
            "name": "min_amount",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "format": "decimal",
                  "type": "string"
                },
                {
                  "type": "number"
                }
              ]
            }
          },
          {
            "description": "Shows only bills with an amount less than or equal to this value.",
            "in": "query",
            "name": "max_amount",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "format": "decimal",
                  "type": "string"
                },
                {
                  "type": "number"
                }
              ]
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiBillResourceSchema"
                }
              }
            },
            "description": "Bill"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["bills:read"]
          }
        ],
        "summary": "List bills",
        "tags": ["Bill"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "post": {
        "description": "Batch payments cannot be created in the API.",
        "operationId": "post_bill_list_with_pagination",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCreateBillParamsRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bill"
                }
              }
            },
            "description": "Bill"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["bills:write"]
          }
        ],
        "summary": "Create a bill",
        "tags": ["Bill"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/bills/drafts": {
      "get": {
        "operationId": "get_draft_bill_list_with_pagination",
        "parameters": [
          {
            "description": "Filter draft bills by entity.",
            "in": "query",
            "name": "entity_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter draft bills by vendor.",
            "in": "query",
            "name": "vendor_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Shows only draft bills with a created_at on or after this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "in": "query",
            "name": "from_created_at",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Shows only draft bills with a created_at on or before this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "in": "query",
            "name": "to_created_at",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Shows only draft bills with a due_at on or after this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "in": "query",
            "name": "from_due_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Shows only draft bills with a due_at on or before this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "in": "query",
            "name": "to_due_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Shows only draft bills with a issued_at on or after this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "in": "query",
            "name": "from_issued_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Shows only draft bills with a issued_at on or before this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "in": "query",
            "name": "to_issued_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiDraftBillResourceSchema"
                }
              }
            },
            "description": "DraftBill"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["bills:read"]
          }
        ],
        "summary": "List draft bills",
        "tags": ["Bill"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      }
    },
    "/developer/v1/bills/drafts/{draft_bill_id}": {
      "get": {
        "operationId": "get_draft_bill_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DraftBill"
                }
              }
            },
            "description": "DraftBill"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["bills:read"]
          }
        ],
        "summary": "Fetch a draft bill",
        "tags": ["Bill"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "draft_bill_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/bills/{bill_id}": {
      "delete": {
        "description": "This is a destructive action. Associated inflight payments will be cancelled\nif possible or any attached one-time-card will be terminated. Paid bills and\nbills belonging to a batch payment cannot be deleted.",
        "operationId": "delete_bill_resource",
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            },
            "description": "Deleted bill"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["bills:write"]
          }
        ],
        "summary": "Archive a bill",
        "tags": ["Bill"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      },
      "get": {
        "operationId": "get_bill_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bill"
                }
              }
            },
            "description": "Bill"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["bills:read"]
          }
        ],
        "summary": "Fetch a bill",
        "tags": ["Bill"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "bill_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "patch": {
        "operationId": "patch_bill_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUpdateBillParamsRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bill"
                }
              }
            },
            "description": "Bill"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["bills:write"]
          }
        ],
        "summary": "Update a bill",
        "tags": ["Bill"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/business": {
      "get": {
        "operationId": "get_business_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Business"
                }
              }
            },
            "description": "Get business information"
          },
          "400": {
            "description": "raises BusinessInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["business:read"]
          }
        ],
        "summary": "Fetch the company information",
        "tags": ["Business"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      }
    },
    "/developer/v1/business/balance": {
      "get": {
        "operationId": "get_business_balance_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessBalance"
                }
              }
            },
            "description": "Get business balance information"
          }
        },
        "security": [
          {
            "oauth2": ["business:read"]
          }
        ],
        "summary": "Fetch the company balance information",
        "tags": ["Business"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      }
    },
    "/developer/v1/card-programs": {
      "get": {
        "deprecated": true,
        "operationId": "get_card_program_list_deprecated",
        "parameters": [
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiCardProgramResourceSchema"
                }
              }
            },
            "description": "CardPrograms"
          }
        },
        "security": [
          {
            "oauth2": ["card_programs:read"]
          }
        ],
        "summary": "List card programs",
        "tags": ["Card Program"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "post": {
        "deprecated": true,
        "operationId": "post_card_program_list_deprecated",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCardProgramCreateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiCardProgramResource"
                }
              }
            },
            "description": "Create Card Program"
          }
        },
        "security": [
          {
            "oauth2": ["card_programs:write"]
          }
        ],
        "summary": "Create a card program",
        "tags": ["Card Program"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/card-programs/{card_program_id}": {
      "get": {
        "deprecated": true,
        "operationId": "get_card_program_resource_deprecated",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiCardProgramResource"
                }
              }
            },
            "description": "Get single card program"
          }
        },
        "security": [
          {
            "oauth2": ["card_programs:read"]
          }
        ],
        "summary": "Fetch a card program",
        "tags": ["Card Program"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "card_program_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/cards": {
      "get": {
        "operationId": "get_card_list_with_pagination",
        "parameters": [
          {
            "description": "Filter by business entity.",
            "in": "query",
            "name": "entity_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter by card owner.",
            "in": "query",
            "name": "user_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter by card program.",
            "in": "query",
            "name": "card_program_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter by display name.",
            "in": "query",
            "name": "display_name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter only for activated cards. Defaults to True if not specified",
            "in": "query",
            "name": "is_activated",
            "required": false,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "Filter only for terminated cards. Defaults to False if not specified",
            "in": "query",
            "name": "is_terminated",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiCardResourceSchema"
                }
              }
            },
            "description": "Cards"
          },
          "400": {
            "description": "raises CardInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["cards:read"]
          }
        ],
        "summary": "List cards",
        "tags": ["Card"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      }
    },
    "/developer/v1/cards/deferred/physical": {
      "post": {
        "description": "Call this endpoint to create an async task to request for new physical card.",
        "operationId": "post_physical_card",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiPhysicalRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeferredTaskUUID"
                }
              }
            },
            "description": "Response with the ID of the async task. Task status can be checked via a GET call to .../deferred/status/<task_id>"
          }
        },
        "security": [
          {
            "oauth2": ["cards:write"]
          }
        ],
        "summary": "Create a physical card",
        "tags": ["Card"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/cards/deferred/status/{task_id}": {
      "get": {
        "operationId": "get_card_deferred_task_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardDeferredTask"
                }
              }
            },
            "description": "Card deferred task status"
          }
        },
        "security": [
          {
            "oauth2": ["cards:write"]
          }
        ],
        "summary": "Fetch deferred task status",
        "tags": ["Card"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "task_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/cards/deferred/virtual": {
      "post": {
        "description": "Call this endpoint to create an async task to request for new virtual card.",
        "operationId": "post_virtual_card",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCardRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeferredTaskUUID"
                }
              }
            },
            "description": "Response with the ID of the async task. Task status can be checked via a GET call to .../deferred/status/<task_id>"
          }
        },
        "security": [
          {
            "oauth2": ["cards:write"]
          }
        ],
        "summary": "Create a virtual card",
        "tags": ["Card"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/cards/{card_id}": {
      "get": {
        "operationId": "get_card_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            },
            "description": "Get single card"
          },
          "400": {
            "description": "raises CardInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["cards:read"]
          }
        ],
        "summary": "Fetch a card",
        "tags": ["Card"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "card_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "patch": {
        "description": "This endpoint allow you update the owner, display name, and spend restrictions of a card.",
        "operationId": "patch_card_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCardUpdateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Update a single card"
          },
          "400": {
            "description": "raises CardInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["cards:write"]
          }
        ],
        "summary": "Update a card",
        "tags": ["Card"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/cards/{card_id}/deferred/suspension": {
      "parameters": [
        {
          "in": "path",
          "name": "card_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "post": {
        "description": "Call this endpoint to create an async task to suspend a card so that it is locked from use. The suspension is revertable.",
        "operationId": "post_card_suspension_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCardDeferredUpdateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeferredTaskUUID"
                }
              }
            },
            "description": "Response with the ID of the async task. Task status can be checked via a GET call to .../deferred/status/<task_id>"
          },
          "400": {
            "description": "raises CardInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["cards:write"]
          }
        ],
        "summary": "Suspend a card",
        "tags": ["Card"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/cards/{card_id}/deferred/termination": {
      "parameters": [
        {
          "in": "path",
          "name": "card_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "post": {
        "description": "Call this endpoint to create an async task to terminate a card permanently. Please note that this action is irreversible.",
        "operationId": "post_card_termination_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCardDeferredUpdateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeferredTaskUUID"
                }
              }
            },
            "description": "Response with the ID of the async task. Task status can be checked via a GET call to .../deferred/status/<task_id>"
          },
          "400": {
            "description": "raises CardInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["cards:write"]
          }
        ],
        "summary": "Terminate a card",
        "tags": ["Card"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/cards/{card_id}/deferred/unsuspension": {
      "parameters": [
        {
          "in": "path",
          "name": "card_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "post": {
        "description": "Call this endpoint to create an async task to remove a card's suspension so that it may be used again.",
        "operationId": "post_card_unsuspension_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCardDeferredUpdateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeferredTaskUUID"
                }
              }
            },
            "description": "Response with the ID of the async task. Task status can be checked via a GET call to .../deferred/status/<task_id>"
          },
          "400": {
            "description": "raises CardInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["cards:write"]
          }
        ],
        "summary": "Unlock a card",
        "tags": ["Card"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/cashbacks": {
      "get": {
        "operationId": "get_cashback_list_with_pagination",
        "parameters": [
          {
            "description": "Filter by sync status. Supersedes sync_ready if provided.",
            "in": "query",
            "name": "sync_status",
            "required": false,
            "schema": {
              "enum": ["NOT_SYNC_READY", "SYNCED", "SYNC_READY"],
              "type": "string"
            }
          },
          {
            "description": "Filter cashbacks by business entity.",
            "in": "query",
            "name": "entity_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter cashbacks included in the specified statement.",
            "in": "query",
            "name": "statement_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter cashbacks that are ready to be synced (no pending syncs and completed).",
            "in": "query",
            "name": "sync_ready",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter cashbacks that occurred after this date (ISO8601 format).",
            "in": "query",
            "name": "from_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter cashbacks that occurred before this date (ISO8601 format).",
            "in": "query",
            "name": "to_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiCashbackResourceSchema"
                }
              }
            },
            "description": "Cashback"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["cashbacks:read"]
          }
        ],
        "summary": "List cashback payments",
        "tags": ["Cashback"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      }
    },
    "/developer/v1/cashbacks/{cashback_id}": {
      "get": {
        "operationId": "get_cashback_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cashback"
                }
              }
            },
            "description": "Cashback"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["cashbacks:read"]
          }
        ],
        "summary": "Fetch a cashback payment",
        "tags": ["Cashback"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "cashback_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/custom-records/configure/custom-tables": {
      "post": {
        "operationId": "post_dev_api_configure_custom_tables",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomTableReferenceUsingLabelAndNameRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Create Custom Table"
          }
        },
        "security": [
          {
            "oauth2": ["custom_records:write"]
          }
        ],
        "summary": "Create Custom Table",
        "tags": ["Custom Records"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": false,
        "x-ramp-plus-required": true
      }
    },
    "/developer/v1/custom-records/configure/custom-tables/{custom_table_name}/columns": {
      "parameters": [
        {
          "in": "path",
          "name": "custom_table_name",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "post": {
        "operationId": "post_dev_api_configure_custom_table_columns",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeveloperApiCreateCustomRecordColumnRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedTableColumnResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": ["custom_records:write"]
          }
        ],
        "summary": "Create Custom Table column",
        "tags": ["Custom Records"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": true
      }
    },
    "/developer/v1/custom-records/configure/native-tables": {
      "post": {
        "operationId": "post_dev_api_configure_native_tables",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NativeTableReferenceRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Extend Native Ramp table"
          }
        },
        "security": [
          {
            "oauth2": ["custom_records:write"]
          }
        ],
        "summary": "Extend Native Ramp table",
        "tags": ["Custom Records"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": false,
        "x-ramp-plus-required": true
      }
    },
    "/developer/v1/custom-records/configure/native-tables/{native_table_name}/columns": {
      "parameters": [
        {
          "in": "path",
          "name": "native_table_name",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "post": {
        "operationId": "post_dev_api_configure_native_table_columns",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeveloperApiCreateCustomRecordColumnRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedTableColumnResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": ["custom_records:write"]
          }
        ],
        "summary": "Create Native Ramp table field",
        "tags": ["Custom Records"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": true
      }
    },
    "/developer/v1/custom-records/custom-tables": {
      "get": {
        "operationId": "get_dev_api_custom_table",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseCustomTableReferenceUsingLabelAndName"
                }
              }
            },
            "description": "List of Custom Tables"
          },
          "404": {
            "description": "Custom Table not found"
          }
        },
        "security": [
          {
            "oauth2": ["custom_records:read"]
          }
        ],
        "summary": "List Custom Tables",
        "tags": ["Custom Records"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": true
      }
    },
    "/developer/v1/custom-records/custom-tables/{custom_table_name}/columns": {
      "get": {
        "operationId": "get_dev_api_custom_table_column",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseDeveloperApiCustomRecordColumn"
                }
              }
            },
            "description": "List of Custom Table columns"
          },
          "404": {
            "description": "Custom Table not found"
          }
        },
        "security": [
          {
            "oauth2": ["custom_records:read"]
          }
        ],
        "summary": "List Custom Table columns",
        "tags": ["Custom Records"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "custom_table_name",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/custom-records/custom-tables/{custom_table_name}/rows": {
      "delete": {
        "operationId": "delete_dev_api_custom_row",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteCustomRowRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteCustomRowResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": ["custom_records:write"]
          }
        ],
        "summary": "Delete rows from a Custom Table",
        "tags": ["Custom Records"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": true
      },
      "get": {
        "operationId": "get_dev_api_custom_row",
        "parameters": [
          {
            "description": "Number of rows to include in the response. Max: 100",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 50,
              "type": "integer"
            }
          },
          {
            "description": "The value of the `next` field from the previous response, if any",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "default": null,
              "nullable": true,
              "type": "string"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "external_key",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "nullable": false,
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "filter.column_name.operation",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseCustomRowDataWithLoadedReferences"
                }
              }
            },
            "description": "List of Custom Table rows"
          },
          "404": {
            "description": "Custom Table not found"
          }
        },
        "security": [
          {
            "oauth2": ["custom_records:read"]
          }
        ],
        "summary": "List Custom Table rows",
        "tags": ["Custom Records"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "custom_table_name",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "put": {
        "operationId": "put_dev_api_custom_row",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutCustomRowRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutCustomRowResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": ["custom_records:write"]
          }
        ],
        "summary": "Set values for rows of a Custom Table",
        "tags": ["Custom Records"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": true
      }
    },
    "/developer/v1/custom-records/custom-tables/{table_name}/rows/-/append": {
      "parameters": [
        {
          "in": "path",
          "name": "table_name",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "post": {
        "operationId": "post_dev_api_append_custom_row_cells",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutCustomRowRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsertCellsResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": ["custom_records:write"]
          }
        ],
        "summary": "Append cells to a Custom Table",
        "tags": ["Custom Records"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": true
      }
    },
    "/developer/v1/custom-records/custom-tables/{table_name}/rows/-/remove": {
      "parameters": [
        {
          "in": "path",
          "name": "table_name",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "post": {
        "operationId": "post_dev_api_remove_custom_row_cells",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutCustomRowRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteCellsResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": ["custom_records:write"]
          }
        ],
        "summary": "Remove cells from a Custom Table",
        "tags": ["Custom Records"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": true
      }
    },
    "/developer/v1/custom-records/native-tables": {
      "get": {
        "operationId": "get_dev_api_native_table",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseNativeTableReference"
                }
              }
            },
            "description": "List of Native Ramp tables"
          },
          "404": {
            "description": "Native Ramp Table not found"
          }
        },
        "security": [
          {
            "oauth2": ["custom_records:read"]
          }
        ],
        "summary": "List Native Ramp tables",
        "tags": ["Custom Records"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": true
      }
    },
    "/developer/v1/custom-records/native-tables/{native_table_name}/columns": {
      "get": {
        "operationId": "get_dev_api_native_table_column",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseDeveloperApiCustomRecordColumn"
                }
              }
            },
            "description": "List of Custom Columns for a Native Ramp table"
          },
          "404": {
            "description": "Native Ramp table not found"
          }
        },
        "security": [
          {
            "oauth2": ["custom_records:read"]
          }
        ],
        "summary": "List Custom Columns for a Native Ramp table",
        "tags": ["Custom Records"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "native_table_name",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/custom-records/native-tables/{native_table_name}/rows": {
      "get": {
        "operationId": "get_dev_api_native_row",
        "parameters": [
          {
            "description": "Number of rows to include in the response. Max: 100",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 50,
              "type": "integer"
            }
          },
          {
            "description": "The value of the `next` field from the previous response, if any",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "default": null,
              "nullable": true,
              "type": "string"
            }
          },
          {
            "explode": false,
            "in": "query",
            "name": "ramp_id",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "nullable": false,
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "filter.column_name.operation",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseCustomRowDataWithLoadedReferences"
                }
              }
            },
            "description": "List of Custom Column values for rows of a Native Ramp table"
          },
          "404": {
            "description": "Native Ramp table not found"
          }
        },
        "security": [
          {
            "oauth2": ["custom_records:read"]
          }
        ],
        "summary": "List Custom Column values for rows of a Native Ramp table",
        "tags": ["Custom Records"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "native_table_name",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "put": {
        "operationId": "put_dev_api_native_row",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutNativeRowRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutCustomRowResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": ["custom_records:write"]
          }
        ],
        "summary": "Set values for rows of a Native Ramp table",
        "tags": ["Custom Records"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": true
      }
    },
    "/developer/v1/custom-records/native-tables/{native_table_name}/rows/-/append": {
      "parameters": [
        {
          "in": "path",
          "name": "native_table_name",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "post": {
        "operationId": "post_dev_api_append_native_row_cells",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutNativeRowRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsertCellsResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": ["custom_records:write"]
          }
        ],
        "summary": "Append cells to a Native Ramp table",
        "tags": ["Custom Records"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": true
      }
    },
    "/developer/v1/custom-records/native-tables/{native_table_name}/rows/-/remove": {
      "parameters": [
        {
          "in": "path",
          "name": "native_table_name",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "post": {
        "operationId": "post_dev_api_remove_native_row_cells",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutNativeRowRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteCellsResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": ["custom_records:write"]
          }
        ],
        "summary": "Remove cells from a Native Ramp table",
        "tags": ["Custom Records"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": true
      }
    },
    "/developer/v1/departments": {
      "get": {
        "operationId": "get_department_list_with_pagination",
        "parameters": [
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiDepartmentResourceSchema"
                }
              }
            },
            "description": "Departments"
          },
          "400": {
            "description": "raises DepartmentInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["departments:read"]
          }
        ],
        "summary": "List departments",
        "tags": ["Department"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "post": {
        "operationId": "post_department_list_with_pagination",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiDepartmentCreateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Department"
                }
              }
            },
            "description": "Department"
          },
          "400": {
            "description": "raises DepartmentInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["departments:write"]
          }
        ],
        "summary": "Create a department",
        "tags": ["Department"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/departments/{department_id}": {
      "get": {
        "operationId": "get_department_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Department"
                }
              }
            },
            "description": "Department"
          }
        },
        "security": [
          {
            "oauth2": ["departments:read"]
          }
        ],
        "summary": "Fetch a department",
        "tags": ["Department"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "department_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "patch": {
        "operationId": "patch_department_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiDepartmentUpdateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Department"
                }
              }
            },
            "description": "Department"
          }
        },
        "security": [
          {
            "oauth2": ["departments:write"]
          }
        ],
        "summary": "Update a department",
        "tags": ["Department"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/entities": {
      "get": {
        "operationId": "get_entity_list_with_pagination",
        "parameters": [
          {
            "description": "Filter by currency of the entity.",
            "in": "query",
            "name": "currency",
            "required": false,
            "schema": {
              "enum": [
                "AED",
                "AFN",
                "ALL",
                "AMD",
                "ANG",
                "AOA",
                "ARS",
                "AUD",
                "AWG",
                "AZN",
                "BAM",
                "BBD",
                "BDT",
                "BGN",
                "BHD",
                "BIF",
                "BMD",
                "BND",
                "BOB",
                "BOV",
                "BRL",
                "BSD",
                "BTN",
                "BWP",
                "BYN",
                "BZD",
                "CAD",
                "CDF",
                "CHE",
                "CHF",
                "CHW",
                "CLF",
                "CLP",
                "CNY",
                "COP",
                "COU",
                "CRC",
                "CUC",
                "CUP",
                "CVE",
                "CZK",
                "DJF",
                "DKK",
                "DOP",
                "DZD",
                "EGP",
                "ERN",
                "ETB",
                "EUR",
                "FJD",
                "FKP",
                "GBP",
                "GEL",
                "GHS",
                "GIP",
                "GMD",
                "GNF",
                "GTQ",
                "GYD",
                "HKD",
                "HNL",
                "HRK",
                "HTG",
                "HUF",
                "IDR",
                "ILS",
                "INR",
                "IQD",
                "IRR",
                "ISK",
                "JMD",
                "JOD",
                "JPY",
                "KES",
                "KGS",
                "KHR",
                "KMF",
                "KPW",
                "KRW",
                "KWD",
                "KYD",
                "KZT",
                "LAK",
                "LBP",
                "LKR",
                "LRD",
                "LSL",
                "LYD",
                "MAD",
                "MDL",
                "MGA",
                "MKD",
                "MMK",
                "MNT",
                "MOP",
                "MRU",
                "MUR",
                "MVR",
                "MWK",
                "MXN",
                "MXV",
                "MYR",
                "MZN",
                "NAD",
                "NGN",
                "NIO",
                "NOK",
                "NPR",
                "NZD",
                "OMR",
                "PAB",
                "PEN",
                "PGK",
                "PHP",
                "PKR",
                "PLN",
                "PYG",
                "QAR",
                "RON",
                "RSD",
                "RUB",
                "RWF",
                "SAR",
                "SBD",
                "SCR",
                "SDG",
                "SEK",
                "SGD",
                "SHP",
                "SLE",
                "SLL",
                "SOS",
                "SRD",
                "SSP",
                "STN",
                "SVC",
                "SYP",
                "SZL",
                "THB",
                "TJS",
                "TMT",
                "TND",
                "TOP",
                "TRY",
                "TTD",
                "TWD",
                "TZS",
                "UAH",
                "UGX",
                "USD",
                "USN",
                "UYI",
                "UYU",
                "UYW",
                "UZS",
                "VED",
                "VES",
                "VND",
                "VUV",
                "WST",
                "XAD",
                "XAF",
                "XAG",
                "XAU",
                "XBA",
                "XBB",
                "XBC",
                "XBD",
                "XCD",
                "XCG",
                "XDR",
                "XOF",
                "XPD",
                "XPF",
                "XPT",
                "XSU",
                "XTS",
                "XUA",
                "XXX",
                "YER",
                "ZAR",
                "ZMW",
                "ZWG",
                "ZWL"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter entities by name.",
            "in": "query",
            "name": "entity_name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter to include only primary or non-primary entities.",
            "in": "query",
            "name": "is_primary",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiEntityResourceSchema"
                }
              }
            },
            "description": "Entities"
          }
        },
        "security": [
          {
            "oauth2": ["entities:read"]
          }
        ],
        "summary": "List business entities",
        "tags": ["Business Entities"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      }
    },
    "/developer/v1/entities/{entity_id}": {
      "get": {
        "operationId": "get_entity_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEntityResource"
                }
              }
            },
            "description": "Entity"
          }
        },
        "security": [
          {
            "oauth2": ["entities:read"]
          }
        ],
        "summary": "Get a business entity",
        "tags": ["Business Entities"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "entity_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/item-receipts": {
      "get": {
        "operationId": "get_item_receipts_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiItemReceiptResourceSchema"
                }
              }
            },
            "description": "Get all item receipts"
          }
        },
        "security": [
          {
            "oauth2": ["item_receipts:read"]
          }
        ],
        "summary": "List item receipts",
        "tags": ["Item Receipts"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": true,
        "x-uses-read-replica": true
      },
      "post": {
        "operationId": "post_item_receipts_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemReceiptCreateParamsRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemReceiptResource"
                }
              }
            },
            "description": "Create an item receipt"
          }
        },
        "security": [
          {
            "oauth2": ["item_receipts:write"]
          }
        ],
        "summary": "Create an item receipt",
        "tags": ["Item Receipts"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": true
      }
    },
    "/developer/v1/item-receipts/{item_receipt_id}": {
      "delete": {
        "operationId": "delete_item_receipt_single_resource",
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            },
            "description": "Item receipt deleted"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "oauth2": ["item_receipts:write"]
          }
        ],
        "summary": "Delete an item receipt",
        "tags": ["Item Receipts"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": true
      },
      "get": {
        "operationId": "get_item_receipt_single_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemReceiptResource"
                }
              }
            },
            "description": "Item receipt"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "oauth2": ["item_receipts:read"]
          }
        ],
        "summary": "Fetch an item receipt",
        "tags": ["Item Receipts"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": true,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "item_receipt_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/leads": {
      "post": {
        "operationId": "post_sales_lead_creation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSalesLeadCreateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a single sales lead"
          },
          "400": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "oauth2": ["leads:write"]
          }
        ],
        "summary": "Create a sales lead",
        "tags": ["SalesLead"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": false,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/leads/{sales_lead_id}": {
      "get": {
        "operationId": "get_sales_lead_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Lead"
                }
              }
            },
            "description": "Sales Lead"
          },
          "404": {
            "description": "Sales lead not found"
          }
        },
        "security": [
          {
            "oauth2": ["leads:read"]
          }
        ],
        "summary": "Fetch a sales lead",
        "tags": ["SalesLead"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "sales_lead_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/leads/{sales_lead_id}/upload_document": {
      "parameters": [
        {
          "in": "path",
          "name": "sales_lead_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "post": {
        "deprecated": true,
        "operationId": "post_sales_lead_document_upload_deprecated",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Upload"
                }
              }
            },
            "description": "Document uploaded"
          },
          "400": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "oauth2": ["leads:write"]
          }
        ],
        "summary": "Upload documents required by financing application process",
        "tags": ["SalesLead"],
        "x-annotatedRequest": false,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/limits": {
      "get": {
        "operationId": "get_spend_limit_list_with_pagination",
        "parameters": [
          {
            "description": "Filter by display name.",
            "in": "query",
            "name": "display_name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter for limits by associated business entity.",
            "in": "query",
            "name": "entity_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter for limits that are associated with the specified spend program",
            "in": "query",
            "name": "spend_program_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter for limits that are owned by the user.",
            "in": "query",
            "name": "user_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter for spend limits that were created after the specified date. Input need to be presented in ISO8601 format, e.g. 2024-01-15T00:00:00Z",
            "in": "query",
            "name": "created_after",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter for spend limits that were created before the specified date. Input need to be presented in ISO8601 format, e.g. 2024-01-15T00:00:00Z",
            "in": "query",
            "name": "created_before",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter only for terminated spend limits.",
            "in": "query",
            "name": "is_terminated",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiSpendLimitResourceSchema"
                }
              }
            },
            "description": "SpendLimits"
          }
        },
        "security": [
          {
            "oauth2": ["limits:read"]
          }
        ],
        "summary": "List limits",
        "tags": ["Limit"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      }
    },
    "/developer/v1/limits/deferred": {
      "post": {
        "description": "Limit may either be created with spend program id (can provide display name and spending restrictions, cannot permitted spend types) or without (must provide display name, spending restrictions, and permitted spend types).",
        "operationId": "post_spend_limit_creation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSpendLimitCreateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeferredTaskUUID"
                }
              }
            },
            "description": "Response with the ID of the async task. Task status can be checked via a GET call to .../deferred/status/<task_id>"
          }
        },
        "security": [
          {
            "oauth2": ["limits:write"]
          }
        ],
        "summary": "Create a limit",
        "tags": ["Limit"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/limits/deferred/status/{task_id}": {
      "get": {
        "operationId": "get_spend_limit_deferred_task_status",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpendLimitDeferredTask"
                }
              }
            },
            "description": "Limit deferred task status"
          }
        },
        "security": [
          {
            "oauth2": ["limits:write"]
          }
        ],
        "summary": "Fetch deferred task status",
        "tags": ["Limit"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "task_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/limits/{spend_limit_id}": {
      "get": {
        "operationId": "get_spend_limit_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSpendLimitDetailResource"
                }
              }
            },
            "description": "Get a limit"
          }
        },
        "security": [
          {
            "oauth2": ["limits:read"]
          }
        ],
        "summary": "Fetch a limit",
        "tags": ["Limit"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "spend_limit_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "patch": {
        "operationId": "patch_spend_limit_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSpendLimitUpdateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Limit"
                }
              }
            },
            "description": "Update a limit"
          }
        },
        "security": [
          {
            "oauth2": ["limits:write"]
          }
        ],
        "summary": "Update a limit",
        "tags": ["Limit"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      },
      "put": {
        "operationId": "put_spend_limit_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSpendLimitUpdateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Limit"
                }
              }
            },
            "description": "Update a limit"
          }
        },
        "security": [
          {
            "oauth2": ["limits:write"]
          }
        ],
        "summary": "Update a limit",
        "tags": ["Limit"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/limits/{spend_limit_id}/add-users": {
      "parameters": [
        {
          "in": "path",
          "name": "spend_limit_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "put": {
        "operationId": "put_spend_allocation_add_users",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSpendLimitModifyUserAccessRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Limit"
                }
              }
            },
            "description": "Response indicating successful addition of users to the shared limit."
          },
          "403": {
            "description": "limit not shareable"
          },
          "404": {
            "description": "limit not found"
          }
        },
        "security": [
          {
            "oauth2": ["limits:write"]
          }
        ],
        "summary": "Add new users into a shared limit",
        "tags": ["Limit"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/limits/{spend_limit_id}/deferred/termination": {
      "parameters": [
        {
          "in": "path",
          "name": "spend_limit_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "post": {
        "description": "This endpoint creates an async task to terminate a limit permanently.",
        "operationId": "post_spend_limit_termination_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSpendLimitDeferredUpdateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeferredTaskUUID"
                }
              }
            },
            "description": "Response with the ID of the async task. Task status can be checked via a GET call to .../deferred/status/<task_id>"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["limits:write"]
          }
        ],
        "summary": "Terminate a limit",
        "tags": ["Limit"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/limits/{spend_limit_id}/delete-users": {
      "delete": {
        "operationId": "delete_spend_allocation_delete_users",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSpendLimitModifyUserAccessRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Limit"
                }
              }
            },
            "description": "Response indicating successful removal of users of the shared limit."
          },
          "403": {
            "description": "limit not shareable"
          },
          "404": {
            "description": "limit not found"
          }
        },
        "security": [
          {
            "oauth2": ["limits:write"]
          }
        ],
        "summary": "Remove users from a shared limit",
        "tags": ["Limit"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      },
      "parameters": [
        {
          "in": "path",
          "name": "spend_limit_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/limits/{spend_limit_id}/suspension": {
      "parameters": [
        {
          "in": "path",
          "name": "spend_limit_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "post": {
        "operationId": "post_spend_limit_suspension_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Limit"
                }
              }
            },
            "description": "Response indicating successful suspension of the limit."
          },
          "404": {
            "description": "limit not found"
          },
          "422": {
            "description": "Invalid spend_limit_id"
          }
        },
        "security": [
          {
            "oauth2": ["limits:write"]
          }
        ],
        "summary": "Suspend a limit",
        "tags": ["Limit"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/limits/{spend_limit_id}/unsuspension": {
      "parameters": [
        {
          "in": "path",
          "name": "spend_limit_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "post": {
        "operationId": "post_spend_limit_unsuspension_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Limit"
                }
              }
            },
            "description": "Response indicating successful unsuspension of the limit."
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["limits:write"]
          }
        ],
        "summary": "Unsuspend a limit",
        "tags": ["Limit"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/locations": {
      "get": {
        "operationId": "get_location_list_resource",
        "parameters": [
          {
            "description": "Filter by associated business entity.",
            "in": "query",
            "name": "entity_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiLocationResourceSchema"
                }
              }
            },
            "description": "Locations"
          },
          "400": {
            "description": "raises LocationInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["locations:read"]
          }
        ],
        "summary": "List locations",
        "tags": ["Location"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "post": {
        "operationId": "post_location_list_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiLocationCreateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            },
            "description": "Location"
          },
          "400": {
            "description": "raises LocationInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["locations:write"]
          }
        ],
        "summary": "Create a location",
        "tags": ["Location"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/locations/{location_id}": {
      "get": {
        "operationId": "get_location_single_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            },
            "description": "Location"
          }
        },
        "security": [
          {
            "oauth2": ["locations:read"]
          }
        ],
        "summary": "Fetch a location",
        "tags": ["Location"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "location_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "patch": {
        "operationId": "patch_location_single_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiLocationUpdateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            },
            "description": "Location"
          }
        },
        "security": [
          {
            "oauth2": ["locations:write"]
          }
        ],
        "summary": "Update a location",
        "tags": ["Location"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/memos": {
      "get": {
        "operationId": "get_memo_list_with_pagination",
        "parameters": [
          {
            "description": "Filter memos by card.",
            "in": "query",
            "name": "card_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter memos by department.",
            "in": "query",
            "name": "department_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter memos by location.",
            "in": "query",
            "name": "location_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter memos by manager.",
            "in": "query",
            "name": "manager_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter memos by merchant.",
            "in": "query",
            "name": "merchant_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter memos by user.",
            "in": "query",
            "name": "user_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter memos for transactions after this date.",
            "in": "query",
            "name": "from_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter memos for transactions before this date.",
            "in": "query",
            "name": "to_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiMemoResourceSchema"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "raises MemoInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["memos:read"]
          }
        ],
        "summary": "List memos",
        "tags": ["Memo"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      }
    },
    "/developer/v1/memos/{transaction_id}": {
      "get": {
        "operationId": "get_memo_single_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Memo"
                }
              }
            },
            "description": "Memo"
          },
          "400": {
            "description": "raises MemoInvalidInput"
          },
          "404": {
            "description": "raises NotFound"
          }
        },
        "security": [
          {
            "oauth2": ["memos:read"]
          }
        ],
        "summary": "Fetch a transaction memo",
        "tags": ["Memo"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "transaction_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "post": {
        "operationId": "post_memo_create_single_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiMemoCreateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Memo"
                }
              }
            },
            "description": "Memo"
          },
          "400": {
            "description": "raises MemoInvalidInput"
          },
          "404": {
            "description": "raises NotFound"
          }
        },
        "security": [
          {
            "oauth2": ["memos:write"]
          }
        ],
        "summary": "Upload a new memo for a transaction",
        "tags": ["Memo"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/merchants": {
      "get": {
        "operationId": "get_merchant_list_with_pagination",
        "parameters": [
          {
            "description": "Filter merchants by transactions occurring (`user_transaction_time`) on or after this date",
            "in": "query",
            "name": "transaction_from_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter merchants by transactions occurring (`user_transaction_time`) on or before this date",
            "in": "query",
            "name": "transaction_to_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiMerchantResourceSchema"
                }
              }
            },
            "description": "Merchants"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["merchants:read"]
          }
        ],
        "summary": "List merchants",
        "tags": ["Merchant"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      }
    },
    "/developer/v1/purchase-orders": {
      "get": {
        "operationId": "get_purchase_orders_resource",
        "parameters": [
          {
            "description": "Creation source of the purchase order.",
            "in": "query",
            "name": "creation_source",
            "required": false,
            "schema": {
              "enum": ["ACCOUNTING_PROVIDER", "DEVELOPER_API", "RAMP"],
              "type": "string"
            }
          },
          {
            "description": "Filter for purchase orders that were requested after the given date.",
            "in": "query",
            "name": "from_created_at",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter for purchase orders that were requested before the given date.",
            "in": "query",
            "name": "to_created_at",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Receipt status of the purchase order.",
            "in": "query",
            "name": "receipt_status",
            "required": false,
            "schema": {
              "enum": ["FULLY_RECEIVED", "NOT_RECEIVED", "OVER_RECEIVED", "PARTIALLY_RECEIVED"],
              "type": "string"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "type": "integer"
            }
          },
          {
            "description": "Unique identifier for the associated business entity.",
            "in": "query",
            "name": "entity_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Whether three-way match is enabled for the purchase order.",
            "in": "query",
            "name": "three_way_match_enabled",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Whether to include archived purchase orders. By default, include_archived is false.",
            "in": "query",
            "name": "include_archived",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiPurchaseOrderResourceSchema"
                }
              }
            },
            "description": "Get all purchase orders"
          }
        },
        "security": [
          {
            "oauth2": ["purchase_orders:read"]
          }
        ],
        "summary": "List purchase orders",
        "tags": ["Purchase Order"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": true,
        "x-uses-read-replica": true
      },
      "post": {
        "operationId": "post_purchase_orders_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiPurchaseOrderCreateParamsRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPurchaseOrderResource"
                }
              }
            },
            "description": "Create a purchase order"
          }
        },
        "security": [
          {
            "oauth2": ["purchase_orders:write"]
          }
        ],
        "summary": "Create a purchase order",
        "tags": ["Purchase Order"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": true
      }
    },
    "/developer/v1/purchase-orders/{purchase_order_id}": {
      "get": {
        "operationId": "get_purchase_order_single_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPurchaseOrderDetailResource"
                }
              }
            },
            "description": "Get single purchase order"
          }
        },
        "security": [
          {
            "oauth2": ["purchase_orders:read"]
          }
        ],
        "summary": "Fetch a purchase order",
        "tags": ["Purchase Order"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": true,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "purchase_order_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/purchase-orders/{purchase_order_id}/archive": {
      "parameters": [
        {
          "in": "path",
          "name": "purchase_order_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "post": {
        "operationId": "post_purchase_order_archive_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiPurchaseOrderArchiveRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            },
            "description": "Archived purchase order"
          }
        },
        "security": [
          {
            "oauth2": ["purchase_orders:write"]
          }
        ],
        "summary": "Archive a purchase order",
        "tags": ["Purchase Order"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": true
      }
    },
    "/developer/v1/receipt-integrations/opt-out": {
      "get": {
        "operationId": "get_receipt_integration_opted_out_emails_list_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiReceiptIntegrationOptedOutEmailResourceRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiReceiptIntegrationOptedOutEmailResource"
                }
              }
            },
            "description": "MailboxOptedOutEmail"
          }
        },
        "security": [
          {
            "oauth2": ["receipt_integrations:read"]
          }
        ],
        "summary": "List emails opted out of receipt integrations",
        "tags": ["Receipt Integrations"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "post": {
        "operationId": "post_receipt_integration_opted_out_emails_list_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiReceiptIntegrationOptedOutEmailCreateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiReceiptIntegrationOptedOutEmailResource"
                }
              }
            },
            "description": "MailboxOptedOutEmail"
          }
        },
        "security": [
          {
            "oauth2": ["receipt_integrations:write"]
          }
        ],
        "summary": "Add a new email to receipt integrations opt-out list",
        "tags": ["Receipt Integrations"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/receipt-integrations/opt-out/{mailbox_opted_out_email_uuid}": {
      "delete": {
        "description": "Successful request will opt-in email to receipt integrations.",
        "operationId": "delete_receipt_integration_opted_out_emails_delete_resource",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": ["receipt_integrations:write"]
          }
        ],
        "summary": "Remove an email from receipt integration opt-out list",
        "tags": ["Receipt Integrations"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": false,
        "x-ramp-plus-required": false
      },
      "parameters": [
        {
          "in": "path",
          "name": "mailbox_opted_out_email_uuid",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/receipts": {
      "get": {
        "operationId": "get_receipt_list",
        "parameters": [
          {
            "description": "Filter receipts created after this date (ISO8601 format).",
            "in": "query",
            "name": "created_after",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter receipts created before this date (ISO8601 format).",
            "in": "query",
            "name": "created_before",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter receipts for a specific transaction.",
            "in": "query",
            "name": "transaction_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter receipts for transactions with a `user_transaction_time` after this date (ISO8601 format).",
            "in": "query",
            "name": "from_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter receipts for transactions with a `user_transaction_time` before this date (ISO8601 format).",
            "in": "query",
            "name": "to_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiReceiptResourceSchema"
                }
              }
            },
            "description": "Receipts"
          },
          "400": {
            "description": "raises ReceiptInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["receipts:read"]
          }
        ],
        "summary": "List receipts",
        "tags": ["Receipt"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "post": {
        "description": "image and optionally associate it with a transaction.\n\nIf a `transaction_id` is provided, the receipt will be linked directly to that transaction. If not, Ramp will attempt to automatically match the receipt to the most relevant transaction based on context.\n\nThis endpoint accepts the [multipart/form-data](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) format.\n\nInclude the receipt image as a part with `Content-Disposition: attachment`. Include metadata as parts with `Content-Disposition: form-data`.",
        "operationId": "post_receipt_upload",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiReceiptUploadRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LightReceipt"
                }
              }
            },
            "description": "Uploaded receipt"
          },
          "400": {
            "description": "raises ReceiptInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["receipts:write"]
          }
        ],
        "summary": "Upload a receipt",
        "tags": ["Receipt"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/receipts/{receipt_id}": {
      "get": {
        "operationId": "get_receipt_single_resource",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Receipt"
                }
              }
            },
            "description": "Receipt"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": ["receipts:read"]
          }
        ],
        "summary": "Fetch a receipt",
        "tags": ["Receipt"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "receipt_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/reimbursements": {
      "get": {
        "operationId": "get_reimbursement_list_with_pagination",
        "parameters": [
          {
            "description": "Filter by direction (BUSINESS_TO_USER default, USER_TO_BUSINESS for repayments).",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "default": "BUSINESS_TO_USER",
              "enum": ["BUSINESS_TO_USER", "USER_TO_BUSINESS"],
              "type": "string"
            }
          },
          {
            "description": "Filter by sync status. Supersedes has_no_sync_commits and sync_ready.",
            "in": "query",
            "name": "sync_status",
            "required": false,
            "schema": {
              "enum": ["NOT_SYNC_READY", "SYNCED", "SYNC_READY"],
              "type": "string"
            }
          },
          {
            "description": "Filter by underlying transaction date (after this date).",
            "in": "query",
            "name": "from_transaction_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter by underlying transaction date (before this date).",
            "in": "query",
            "name": "to_transaction_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter for reimbursements awaiting approval by a specific user.",
            "in": "query",
            "name": "awaiting_approval_by_user_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter reimbursements associated with a specific trip.",
            "in": "query",
            "name": "trip_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter reimbursements by accounting field selection. This ID uniquely identifies an accounting field selection on Ramp.",
            "in": "query",
            "name": "accounting_field_selection_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter reimbursements by business entity.",
            "in": "query",
            "name": "entity_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter reimbursements created after this date.",
            "in": "query",
            "name": "from_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter reimbursements created before this date.",
            "in": "query",
            "name": "to_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter reimbursements submitted after this date.",
            "in": "query",
            "name": "from_submitted_at",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter reimbursements submitted before this date.",
            "in": "query",
            "name": "to_submitted_at",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter reimbursements synced after this date.",
            "in": "query",
            "name": "synced_after",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter reimbursements that are ready to sync to ERP systems.",
            "in": "query",
            "name": "sync_ready",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter reimbursements that haven't been synced to ERP systems.",
            "in": "query",
            "name": "has_no_sync_commits",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter reimbursements updated after this date.",
            "in": "query",
            "name": "updated_after",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "user_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiReimbursementResourceSchema"
                }
              }
            },
            "description": "Reimbursements"
          }
        },
        "security": [
          {
            "oauth2": ["reimbursements:read"]
          }
        ],
        "summary": "List reimbursements",
        "tags": ["Reimbursement"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      }
    },
    "/developer/v1/reimbursements/mileage": {
      "post": {
        "operationId": "post_mileage_reimbursement_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiMileageReimbursementCreateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reimbursement"
                }
              }
            },
            "description": "Reimbursement"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": ["reimbursements:write"]
          }
        ],
        "summary": "Create a mileage reimbursement",
        "tags": ["Reimbursement"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/reimbursements/submit-receipt": {
      "post": {
        "description": "If a `reimbursement_id` is provided, the receipt will be linked directly to that reimbursement. If not, Ramp will attempt to automatically create a draft reimbursement via OCR.\n\nThis endpoint accepts the [multipart/form-data](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) format.\n\nInclude the receipt image as a part with `Content-Disposition: attachment`. Include metadata as parts with `Content-Disposition: form-data`.",
        "operationId": "post_reimbursement_receipt_upload",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiReimbursementUploadReceiptRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reimbursement"
                }
              }
            },
            "description": "Reimbursement draft created from receipt"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "oauth2": ["reimbursements:write"]
          }
        ],
        "summary": "Upload a receipt for a reimbursement",
        "tags": ["Reimbursement"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/reimbursements/{reimbursement_id}": {
      "get": {
        "operationId": "get_reimbursement_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reimbursement"
                }
              }
            },
            "description": "Reimbursement"
          }
        },
        "security": [
          {
            "oauth2": ["reimbursements:read"]
          }
        ],
        "summary": "Fetch a reimbursement",
        "tags": ["Reimbursement"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "reimbursement_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/spend-programs": {
      "get": {
        "operationId": "get_spend_program_resource",
        "parameters": [
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiSpendProgramResourceSchema"
                }
              }
            },
            "description": "SpendPrograms"
          }
        },
        "security": [
          {
            "oauth2": ["spend_programs:read"]
          }
        ],
        "summary": "List spend programs",
        "tags": ["Spend Program"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "post": {
        "operationId": "post_spend_program_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSpendProgramCreateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSpendProgramResource"
                }
              }
            },
            "description": "Create Spend Program"
          }
        },
        "security": [
          {
            "oauth2": ["spend_programs:write"]
          }
        ],
        "summary": "Create a spend program",
        "tags": ["Spend Program"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/spend-programs/{spend_program_id}": {
      "get": {
        "operationId": "get_spend_program_single_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSpendProgramResource"
                }
              }
            },
            "description": "Get a spend program"
          }
        },
        "security": [
          {
            "oauth2": ["spend_programs:read"]
          }
        ],
        "summary": "Fetch a spend program",
        "tags": ["Spend Program"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "spend_program_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/statements": {
      "get": {
        "operationId": "get_statement_list_with_pagination",
        "parameters": [
          {
            "description": "Filter statements with end_date on or after this date (ISO8601 format).",
            "in": "query",
            "name": "from_date",
            "required": false,
            "schema": {
              "default": "1970-01-01T00:00:00+00:00",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter statements with end_date on or before this date (ISO8601 format). Defaults to current time.",
            "in": "query",
            "name": "to_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiStatementResourceSchema"
                }
              }
            },
            "description": "Statement"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["statements:read"]
          }
        ],
        "summary": "List statements",
        "tags": ["Statement"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      }
    },
    "/developer/v1/statements/{statement_id}": {
      "get": {
        "operationId": "get_statement_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Statement"
                }
              }
            },
            "description": "Statement"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["statements:read"]
          }
        ],
        "summary": "Fetch a statement",
        "tags": ["Statement"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "statement_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/token": {
      "post": {
        "description": "Expects two headers:\n- Authorization header formed from base-64 encoded client credentials as `Authorization: Basic <base64-encoded client_id:client_secret>`\n- `Content-Type: application/x-www-form-urlencoded`\n\nRequired content body depends on authorization type method, as defined by `grant_type`.\n- Authorization Code Grant (`grant_type=authorization_code`): `grant_type`, `code`, and `redirect_uri` are required. Request must happen after requested scopes have been approved and exchanged for authorization code.\n- Refresh Token Grant (`grant_type=refresh_token`): `grant_type` and `refresh_token` are required. User must have previously obtained refresh token in authorization code flow.\n- Client Credentials Grant (`grant_type=client_credentials`): `grant_type` and `scope` are required.",
        "operationId": "post_token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [],
        "summary": "Create a token",
        "tags": ["Token"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/token/revoke": {
      "post": {
        "description": "Expects an authorization header formed from base-64 encoded client credentials as `Authorization: Basic <base64-encoded client_id:client_secret>`.\n\nContent body must be form-encoded. Example:\n```\ncurl \\\n    -X POST \\\n    -H \"Authorization: Basic <base64-encoded client_id:client_secret>\" \\\n    -H \"Content-Type: application/x-www-form-urlencoded\" \\\n    --data-urlencode 'token=$RAMP_API_TOKEN' \\\n    'https://api.ramp.com/developer/v1/token/revoke'\n```",
        "operationId": "post_revoke_token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRevokeRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Revoked token successfully"
          }
        },
        "security": [],
        "summary": "Revoke an access or refresh token",
        "tags": ["Token"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": false,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/transactions": {
      "get": {
        "description": "This endpoint supports filtering and ordering. If state is not set, all transactions except declined transactions will be returned. Note that setting multiple ordering parameters is unsupported.",
        "operationId": "get_transactions_canonical_list_with_pagination",
        "parameters": [
          {
            "description": "Filter by a Ramp category code (integer).",
            "in": "query",
            "name": "sk_category_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by department.",
            "in": "query",
            "name": "department_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter by limit.",
            "in": "query",
            "name": "limit_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter by location.",
            "in": "query",
            "name": "location_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter by merchant.",
            "in": "query",
            "name": "merchant_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter by physical card.",
            "in": "query",
            "name": "card_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter by spend program.",
            "in": "query",
            "name": "spend_program_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter by statement.",
            "in": "query",
            "name": "statement_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter by transaction approval status.",
            "in": "query",
            "name": "approval_status",
            "required": false,
            "schema": {
              "enum": [
                "AWAITING_EMPLOYEE",
                "AWAITING_EMPLOYEE_CHANGES_REQUESTED",
                "AWAITING_EMPLOYEE_MISSING_ITEMS",
                "AWAITING_EMPLOYEE_REPAYMENT_FAILED",
                "AWAITING_EMPLOYEE_REPAYMENT_REQUESTED",
                "AWAITING_REVIEWER",
                "FULLY_APPROVED"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter by transaction state. If set to 'ALL', all transactions including 'DECLINED' will be listed.",
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "enum": [
                "ALL",
                "CLEARED",
                "COMPLETION",
                "DECLINED",
                "ERROR",
                "PENDING",
                "PENDING_INITIATION"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter by user.",
            "in": "query",
            "name": "user_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter for transactions awaiting approval by a specific user.",
            "in": "query",
            "name": "awaiting_approval_by_user_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter for transactions by sync status. If set, it supersedes sync_ready and has_no_sync_commits",
            "in": "query",
            "name": "sync_status",
            "required": false,
            "schema": {
              "enum": ["NOT_SYNC_READY", "SYNCED", "SYNC_READY"],
              "type": "string"
            }
          },
          {
            "description": "Filter for transactions that are coded with accounting fields and ready to sync to ERP systems.",
            "in": "query",
            "name": "sync_ready",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter for transactions that have been synced after the given date.",
            "in": "query",
            "name": "synced_after",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter for transactions that have larger amount that the given amount. This is a U.S. Dollar denominated amount.",
            "in": "query",
            "name": "min_amount",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "format": "decimal",
                  "type": "string"
                },
                {
                  "type": "number"
                }
              ]
            }
          },
          {
            "description": "Filter for transactions that have not been synced to ERP systems yet.",
            "in": "query",
            "name": "has_no_sync_commits",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter for transactions that have smaller amount that the given amount. This is a U.S. Dollar denominated amount.",
            "in": "query",
            "name": "max_amount",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "format": "decimal",
                  "type": "string"
                },
                {
                  "type": "number"
                }
              ]
            }
          },
          {
            "description": "Filter for transactions with a `user_transaction_time` after the given date.",
            "in": "query",
            "name": "from_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter for transactions with a `user_transaction_time` before the given date.",
            "in": "query",
            "name": "to_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter for trip ID.",
            "in": "query",
            "name": "trip_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter transactions by accounting field selection. This ID uniquely identifies an accounting field selection on Ramp.",
            "in": "query",
            "name": "accounting_field_selection_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter transactions by business entity.",
            "in": "query",
            "name": "entity_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filters for transactions which require a memo, but do not have one. This can only be set to true.",
            "in": "query",
            "name": "requires_memo",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Include all purchase data provided by the merchant.",
            "in": "query",
            "name": "include_merchant_data",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Sort transactions by `user_transaction_date` in ascending order.",
            "in": "query",
            "name": "order_by_date_asc",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Sort transactions by `user_transaction_date` in descending order.",
            "in": "query",
            "name": "order_by_date_desc",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Sort transactions by amount in ascending order.",
            "in": "query",
            "name": "order_by_amount_asc",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Sort transactions by amount in descending order.",
            "in": "query",
            "name": "order_by_amount_desc",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiTransactionCanonicalSchema"
                }
              }
            },
            "description": "Transactions"
          },
          "400": {
            "description": "raises TransactionInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["transactions:read"]
          }
        ],
        "summary": "List transactions",
        "tags": ["Transaction"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      }
    },
    "/developer/v1/transactions/{transaction_id}": {
      "get": {
        "operationId": "get_transaction_canonical_resource",
        "parameters": [
          {
            "description": "Include all purchase data provided by the merchant",
            "in": "query",
            "name": "include_merchant_data",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleTransaction"
                }
              }
            },
            "description": "Transaction"
          },
          "400": {
            "description": "raises TransactionInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["transactions:read"]
          }
        ],
        "summary": "Fetch a transaction",
        "tags": ["Transaction"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "transaction_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/transfers": {
      "get": {
        "description": "For information on how to use this endpoint, refer to the [Transfers Guide](/developer-api/v1/guides/transfers).",
        "operationId": "get_transfer_list_with_pagination",
        "parameters": [
          {
            "description": "Filter by sync status. Supersedes has_no_sync_commits if both are provided.",
            "in": "query",
            "name": "sync_status",
            "required": false,
            "schema": {
              "enum": ["NOT_SYNC_READY", "SYNCED", "SYNC_READY"],
              "type": "string"
            }
          },
          {
            "description": "Filter by transfer status. See [Transfers Guide](/developer-api/v1/guides/transfers) for definitions.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "ACH_CONFIRMED",
                "CANCELED",
                "COMPLETED",
                "ERROR",
                "INITIATED",
                "NOT_ACKED",
                "NOT_ENOUGH_FUNDS",
                "PROCESSING_BY_ODFI",
                "REJECTED_BY_ODFI",
                "RETURNED_BY_RDFI",
                "SUBMITTED_TO_FED",
                "SUBMITTED_TO_RDFI",
                "UNNECESSARY",
                "UPLOADED"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter transfers by business entity.",
            "in": "query",
            "name": "entity_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter transfers included in the specified statement.",
            "in": "query",
            "name": "statement_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter transfers that have not been synced.",
            "in": "query",
            "name": "has_no_sync_commits",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter transfers that occurred after this date (ISO8601 format).",
            "in": "query",
            "name": "from_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter transfers that occurred before this date (ISO8601 format).",
            "in": "query",
            "name": "to_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiTransferResourceSchema"
                }
              }
            },
            "description": "Transfers"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["transfers:read"]
          }
        ],
        "summary": "List transfer payments",
        "tags": ["Transfer Payment"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      }
    },
    "/developer/v1/transfers/{transfer_id}": {
      "get": {
        "description": "For information on how to use this endpoint, refer to the [Transfers Guide](/developer-api/v1/guides/transfers).",
        "operationId": "get_transfer_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transfer"
                }
              }
            },
            "description": "Transfer"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["transfers:read"]
          }
        ],
        "summary": "Fetch a transfer payment",
        "tags": ["Transfer Payment"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "transfer_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/users": {
      "get": {
        "operationId": "get_user_list_with_pagination",
        "parameters": [
          {
            "description": "Filter by user employee_id",
            "in": "query",
            "name": "employee_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by user role",
            "in": "query",
            "name": "role",
            "required": false,
            "schema": {
              "enum": [
                "AUDITOR",
                "BUSINESS_ADMIN",
                "BUSINESS_BOOKKEEPER",
                "BUSINESS_OWNER",
                "BUSINESS_USER",
                "GUEST_USER",
                "IT_ADMIN"
              ],
              "type": "string"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "type": "integer"
            }
          },
          {
            "description": "filter by business entity",
            "in": "query",
            "name": "entity_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "filter by department",
            "in": "query",
            "name": "department_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "filter by email",
            "in": "query",
            "name": "email",
            "required": false,
            "schema": {
              "format": "email",
              "type": "string"
            }
          },
          {
            "description": "filter by location",
            "in": "query",
            "name": "location_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiUserResourceSchema"
                }
              }
            },
            "description": "Users"
          },
          "400": {
            "description": "raises UserInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["users:read"]
          }
        ],
        "summary": "List users",
        "tags": ["User"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      }
    },
    "/developer/v1/users/deferred": {
      "post": {
        "description": "Call this endpoint to trigger an async task to send out a user invite via email. Users will need to accept the invite in order to be onboarded.\n\nAssign a user to a specific entity by specifying a `location_id` on creation. Locations are mapped to entities with a many-to-one relationship.",
        "operationId": "post_user_creation_deferred_task",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserCreateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeferredTaskUUID"
                }
              }
            },
            "description": "Response with the ID of the async task. Task status can be checked via a GET call to .../deferred/status/<task_id>"
          }
        },
        "security": [
          {
            "oauth2": ["users:write"]
          }
        ],
        "summary": "Create a user invite",
        "tags": ["User"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/users/deferred/status/{task_id}": {
      "get": {
        "operationId": "get_user_deferred_task_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDeferredTask"
                }
              }
            },
            "description": "User deferred task status"
          }
        },
        "security": [
          {
            "oauth2": ["users:write"]
          }
        ],
        "summary": "Fetch deferred task status",
        "tags": ["User"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "task_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/users/{user_id}": {
      "get": {
        "operationId": "get_user_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "User"
          },
          "400": {
            "description": "raises UserInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["users:read"]
          }
        ],
        "summary": "Fetch a user",
        "tags": ["User"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "patch": {
        "operationId": "patch_user_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserUpdateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Update user"
          },
          "400": {
            "description": "raises UserInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["users:write"]
          }
        ],
        "summary": "Update a user",
        "tags": ["User"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/users/{user_id}/deactivate": {
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "patch": {
        "description": "When users are deactivated, they will no longer be able to log in, spend on cards, or receive any notifications from Ramp.",
        "operationId": "patch_user_deactivation_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            },
            "description": "User deactivated successfully"
          },
          "400": {
            "description": "raises UserInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["users:write"]
          }
        ],
        "summary": "Deactivate a user",
        "tags": ["User"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/users/{user_id}/reactivate": {
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "patch": {
        "description": "Upon reactivation, users can log in to Ramp again, spend on their previously issued cards and resume receiving Ramp notifications.",
        "operationId": "patch_user_reactivation_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            },
            "description": "User reactivated successfully"
          },
          "400": {
            "description": "raises UserInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["users:write"]
          }
        ],
        "summary": "Reactivate a user",
        "tags": ["User"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/vendors": {
      "get": {
        "operationId": "get_vendor_list_resource",
        "parameters": [
          {
            "description": "Show only vendors whose sk_category_id matches a [Ramp Category Code](/developer-api/v1/overview/conventions#ramp-category-codes) in the passed list. Expects a comma-separated list of integers.",
            "in": "query",
            "name": "sk_category_ids",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Show only vendors with created_at after this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "in": "query",
            "name": "from_created_at",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "type": "integer"
            }
          },
          {
            "description": "Unique identifier of the user which owns this vendor.",
            "in": "query",
            "name": "vendor_owner_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "is_active",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiVendorResourceSchema"
                }
              }
            },
            "description": "Vendors"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["vendors:read"]
          }
        ],
        "summary": "List vendors",
        "tags": ["Vendor"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "post": {
        "description": "Vendors created in the API are approved by default, and are not subject to\nexisting approval policies.",
        "operationId": "post_vendor_list_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiVendorCreateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vendor"
                }
              }
            },
            "description": "Vendors"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["vendors:write"]
          }
        ],
        "summary": "Create a new vendor",
        "tags": ["Vendor"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/vendors/{vendor_id}": {
      "delete": {
        "description": "A vendor cannot be deleted if it has associated transactions, bills, contracts, or spend requests.",
        "operationId": "delete_vendor_resource",
        "responses": {
          "204": {
            "description": "Delete vendor"
          }
        },
        "security": [
          {
            "oauth2": ["vendors:write"]
          }
        ],
        "summary": "Delete a vendor",
        "tags": ["Vendor"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      },
      "get": {
        "operationId": "get_vendor_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiVendorDetailResource"
                }
              }
            },
            "description": "Vendors"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["vendors:read"]
          }
        ],
        "summary": "Fetch a vendor",
        "tags": ["Vendor"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "vendor_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "patch": {
        "operationId": "patch_vendor_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiVendorUpdateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vendor"
                }
              }
            },
            "description": "Vendors"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["vendors:write"]
          }
        ],
        "summary": "Update a vendor",
        "tags": ["Vendor"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/vendors/{vendor_id}/accounts": {
      "get": {
        "operationId": "get_vendor_bank_account_list_resource",
        "parameters": [
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiVendorBankAccountResource"
                }
              }
            },
            "description": "Vendor Bank Accounts"
          }
        },
        "security": [
          {
            "oauth2": ["vendors:read"]
          }
        ],
        "summary": "List vendor bank accounts",
        "tags": ["Vendor"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "vendor_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/vendors/{vendor_id}/accounts/{bank_account_id}": {
      "get": {
        "operationId": "get_vendor_bank_account_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiVendorBankAccountResource"
                }
              }
            },
            "description": "Vendor Bank Account"
          }
        },
        "security": [
          {
            "oauth2": ["vendors:read"]
          }
        ],
        "summary": "Fetch a vendor bank account",
        "tags": ["Vendor"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "bank_account_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "vendor_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/vendors/{vendor_id}/contacts": {
      "get": {
        "operationId": "get_vendor_contact_list_resource",
        "parameters": [
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiVendorContactResourceSchema"
                }
              }
            },
            "description": "Vendor Contacts"
          }
        },
        "security": [
          {
            "oauth2": ["vendors:read"]
          }
        ],
        "summary": "List vendor contacts for vendor",
        "tags": ["Vendor"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "vendor_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/vendors/{vendor_id}/contacts/{vendor_contact_id}": {
      "get": {
        "operationId": "get_vendor_contact_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiVendorContactResource"
                }
              }
            },
            "description": "Vendor Contact"
          }
        },
        "security": [
          {
            "oauth2": ["vendors:read"]
          }
        ],
        "summary": "Fetch a vendor contact",
        "tags": ["Vendor"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "vendor_contact_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "vendor_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/vendors/{vendor_id}/update-bank-accounts": {
      "parameters": [
        {
          "in": "path",
          "name": "vendor_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "post": {
        "description": "Adds or updates payment details for the vendor through the approval workflow.\nThe proposal may require approval depending on the business's approval policies.\n\nSupported payment methods:\n- ACH: US bank account with routing and account numbers\n- Wire: US wire transfer with routing and account numbers",
        "operationId": "post_vendor_bank_account_update_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiVendorBankAccountUpdateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Bank Account Update Response"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["vendors:write"]
          }
        ],
        "summary": "Update a vendor's bank account details",
        "tags": ["Vendor"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": false,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/webhooks": {
      "get": {
        "operationId": "get_outbound_webhook_subscription_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OutboundWebhookSubscriptionResource"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Get all webhook subscriptions",
        "tags": ["Webhooks"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "post": {
        "description": "The newly registered subscription will be in the pending verficiation state. You will need to verify your endpoint with the provided challenge.",
        "operationId": "post_outbound_webhook_subscription_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutboundWebhookSubscriptionCreateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutboundWebhookSubscriptionWithSecretResource"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Creates a new webhook subscription",
        "tags": ["Webhooks"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    },
    "/developer/v1/webhooks/{webhook_id}": {
      "delete": {
        "operationId": "delete_outbound_webhook_subscription_detail_resource",
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            },
            "description": "Success, No content"
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Delete a webhook subscription by id",
        "tags": ["Webhooks"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      },
      "get": {
        "operationId": "get_outbound_webhook_subscription_detail_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutboundWebhookSubscriptionResource"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Get a webhook subscription by id",
        "tags": ["Webhooks"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "webhook_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/webhooks/{webhook_id}/verify": {
      "parameters": [
        {
          "in": "path",
          "name": "webhook_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "post": {
        "operationId": "post_outbound_webhook_subscription_verify_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutboundWebhookSubscriptionVerifyRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleSuccess"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Verify a webhook subscription",
        "tags": ["Webhooks"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-ramp-plus-required": false
      }
    }
  },
  "info": {
    "title": "Ramp Developer API",
    "version": "v1"
  },
  "tags": [
    {
      "description": "Limit Operations",
      "name": "Limit"
    },
    {
      "description": "Operations related to accounting",
      "name": "Accounting"
    },
    {
      "description": "Operations related to approvals",
      "name": "Approvals"
    },
    {
      "description": "Operations related to bank accounts",
      "name": "Bank Accounts"
    },
    {
      "description": "Operations related to bill pay",
      "name": "Bill"
    },
    {
      "description": "Operations related to business",
      "name": "Business"
    },
    {
      "description": "Operations related to card programs",
      "name": "Card Program"
    },
    {
      "description": "Operations related to cards",
      "name": "Card"
    },
    {
      "description": "Operations related to cashback",
      "name": "Cashback"
    },
    {
      "description": "Operations related to custom records.",
      "name": "Custom Records"
    },
    {
      "description": "Operations related to departments",
      "name": "Department"
    },
    {
      "description": "Operations related to entity",
      "name": "Business Entities"
    },
    {
      "description": "Operations related to external dimensions",
      "name": "External Dimensions"
    },
    {
      "description": "Operations related to item receipts",
      "name": "Item Receipts"
    },
    {
      "description": "Operations related to location",
      "name": "Location"
    },
    {
      "description": "Operations related to memos",
      "name": "Memo"
    },
    {
      "description": "Operations related to merchant",
      "name": "Merchant"
    },
    {
      "description": "Operations related to purchase orders",
      "name": "Purchase Order"
    },
    {
      "description": "Operations related to receipt integrations.",
      "name": "Receipt Integrations"
    },
    {
      "description": "Operations related to receipts",
      "name": "Receipt"
    },
    {
      "description": "Operations related to reimbursements",
      "name": "Reimbursement"
    },
    {
      "description": "Operations related to repayments",
      "name": "Repayment"
    },
    {
      "description": "Operations related to sales leads",
      "name": "SalesLead"
    },
    {
      "description": "Operations related to spend events for Excel plug-in",
      "name": "Spend Export"
    },
    {
      "description": "Operations related to spend requests",
      "name": "Spend Request"
    },
    {
      "description": "Operations related to statements",
      "name": "Statement"
    },
    {
      "description": "Operations related to token",
      "name": "Token"
    },
    {
      "description": "Operations related to transactions",
      "name": "Transaction"
    },
    {
      "description": "Operations related to transfer payments",
      "name": "Transfer Payment"
    },
    {
      "description": "Operations related to users",
      "name": "User"
    },
    {
      "description": "Operations related to vendors",
      "name": "Vendor"
    },
    {
      "description": "Spend Program Operations",
      "name": "Spend Program"
    },
    {
      "description": "Subscribe to webhooks through developer API",
      "name": "Webhooks"
    }
  ],
  "openapi": "3.0.2",
  "components": {
    "schemas": {
      "AccountingProvider": {
        "example": {
          "created_at": "2021-01-01T00:00:00Z",
          "id": "46910cc3-ab41-4b80-b4a7-94dab9f1b795",
          "is_active": true,
          "last_linked_at": "2021-01-01T00:00:00Z",
          "remote_provider_name": "Quickbooks",
          "status": "LINKED"
        },
        "properties": {
          "created_at": {
            "description": "The date and time the accounting connection was created.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "is_active": {
            "description": "Whether the accounting connection is active.",
            "readOnly": true,
            "type": "boolean"
          },
          "last_linked_at": {
            "description": "The date and time the accounting connection was last connected.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "remote_provider_name": {
            "description": "The name of the accounting connection.",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "deprecated": true,
            "description": "The current status of the accounting connection.",
            "enum": ["failed_to_auth", "linked", "revoked", "unlinked"],
            "type": "string"
          }
        },
        "required": [
          "created_at",
          "id",
          "is_active",
          "last_linked_at",
          "remote_provider_name",
          "status"
        ],
        "type": "object"
      },
      "AccountingVendor": {
        "example": {
          "id": "V-5500-0135",
          "name": "Slack Technologies, LLC"
        },
        "properties": {
          "id": {
            "description": "Remote/external ID of accounting vendor in ERP system.",
            "type": "string"
          },
          "name": {
            "description": "name of the vendor",
            "type": "string"
          }
        },
        "required": ["id", "name"],
        "type": "object"
      },
      "Action": {
        "properties": {
          "action_kwargs": {
            "items": {
              "$ref": "#/components/schemas/ActionKwarg"
            },
            "type": "array"
          },
          "available_operands": {
            "items": {
              "$ref": "#/components/schemas/AvailableOperand"
            },
            "readOnly": true,
            "type": "array"
          },
          "has_been_visited": {
            "readOnly": true,
            "type": "boolean"
          },
          "identifier": {
            "type": "string"
          },
          "metadata": {},
          "uuid": {
            "format": "uuid",
            "type": "string"
          },
          "vertex_type": {
            "enum": ["ACTION"],
            "type": "string"
          }
        },
        "required": ["action_kwargs", "available_operands", "identifier", "uuid", "vertex_type"],
        "type": "object"
      },
      "ActionKwarg": {
        "discriminator": {
          "mapping": {
            "KEY_STATE_REFERENCE_TYPE": "#/components/schemas/KeyStateReference",
            "OBJECT": "#/components/schemas/ActionKwargObject",
            "OBJECT_LIST": "#/components/schemas/ActionKwargObjectList",
            "TYPED_KEY_VALUE_PAIR": "#/components/schemas/ActionKwargTypedKeyValuePair"
          },
          "propertyName": "action_kwarg_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ActionKwargObject"
          },
          {
            "$ref": "#/components/schemas/ActionKwargObjectList"
          },
          {
            "$ref": "#/components/schemas/ActionKwargTypedKeyValuePair"
          },
          {
            "$ref": "#/components/schemas/KeyStateReference"
          }
        ]
      },
      "ActionKwargObject": {
        "properties": {
          "action_kwarg_type": {
            "enum": ["OBJECT"],
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "object": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SingleObject"
              }
            ],
            "nullable": true
          },
          "object_type": {
            "type": "string"
          }
        },
        "required": ["action_kwarg_type", "key", "object", "object_type"],
        "type": "object"
      },
      "ActionKwargObjectList": {
        "properties": {
          "action_kwarg_type": {
            "enum": ["OBJECT_LIST"],
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "object_type": {
            "type": "string"
          },
          "objects": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SingleObject"
                }
              ],
              "nullable": true
            },
            "type": "array"
          }
        },
        "required": ["action_kwarg_type", "key", "object_type", "objects"],
        "type": "object"
      },
      "ActionKwargTypedKeyValuePair": {
        "properties": {
          "action_kwarg_type": {
            "enum": ["TYPED_KEY_VALUE_PAIR"],
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/TypedValue"
          }
        },
        "required": ["action_kwarg_type", "key", "value"],
        "type": "object"
      },
      "AddressValueSchema": {
        "properties": {
          "address1": {
            "description": "Street address line 1",
            "title": "Address1",
            "type": "string"
          },
          "address2": {
            "default": null,
            "description": "Street address line 2, e.g. apt number",
            "nullable": true,
            "title": "Address2",
            "type": "string"
          },
          "city": {
            "description": "City name",
            "title": "City",
            "type": "string"
          },
          "country": {
            "description": "Country code",
            "title": "Country",
            "type": "string"
          },
          "postal_code": {
            "default": null,
            "description": "Postal/ZIP code",
            "nullable": true,
            "title": "Postal Code",
            "type": "string"
          },
          "state": {
            "default": null,
            "description": "State or province name",
            "nullable": true,
            "title": "State",
            "type": "string"
          }
        },
        "required": ["address1", "city", "country"],
        "title": "AddressValueSchema",
        "type": "object"
      },
      "ApiAccountingCategory": {
        "properties": {
          "category_id": {
            "description": "User-selected category id for transaction.",
            "type": "string"
          },
          "category_name": {
            "description": "User-selected category name for transaction.",
            "type": "string"
          },
          "tracking_category_remote_id": {
            "type": "string"
          },
          "tracking_category_remote_name": {
            "type": "string"
          },
          "tracking_category_remote_type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiAccountingCategoryInfo": {
        "properties": {
          "id": {
            "description": "Remote/external ID of the accounting category from ERP system.",
            "type": "string"
          },
          "name": {
            "description": "Name of the accounting category in the remote ERP system.",
            "type": "string"
          },
          "ramp_id": {
            "description": "id to uniquely identify the accounting category within Ramp system",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiAccountingCustomFieldCreateRequestBody": {
        "example": {
          "display_name": "Dept",
          "id": "Department",
          "input_type": "SINGLE_CHOICE",
          "is_splittable": "True",
          "name": "Department"
        },
        "properties": {
          "display_name": {
            "description": "The name of the custom accounting field as shown on Ramp.",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Remote/external ID of custom accounting field from ERP system.",
            "type": "string"
          },
          "input_type": {
            "description": "The input type could be SINGLE_CHOICE, BOOLEAN or FREE_FORM_TEXT.",
            "enum": ["BOOLEAN", "FREE_FORM_TEXT", "SINGLE_CHOICE"],
            "type": "string"
          },
          "is_required_for": {
            "description": "Types of objects that require this accounting field to be used for coding before they can be marked as ready to sync.",
            "items": {
              "enum": ["BILL", "BILL_PAYMENT", "PURCHASE_ORDER", "REIMBURSEMENT", "TRANSACTION"],
              "type": "string"
            },
            "type": "array"
          },
          "is_splittable": {
            "description": "If set to True, the accounting field can be used to annotate split line items.",
            "type": "boolean"
          },
          "name": {
            "description": "name of the custom accounting field.",
            "type": "string"
          }
        },
        "required": ["id", "input_type", "name"],
        "type": "object"
      },
      "ApiAccountingCustomFieldOptionUpdateRequestBody": {
        "example": {
          "code": "450",
          "display_name": "Sales & Marketing Display",
          "reactivate": true,
          "value": "Sales & Marketing",
          "visibility": "VISIBLE"
        },
        "properties": {
          "code": {
            "description": "Only available if not using a direct ERP integration: Code of the custom accounting field option; you could provide an empty string to reset the code.",
            "type": "string"
          },
          "display_name": {
            "description": "Available to all: Update the display name of the custom field option.",
            "type": "string"
          },
          "reactivate": {
            "description": "Only available if not using a direct ERP integration: reactivate a deleted custom field option",
            "enum": [true],
            "type": "boolean"
          },
          "value": {
            "description": "Only available if not using a direct ERP integration: Name of the custom accounting field option.",
            "type": "string"
          },
          "visibility": {
            "description": "Available to all: Hide or Show option",
            "enum": ["HIDDEN", "VISIBLE"],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiAccountingCustomFieldOptionUploadRequestBody": {
        "example": {
          "field_id": "46910cc3-ab41-4b80-b4a7-94dab9f1b795",
          "options": [
            {
              "id": "418",
              "value": "Engineering & Design"
            },
            {
              "id": "514",
              "value": "Sales & Marketing"
            }
          ]
        },
        "properties": {
          "field_id": {
            "description": "id to uniquely identify a custom accounting field within Ramp system",
            "format": "uuid",
            "type": "string"
          },
          "options": {
            "description": "A list of field options for a given custom accounting field.",
            "items": {
              "$ref": "#/components/schemas/FieldOption"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          }
        },
        "required": ["field_id", "options"],
        "type": "object"
      },
      "ApiAccountingCustomFieldOptionUploadResponse": {
        "example": {
          "options": [
            {
              "code": "20001",
              "created_at": "2019-08-28T14:15:22+00:00",
              "id": "123",
              "is_active": true,
              "ramp_id": "649b6731-33c6-4ff5-8a5d-2333fcc90ace",
              "updated_at": "2020-08-28T14:40:12+00:00",
              "value": "Office/Admin:Phone & Internet"
            }
          ],
          "uploaded": ["649b6731-33c6-4ff5-8a5d-2333fcc90ace"]
        },
        "properties": {
          "options": {
            "description": "A list of custom accounting field options that are succesfully uploaded.",
            "items": {
              "$ref": "#/components/schemas/CustomFieldOption"
            },
            "type": "array"
          },
          "uploaded": {
            "deprecated": true,
            "description": "A list of uuids from the uploaded vendors, gl accounts or custom accounting field options.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiAccountingCustomFieldResource": {
        "example": {
          "created_at": "2019-08-28T14:15:22+00:00",
          "display_name": "Dept",
          "id": "Department",
          "input_type": "SINGLE_CHOICE",
          "is_active": true,
          "is_splittable": true,
          "name": "Department",
          "ramp_id": "46910cc3-ab41-4b80-b4a7-94dab9f1b795",
          "updated_at": "2020-08-28T14:40:12+00:00"
        },
        "properties": {
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "display_name": {
            "description": "Name of the custom accounting field on Ramp.",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Remote/external ID of custom accounting field from ERP system.",
            "type": "string"
          },
          "input_type": {
            "description": "The input type could be SINGLE_CHOICE, BOOLEAN or FREE_FORM_TEXT.",
            "enum": ["BOOLEAN", "FREE_FORM_TEXT", "SINGLE_CHOICE"],
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          },
          "is_required_for": {
            "description": "Types of objects that require this accounting field to be used for coding before they can be marked as ready to sync.",
            "items": {
              "enum": ["BILL", "BILL_PAYMENT", "PURCHASE_ORDER", "REIMBURSEMENT", "TRANSACTION"],
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "is_splittable": {
            "type": "boolean"
          },
          "name": {
            "description": "Name of the custom accounting field in the remote ERP system.",
            "type": "string"
          },
          "ramp_id": {
            "description": "id to uniquely identify a custom accounting field within Ramp system",
            "format": "uuid",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": ["display_name", "input_type", "is_required_for"],
        "type": "object"
      },
      "ApiAccountingCustomFieldUpdateParamsRequestBody": {
        "example": {
          "display_name": "department",
          "is_splittable": "True",
          "name": "New Department"
        },
        "properties": {
          "display_name": {
            "description": "Update the name of the custom accounting field on Ramp.",
            "nullable": true,
            "type": "string"
          },
          "is_splittable": {
            "description": "Update the is_splittable of the custom accounting field on Ramp.",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the custom accounting field.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiAccountingFailedSyncRequestBody": {
        "example": {
          "error": {
            "message": "The account period has closed and the account books cannot be updated."
          },
          "id": "bb037f47-c664-46f9-afa7-cc68cbcf5a23"
        },
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiAccountingSyncErrorRequestBody"
              }
            ],
            "description": "describes the reason why the sync object failed to sync."
          },
          "id": {
            "description": "ID that uniquely identifies a transaction/reimbursement in Ramp systems.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": ["error", "id"],
        "type": "object"
      },
      "ApiAccountingField": {
        "properties": {
          "external_id": {
            "description": "external id of accounting field; It should uniquely identify an accounting field on the client end.",
            "type": "string"
          },
          "id": {
            "description": "ID that uniquely identifies an accounting field within Ramp",
            "type": "string"
          },
          "name": {
            "description": "name of accounting field",
            "type": "string"
          },
          "type": {
            "description": "accounting field type",
            "enum": [
              "AMORTIZATION_TEMPLATE",
              "BILLABLE",
              "COST_CENTER",
              "CUSTOMERS_JOBS",
              "DEFERRAL_CODE",
              "EXPENSE_ENTITY",
              "GL_ACCOUNT",
              "INVENTORY_ITEM",
              "JOURNAL",
              "MERCHANT",
              "OTHER",
              "PROJECT",
              "REPORTING_TAG",
              "SUBSIDIARY",
              "TAX_CODE"
            ],
            "type": "string"
          }
        },
        "required": ["external_id", "id", "name", "type"],
        "type": "object"
      },
      "ApiAccountingFieldSelection": {
        "properties": {
          "category_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiAccountingField"
              }
            ],
            "description": "information about the accounting category (or accounting field)."
          },
          "external_code": {
            "description": "external code of accounting field option; Code field displayed on the ERP.",
            "type": "string"
          },
          "external_id": {
            "description": "external id of accounting field option; It should uniquely identify an accounting field option on the client end.",
            "type": "string"
          },
          "id": {
            "description": "ID that uniquely identifies an accounting field option within Ramp",
            "type": "string"
          },
          "name": {
            "description": "name of accounting field option",
            "type": "string"
          }
        },
        "required": ["category_info", "external_id", "id", "name"],
        "type": "object"
      },
      "ApiAccountingFieldSelectionSource": {
        "properties": {
          "type": {
            "description": "Describes the type of source that added this selection.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiAccountingGLAccountUpdateRequestBody": {
        "example": {
          "code": "6410",
          "name": "Employees:Salaries & Wages",
          "reactivate": true
        },
        "properties": {
          "code": {
            "description": "code of the general ledger account; you could provide an empty string if you want to reset the code.",
            "type": "string"
          },
          "name": {
            "description": "name of the general ledger account",
            "type": "string"
          },
          "reactivate": {
            "description": "reactivate a deleted general ledger account",
            "enum": [true],
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ApiAccountingGLAccountUploadRequestBody": {
        "example": {
          "gl_accounts": [
            {
              "classification": "EXPENSE",
              "code": "6410",
              "id": "514",
              "name": "Employees:Salaries & Wages"
            },
            {
              "classification": "EXPENSE",
              "id": "418",
              "name": "Office/Admin:Phone & Internet"
            },
            {
              "classification": "REVENUE",
              "id": "425",
              "name": "Sales"
            }
          ]
        },
        "properties": {
          "gl_accounts": {
            "description": "A list of general ledger accounts that you want to use to classify your Ramp transactions.",
            "items": {
              "$ref": "#/components/schemas/GLAccount"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          }
        },
        "required": ["gl_accounts"],
        "type": "object"
      },
      "ApiAccountingGLAccountUploadResponse": {
        "example": {
          "gl_accounts": [
            {
              "classification": "EXPENSE",
              "code": "6410",
              "created_at": "2019-08-28T14:15:22+00:00",
              "gl_account_category_info": {
                "ramp_id": "96bb7007-eec5-430f-8d09-e033cbc000c2",
                "remote_id": "Category",
                "remote_name": "Category"
              },
              "id": "514",
              "is_active": true,
              "name": "Employees:Salaries & Wages",
              "ramp_id": "46910cc3-ab41-4b80-b4a7-94dab9f1b795",
              "updated_at": "2020-08-28T14:40:12+00:00"
            },
            {
              "classification": "EXPENSE",
              "created_at": "2019-08-28T14:15:22+00:00",
              "gl_account_category_info": {
                "ramp_id": "96bb7007-eec5-430f-8d09-e033cbc000c2",
                "remote_id": "Category",
                "remote_name": "Category"
              },
              "id": "418",
              "is_active": true,
              "name": "Office/Admin:Phone & Internet",
              "ramp_id": "733cf0e9-5cec-411b-935e-8b9b28ff63ba",
              "updated_at": "2020-08-28T14:40:12+00:00"
            }
          ],
          "uploaded": ["46910cc3-ab41-4b80-b4a7-94dab9f1b795", "733cf0e9-5cec-411b-935e-8b9b28ff63ba"]
        },
        "properties": {
          "gl_accounts": {
            "description": "A list of general ledger accounts that are succesfully uploaded.",
            "items": {
              "$ref": "#/components/schemas/GeneralLedgerAccount"
            },
            "type": "array"
          },
          "uploaded": {
            "deprecated": true,
            "description": "A list of uuids from the uploaded vendors, gl accounts or custom accounting field options.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiAccountingProviderAccessCreateRequestBody": {
        "example": {
          "reactivate": false,
          "remote_provider_name": "ACCOUNTING_SEED"
        },
        "properties": {
          "reactivate": {
            "default": false,
            "deprecated": true,
            "description": "Deprecated, use POST accounting/connection/<connection_id>/reactivate.",
            "type": "boolean"
          },
          "remote_provider_name": {
            "description": "The name of the accounting connection.",
            "type": "string"
          }
        },
        "required": ["remote_provider_name"],
        "type": "object"
      },
      "ApiAccountingProviderAccessListResource": {
        "example": {
          "connections": [
            {
              "created_at": "2021-01-01T00:00:00Z",
              "id": "46910cc3-ab41-4b80-b4a7-94dab9f1b795",
              "last_linked_at": "2021-01-01T00:00:00Z",
              "remote_provider_name": "Quickbooks",
              "status": "LINKED"
            },
            {
              "created_at": "2021-01-01T00:00:00Z",
              "id": "649b6731-33c6-4ff5-8a5d-2333fcc90ace",
              "last_linked_at": "2021-12-31T00:00:00Z",
              "remote_provider_name": "Netsuite",
              "status": "UNLINKED"
            }
          ]
        },
        "properties": {
          "connections": {
            "description": "A list of accounting connections for the current business.",
            "items": {
              "$ref": "#/components/schemas/AccountingProvider"
            },
            "type": "array"
          }
        },
        "required": ["connections"],
        "type": "object"
      },
      "ApiAccountingSuccessfulSyncRequestBody": {
        "example": {
          "id": "bb037f47-c664-46f9-afa7-cc68cbcf5a23",
          "reference_id": "83283a15-c0a0-4105-9724-2fcfefa9924f"
        },
        "properties": {
          "deep_link_url": {
            "description": "URL that links to the object in the remote ERP system. Only applicable for bills.",
            "format": "url",
            "type": "string"
          },
          "id": {
            "description": "ID that uniquely identifies the object to sync in Ramp systems.",
            "format": "uuid",
            "type": "string"
          },
          "reference_id": {
            "description": "ID that uniquely identifies the object to sync in remote ERP systems.",
            "type": "string"
          }
        },
        "required": ["id", "reference_id"],
        "type": "object"
      },
      "ApiAccountingSyncCreateRequestBody": {
        "example": {
          "failed_syncs": [
            {
              "error": {
                "message": "The account period has closed and the account books cannot be updated."
              },
              "id": "d471d830-2e73-4082-8a75-68540f83e86e"
            }
          ],
          "idempotency_key": "d471d830-2e73-4082-8a75-68540f83e86e",
          "successful_syncs": [
            {
              "id": "5a58eb94-a583-458f-810d-c794f32f2f90",
              "reference_id": "d8573713-a97d-4119-bdd7-b69c318df9bb"
            },
            {
              "id": "bb037f47-c664-46f9-afa7-cc68cbcf5a23",
              "reference_id": "83283a15-c0a0-4105-9724-2fcfefa9924f"
            }
          ],
          "sync_type": "TRANSACTION_SYNC"
        },
        "properties": {
          "failed_syncs": {
            "description": "A list of objects that failed to be synced.",
            "items": {
              "$ref": "#/components/schemas/ApiAccountingFailedSyncRequestBody"
            },
            "maxItems": 5000,
            "minItems": 1,
            "type": "array"
          },
          "idempotency_key": {
            "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.",
            "type": "string"
          },
          "successful_syncs": {
            "description": "A list of successfully synced objects.",
            "items": {
              "$ref": "#/components/schemas/ApiAccountingSuccessfulSyncRequestBody"
            },
            "maxItems": 5000,
            "minItems": 1,
            "type": "array"
          },
          "sync_type": {
            "description": "The type of object to sync.",
            "enum": [
              "ACCRUAL_SYNC",
              "BANKING_TRANSACTION_SYNC",
              "BILL_PAYMENT_SYNC",
              "BILL_SYNC",
              "BROKERAGE_ORDER_SYNC",
              "PAYEE_SYNC",
              "REIMBURSEMENT_SYNC",
              "STATEMENT_CREDIT_SYNC",
              "TRACKING_CATEGORY_OPTION_SYNC",
              "TRANSACTION_SYNC",
              "TRANSFER_SYNC",
              "WALLET_TRANSFER_SYNC"
            ],
            "type": "string"
          }
        },
        "required": ["idempotency_key", "sync_type"],
        "type": "object"
      },
      "ApiAccountingSyncErrorRequestBody": {
        "example": {
          "message": "The account period has closed and the account books cannot be updated."
        },
        "properties": {
          "message": {
            "description": "an error message that explains the reason of the sync failure.",
            "type": "string"
          }
        },
        "required": ["message"],
        "type": "object"
      },
      "ApiAccountingSyncResource": {
        "properties": {
          "sync_id": {
            "description": "Unique identifier of the sync job.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": ["sync_id"],
        "type": "object"
      },
      "ApiAccountingVendorUpdateRequestBody": {
        "example": {
          "code": "19566",
          "name": "Amazon",
          "reactivate": true
        },
        "properties": {
          "code": {
            "description": "Code of the vendor; you could provide an empty string to reset the code.",
            "type": "string"
          },
          "name": {
            "description": "Name of a vendor",
            "type": "string"
          },
          "reactivate": {
            "description": "reactivate a deleted vendor",
            "enum": [true],
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ApiAccountingVendorUploadRequestBody": {
        "example": {
          "vendors": [
            {
              "id": "V-5500-0130",
              "name": "AirTable"
            },
            {
              "id": "V-5500-0135",
              "name": "Slack Technologies, LLC"
            },
            {
              "id": "V-5500-0142",
              "name": "Microsoft"
            }
          ]
        },
        "properties": {
          "vendors": {
            "description": "A list of vendors that you want to use to classify your Ramp transactions.",
            "items": {
              "$ref": "#/components/schemas/AccountingVendor"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          }
        },
        "required": ["vendors"],
        "type": "object"
      },
      "ApiAccountingVendorUploadResponse": {
        "example": {
          "uploaded": ["459cf0e9-5cec-411b-935e-8b9b28ff63ba", "649b6731-33c6-4ff5-8a5d-2333fcc90ace"],
          "vendors": [
            {
              "code": "19566",
              "created_at": "2019-08-28T14:15:22+00:00",
              "id": "123",
              "is_active": true,
              "is_synced": true,
              "name": "Amazon",
              "ramp_id": "649b6731-33c6-4ff5-8a5d-2333fcc90ace",
              "updated_at": "2020-08-28T14:40:12+00:00",
              "vendor_category_info": {
                "ramp_id": "96bb7007-eec5-430f-8d09-e033cbc000c2",
                "remote_id": "Merchant",
                "remote_name": "Merchant"
              }
            },
            {
              "code": "19566",
              "created_at": "2019-08-28T14:15:22+00:00",
              "id": "V-5500-0131",
              "is_active": true,
              "is_synced": true,
              "name": "Microsoft",
              "ramp_id": "459cf0e9-5cec-411b-935e-8b9b28ff63ba",
              "updated_at": "2020-08-28T14:40:12+00:00",
              "vendor_category_info": {
                "ramp_id": "96bb7007-eec5-430f-8d09-e033cbc000c2",
                "remote_id": "Merchant",
                "remote_name": "Merchant"
              }
            }
          ]
        },
        "properties": {
          "uploaded": {
            "deprecated": true,
            "description": "A list of uuids from the uploaded vendors, gl accounts or custom accounting field options.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "vendors": {
            "description": "A list of vendors that are succesfully uploaded.",
            "items": {
              "$ref": "#/components/schemas/VendorAccount"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiAddressResource": {
        "properties": {
          "address_line_1": {
            "type": "string"
          },
          "address_line_2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        },
        "required": ["address_line_1", "city", "country", "postal_code"],
        "type": "object"
      },
      "ApiBankAccountResource": {
        "properties": {
          "account_number_last_four": {
            "description": "Last four digits of the account number",
            "type": "string"
          },
          "financial_institution_name": {
            "description": "Name of the associated financial institution",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the bank account",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": ["account_number_last_four", "financial_institution_name", "id"],
        "type": "object"
      },
      "ApiBillInventoryLineItem": {
        "properties": {
          "accounting_field_selections": {
            "description": "List of accounting field options selected to code the line item.",
            "items": {
              "$ref": "#/components/schemas/ApiAccountingFieldSelection"
            },
            "type": "array"
          },
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Amount of the line item, equal to the product of unit quantity and unit price",
            "readOnly": true
          },
          "memo": {
            "description": "Memo of the line item",
            "type": "string"
          },
          "unit_price": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Unit price of the line item",
            "readOnly": true
          },
          "unit_quantity": {
            "description": "Unit quantity of the line item",
            "type": "integer"
          }
        },
        "required": ["accounting_field_selections", "amount", "unit_price", "unit_quantity"],
        "type": "object"
      },
      "ApiBillLineItem": {
        "properties": {
          "accounting_field_selections": {
            "description": "List of accounting field options selected to code the line item.",
            "items": {
              "$ref": "#/components/schemas/ApiAccountingFieldSelection"
            },
            "type": "array"
          },
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Amount of the line item",
            "readOnly": true
          },
          "memo": {
            "description": "Memo of the line item",
            "type": "string"
          }
        },
        "required": ["accounting_field_selections", "amount"],
        "type": "object"
      },
      "ApiBillOwner": {
        "properties": {
          "first_name": {
            "description": "Bill owner's first name.",
            "type": "string"
          },
          "id": {
            "description": "Bill owner's ID.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "users",
              "type": "many-to-one"
            }
          },
          "last_name": {
            "description": "Bill owner's last name.",
            "type": "string"
          }
        },
        "required": ["id"],
        "type": "object"
      },
      "ApiBillPayment": {
        "properties": {
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Paid amount of the bill."
          },
          "details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiPaymentDetailsResource"
              }
            ],
            "description": "Additional payment details specific to payment method."
          },
          "effective_date": {
            "description": "For non-card payment methods only, the date the payment is actually initiated.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "payment_date": {
            "description": "For non-card payment methods, the date the payment is scheduled to be initiated. For card methods, the settlement date of the latest transaction on card. Additional information about transactions should be accessed through the transactions API.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "payment_method": {
            "enum": [
              "ACH",
              "CARD",
              "CHECK",
              "DOMESTIC_WIRE",
              "INTERNATIONAL",
              "ONE_TIME_CARD",
              "ONE_TIME_CARD_DELIVERY",
              "PAID_MANUALLY",
              "SWIFT",
              "UNSPECIFIED",
              "VENDOR_CREDIT"
            ],
            "nullable": true,
            "type": "string"
          },
          "trace_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiBillTraceId"
              }
            ],
            "description": "For non-card payment methods only, the trace ID for this bill. This field is only returned in the GET /bills/{bill_id} response body (not in the GET /bills paginated query).",
            "nullable": true
          }
        },
        "required": [
          "amount",
          "details",
          "effective_date",
          "payment_date",
          "payment_method",
          "trace_id"
        ],
        "type": "object"
      },
      "ApiBillTraceId": {
        "properties": {
          "descriptor": {
            "description": "Human-readable description of the trace ID. For example, 'Check Number' or 'ACH Trace ID'.",
            "type": "string"
          },
          "trace_id": {
            "description": "The unique reference ID to the payment for this bill.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiBillVendor": {
        "properties": {
          "id": {
            "description": "Unique identifier of the vendor.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "vendors",
              "type": "one-to-many"
            }
          },
          "name": {
            "description": "Name of the vendor.",
            "type": "string"
          },
          "remote_code": {
            "description": "Code of the vendor; usually it is a unique identifier for the vendor in the remote ERP system.",
            "type": "string"
          },
          "remote_id": {
            "description": "External ID that uniquely identifies the vendor on the client's side.",
            "type": "string"
          },
          "remote_name": {
            "description": "Name of the vendor.",
            "type": "string"
          },
          "type": {
            "enum": ["BUSINESS", "INDIVIDUAL"],
            "type": "string"
          }
        },
        "required": ["id", "name"],
        "type": "object"
      },
      "ApiCardAccountingRulesDataRequestBody": {
        "properties": {
          "tracking_category_id": {
            "format": "uuid",
            "type": "string"
          },
          "tracking_category_option_id": {
            "format": "uuid",
            "type": "string"
          },
          "tracking_category_option_remote_name": {
            "type": "string"
          }
        },
        "required": [
          "tracking_category_id",
          "tracking_category_option_id",
          "tracking_category_option_remote_name"
        ],
        "type": "object"
      },
      "ApiCardDeferredTaskContext": {
        "properties": {
          "acting_user_id": {
            "description": "Unique identifier of the acting user that initiated the deferred task.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "users",
              "type": "many-to-one"
            }
          },
          "card_id": {
            "description": "Unique identifier of the subject card in the deferred task.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "cards",
              "type": "many-to-one"
            }
          }
        },
        "type": "object"
      },
      "ApiCardDeferredTaskData": {
        "properties": {
          "card_id": {
            "description": "Unique identifier of the subject card in the deferred task.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "cards",
              "type": "one-to-one"
            }
          },
          "error": {
            "description": "An error message if the deferred task fails.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiCardDeferredUpdateRequestBody": {
        "properties": {
          "idempotency_key": {
            "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.",
            "type": "string"
          }
        },
        "required": ["idempotency_key"],
        "type": "object"
      },
      "ApiCardFulfillment": {
        "properties": {
          "card_personalization": {
            "$ref": "#/components/schemas/CardPersonalization"
          },
          "cardholder_uuid": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "fulfillment_status": {
            "description": "Fulfillment status of the card",
            "enum": ["DELIVERED", "DIGITALLY_PRESENTED", "ISSUED", "ORDERED", "REJECTED", "SHIPPED"],
            "type": "string"
          },
          "shipping": {
            "$ref": "#/components/schemas/CardShipping"
          },
          "shipping_date": {
            "description": "Date on which the card is shipped out, presented in ISO8601 format",
            "format": "date-time",
            "type": "string"
          },
          "shipping_eta": {
            "description": "Estimated arrival time, presented in ISO8601 format",
            "format": "date-time",
            "type": "string"
          },
          "shipping_tracking_url": {
            "description": "Tracking url",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiCardPaymentDetailsResource": {
        "properties": {
          "spend_limit_id": {
            "description": "Unique identifier of the spend limit associated with this bill payment.",
            "format": "uuid",
            "type": "string"
          },
          "transaction_ids": {
            "description": "Array of unique identifiers of transactions associated with this bill payment.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiCardProgramCreateRequestBody": {
        "example": {
          "description": "Offer a yearly stipend for conferences and courses.",
          "display_name": "Education Stipend",
          "icon": "EducationStipendIcon",
          "is_default": false,
          "is_physical": false,
          "spending_restrictions": {
            "amount": 750,
            "categories": [33],
            "interval": "YEARLY",
            "lock_date": "2024-08-20T00:00:00+00:00"
          }
        },
        "properties": {
          "acting_user_id": {
            "type": "integer"
          },
          "business_id": {
            "type": "integer"
          },
          "description": {
            "description": "Description of the card program.",
            "type": "string"
          },
          "display_name": {
            "description": "Display name of the card program.",
            "type": "string"
          },
          "icon": {
            "enum": [
              "AdvertisingIcon",
              "CardIcon",
              "EducationStipendIcon",
              "LunchOrderingIcon",
              "OnboardingIcon",
              "PerDiemCardIcon",
              "SaasSubscriptionIcon",
              "SoftwareTrialIcon",
              "TravelExpensesIcon",
              "WellnessIcon"
            ],
            "type": "string"
          },
          "is_default": {
            "description": "Whether this card program is used as default card program.",
            "type": "boolean"
          },
          "is_physical": {
            "description": "Whether this card program is used for physical cards.",
            "type": "boolean"
          },
          "policy_id": {
            "type": "integer"
          },
          "spending_restrictions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiCardSpendingRestrictionsRequestBody"
              }
            ],
            "description": "Spending restrictions associated with the card program."
          }
        },
        "required": [
          "acting_user_id",
          "business_id",
          "description",
          "display_name",
          "is_default",
          "is_physical",
          "policy_id",
          "spending_restrictions"
        ],
        "type": "object"
      },
      "ApiCardProgramResource": {
        "example": {
          "description": "Offer a yearly stipend for conferences and courses.",
          "display_name": "Education Stipend",
          "icon": "EducationStipendIcon",
          "id": "97ad0c67-c318-4591-9b0e-202ecceb8016",
          "is_default": false,
          "is_physical": false,
          "spending_restrictions": {
            "amount": 750,
            "categories": [33],
            "interval": "YEARLY",
            "lock_date": "2024-08-20T00:00:00+00:00",
            "transaction_amount_limit": 200
          }
        },
        "properties": {
          "description": {
            "description": "Card program description.",
            "type": "string"
          },
          "display_name": {
            "description": "Display name of the card program.",
            "type": "string"
          },
          "icon": {
            "enum": [
              "AdvertisingIcon",
              "CardIcon",
              "EducationStipendIcon",
              "LunchOrderingIcon",
              "OnboardingIcon",
              "PerDiemCardIcon",
              "SaasSubscriptionIcon",
              "SoftwareTrialIcon",
              "TravelExpensesIcon",
              "WellnessIcon"
            ],
            "type": "string"
          },
          "id": {
            "description": "Unique identifer of the card program.",
            "format": "uuid",
            "type": "string"
          },
          "is_default": {
            "description": "Whether this card program is used as default card program.",
            "type": "boolean"
          },
          "is_physical": {
            "description": "Whether this card program is used for physical cards.",
            "type": "boolean"
          },
          "spending_restrictions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiCardProgramSpendingRestrictions"
              }
            ],
            "description": "Spending restrictions associated with the card program."
          }
        },
        "required": ["icon"],
        "type": "object",
        "x-resource-name": "card_programs"
      },
      "ApiCardProgramSpendingRestrictions": {
        "properties": {
          "amount": {
            "description": "Amount limit total per interval.",
            "type": "number"
          },
          "categories": {
            "description": "List of [Ramp Category Codes](/developer-api/v1/overview/conventions#ramp-category-codes) this card is restricted to.",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "interval": {
            "description": "Time interval to apply limit to.",
            "enum": ["ANNUAL", "DAILY", "MONTHLY", "QUARTERLY", "TERTIARY", "TOTAL", "WEEKLY", "YEARLY"],
            "type": "string"
          },
          "lock_date": {
            "description": "Date to automatically lock the card.",
            "format": "date-time",
            "type": "string"
          },
          "transaction_amount_limit": {
            "description": "Max amount limit per transaction.",
            "type": "number"
          }
        },
        "type": "object"
      },
      "ApiCardRequestBody": {
        "example": {
          "display_name": "T&E",
          "entity_id": "7051bc66-a8cb-4e68-81c4-caf6459ac168",
          "idempotency_key": "3a5b1f62-988f-4190-bf31-b7ae87c5df42",
          "spending_restrictions": {
            "amount": 5000,
            "categories": [],
            "currency": "USD",
            "interval": "MONTHLY",
            "transaction_amount_limit": 100
          },
          "user_id": "d8135cfe-0396-4b2d-b2cf-ad809fb04731"
        },
        "properties": {
          "card_program_id": {
            "description": "Alternative method to create a card using a card program. One of spending_restrictions or card_program_id must be provided. If this value is given, no other attributes (other than idempotency_key) may be given.",
            "format": "uuid",
            "type": "string"
          },
          "display_name": {
            "description": "Cosmetic display name of the card.",
            "type": "string"
          },
          "entity_id": {
            "description": "Create card associated with business entity. If not provided, defaults to entity associated with user's location.",
            "format": "uuid",
            "type": "string"
          },
          "idempotency_key": {
            "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.",
            "type": "string"
          },
          "is_temporary": {
            "default": false,
            "description": "Set to true to create a temporary card",
            "type": "boolean"
          },
          "spending_restrictions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiCardSpendingRestrictionsRequestBody"
              }
            ],
            "description": "Specifies the spend restrictions on a Ramp card. One of `spending_restrictions` or `card_program_id` must be provided."
          },
          "user_id": {
            "description": "Unique identifier of the card owner.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": ["idempotency_key", "user_id"],
        "type": "object"
      },
      "ApiCardSpendingRestrictionsDump": {
        "properties": {
          "amount": {
            "description": "Amount limit total per interval.",
            "type": "number"
          },
          "auto_lock_date": {
            "description": "Date to automatically lock the card. Note that this is different from the actual card expiration date. It conforms to ISO8601 format",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "blocked_categories": {
            "description": "List of [Ramp Category Codes](/developer-api/v1/overview/conventions#ramp-category-codes) blocked for this card.",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "categories": {
            "description": "List of [Ramp Category Codes](/developer-api/v1/overview/conventions#ramp-category-codes) this card is restricted to.",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "interval": {
            "description": "Time interval to apply limit to.",
            "enum": ["ANNUAL", "DAILY", "MONTHLY", "QUARTERLY", "TERTIARY", "TOTAL", "WEEKLY", "YEARLY"],
            "type": "string"
          },
          "suspended": {
            "description": "Whether the card has been locked.",
            "type": "boolean"
          },
          "transaction_amount_limit": {
            "description": "Max amount limit per transaction.",
            "type": "number"
          }
        },
        "type": "object"
      },
      "ApiCardSpendingRestrictionsRequestBody": {
        "properties": {
          "amount": {
            "description": "Amount limit total per interval.",
            "minimum": 0,
            "oneOf": [
              {
                "format": "decimal",
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          },
          "blocked_mcc_codes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "card_accounting_rules": {
            "items": {
              "$ref": "#/components/schemas/ApiCardAccountingRulesDataRequestBody"
            },
            "type": "array"
          },
          "categories": {
            "description": "List of [Ramp Category Codes](/developer-api/v1/overview/conventions#ramp-category-codes) this card is restricted to.",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "categories_blacklist": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "categories_whitelist": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "currency": {
            "description": "Currency in which the amount is specified.",
            "type": "string"
          },
          "interval": {
            "description": "Time interval to apply limit to.",
            "enum": ["ANNUAL", "DAILY", "MONTHLY", "QUARTERLY", "TERTIARY", "TOTAL", "WEEKLY", "YEARLY"],
            "type": "string"
          },
          "lock_date": {
            "description": "Date to automatically lock the card. If `lock_date` has passed, set to a future date or to null to unlock the card. Note that this is different from the actual card expiration date. This date need to conforms to ISO8601 format.",
            "format": "date-time",
            "type": "string"
          },
          "policy_id": {
            "type": "string"
          },
          "transaction_amount_limit": {
            "description": "Max amount limit per transaction.",
            "minimum": 0,
            "oneOf": [
              {
                "format": "decimal",
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          },
          "vendor_blacklist": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "vendor_whitelist": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": ["amount", "interval"],
        "type": "object"
      },
      "ApiCardUpdateRequestBody": {
        "example": {
          "card_program_id": "ebe71e80-84d3-4e4b-be4d-70d05fb20934",
          "display_name": "WFH Spending Card",
          "entity_id": "a7cb9187-4dc8-412a-b5ca-0974d7f07a0b",
          "has_notifications_enabled": true,
          "new_user_id": "506a7096-98c0-4ab5-86ef-20c884a78e74",
          "spending_restrictions": {
            "amount": 500,
            "interval": "DAILY"
          }
        },
        "properties": {
          "card_program_id": {
            "description": "Specify a card program to link with.\nThis will override the card's spending restrictions with those of the card program.\nPass `card_program_id = None` to detach the card's current card program.\n\nIf the `card_program_id` field is specified, then the card program's changes will override any other changes.\nFor example, if both `spending_restrictions` and `card_program_id` are passed, then the new spending restrictions\nwill match those of the card program (not the passed spending restrictions).\n",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "display_name": {
            "description": "Cosmetic display name of the card.",
            "type": "string"
          },
          "entity_id": {
            "description": "Specify id to update associated business entity.",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "has_notifications_enabled": {
            "description": "Flag to set to enable or disable notifications.",
            "type": "boolean"
          },
          "new_user_id": {
            "description": "Specify id for new card owner.",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "spending_restrictions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PartialApiCardSpendingRestrictionsUpdateRequestBody"
              }
            ],
            "description": "Modify spending restrictions. Only the fields to be modified need to be passed (so fields that will stay the same do not have to be passed)."
          }
        },
        "type": "object"
      },
      "ApiCreateAccountingFieldParamsRequestBody": {
        "properties": {
          "field_external_id": {
            "description": "Remote ID of accounting field. This is the external ID, likely from ERP system.",
            "type": "string"
          },
          "field_option_external_id": {
            "description": "Remote ID of accounting field option. This is the external ID, likely from ERP system.",
            "type": "string"
          }
        },
        "required": ["field_external_id", "field_option_external_id"],
        "type": "object"
      },
      "ApiCreateBankAccountPaymentParamsRequestBody": {
        "properties": {
          "payment_arrival_date": {
            "description": "\nThe expected date the payment will arrive in the vendor's bank account.\n\nThe required time and fee to process the payment depends on the payment method. See the [Ramp Help Center](https://support.ramp.com/hc/en-us/articles/4417836454419-Bill-payment-methods-and-timelines) for more information on payment speeds. An error will be thrown if selected date is invalid.\n",
            "format": "date",
            "type": "string"
          },
          "source_bank_account_id": {
            "description": "Unique identifier of the bank account to pay the bill from. Must be associated with the passed business entity and have usage_type=BILL_PAY_BANK_ACCOUNT.",
            "format": "uuid",
            "type": "string"
          },
          "vendor_account_id": {
            "description": "Unique identifier of the vendor account to pay the bill to.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": ["payment_arrival_date", "source_bank_account_id", "vendor_account_id"],
        "type": "object"
      },
      "ApiCreateBillInventoryLineItemParamsRequestBody": {
        "properties": {
          "accounting_field_selections": {
            "items": {
              "$ref": "#/components/schemas/ApiCreateAccountingFieldParamsRequestBody"
            },
            "type": "array"
          },
          "memo": {
            "default": null,
            "nullable": true,
            "type": "string"
          },
          "unit_price": {
            "minimum": 0,
            "oneOf": [
              {
                "format": "decimal",
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          },
          "unit_quantity": {
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": ["unit_price", "unit_quantity"],
        "type": "object"
      },
      "ApiCreateBillLineItemParamsRequestBody": {
        "properties": {
          "accounting_field_selections": {
            "items": {
              "$ref": "#/components/schemas/ApiCreateAccountingFieldParamsRequestBody"
            },
            "type": "array"
          },
          "amount": {
            "minimum": 0,
            "oneOf": [
              {
                "format": "decimal",
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          },
          "memo": {
            "default": null,
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["amount"],
        "type": "object"
      },
      "ApiCreateBillParamsRequestBody": {
        "example": {
          "accounting_field_selections": [
            {
              "field_external_id": "b3B0aW9uX2lk",
              "field_option_external_id": "aln2l3B0aW9uX2lk"
            }
          ],
          "due_at": "2024-10-15",
          "entity_id": "1cc4b57c-fe4a-4425-90f1-9019d06376b3",
          "inventory_line_items": [
            {
              "accounting_field_selections": [
                {
                  "field_external_id": "aa73laMazi2",
                  "field_option_external_id": "abk3Rkfnls25"
                }
              ],
              "memo": "Pens",
              "unit_price": 55,
              "unit_quantity": 2
            }
          ],
          "invoice_currency": "USD",
          "invoice_number": "123",
          "issued_at": "2024-08-15",
          "line_items": [
            {
              "accounting_field_selections": [],
              "amount": 100,
              "memo": "Printing services"
            }
          ],
          "memo": "Office supplies",
          "payment_details": {
            "manual_payment_method": "CASH",
            "payment_date": "2024-08-15"
          },
          "payment_method": "ONE_TIME_CARD_DELIVERY",
          "posting_date": null,
          "remote_id": "bo2f1lAnkf3llL",
          "vendor_contact_id": "12f55361-8c7f-42dc-8667-64926d330b80",
          "vendor_id": "c0c89fa8-976e-428d-938d-a5ec89838474"
        },
        "properties": {
          "accounting_field_selections": {
            "description": "List of accounting field options selected to code the bill.",
            "items": {
              "$ref": "#/components/schemas/ApiCreateAccountingFieldParamsRequestBody"
            },
            "type": "array"
          },
          "due_at": {
            "description": "Due date of the bill.",
            "format": "date",
            "type": "string"
          },
          "entity_id": {
            "description": "Associated business entity.",
            "format": "uuid",
            "type": "string"
          },
          "inventory_line_items": {
            "description": "List of inventory line items related to the bill.",
            "items": {
              "$ref": "#/components/schemas/ApiCreateBillInventoryLineItemParamsRequestBody"
            },
            "nullable": true,
            "type": "array"
          },
          "invoice_currency": {
            "description": "Currency of the invoice.",
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLE",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VED",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAD",
              "XAF",
              "XAG",
              "XAU",
              "XBA",
              "XBB",
              "XBC",
              "XBD",
              "XCD",
              "XCG",
              "XDR",
              "XOF",
              "XPD",
              "XPF",
              "XPT",
              "XSU",
              "XTS",
              "XUA",
              "XXX",
              "YER",
              "ZAR",
              "ZMW",
              "ZWG",
              "ZWL"
            ],
            "type": "string"
          },
          "invoice_number": {
            "description": "The invoice number on the bill.",
            "maxLength": 20,
            "type": "string"
          },
          "issued_at": {
            "description": "Issued date of the bill.",
            "format": "date",
            "type": "string"
          },
          "line_items": {
            "description": "List of line items related to the bill.",
            "items": {
              "$ref": "#/components/schemas/ApiCreateBillLineItemParamsRequestBody"
            },
            "nullable": true,
            "type": "array"
          },
          "memo": {
            "default": null,
            "description": "Memo of the bill.",
            "maxLength": 1000,
            "nullable": true,
            "type": "string"
          },
          "payment_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiCreateBillPaymentRequestBody"
              }
            ],
            "default": null,
            "description": "Payment details of the bill. Expected schema depends on payment method.",
            "nullable": true
          },
          "payment_method": {
            "description": "Payment method of the bill.",
            "enum": [
              "ACH",
              "CARD",
              "CHECK",
              "DOMESTIC_WIRE",
              "INTERNATIONAL",
              "ONE_TIME_CARD",
              "ONE_TIME_CARD_DELIVERY",
              "PAID_MANUALLY",
              "SWIFT",
              "UNSPECIFIED",
              "VENDOR_CREDIT"
            ],
            "type": "string"
          },
          "posting_date": {
            "default": null,
            "description": "The date the bill is posted to the accounting system.",
            "format": "date",
            "nullable": true,
            "type": "string"
          },
          "remote_id": {
            "default": null,
            "description": "An ID that identifies the bill on client's side.",
            "nullable": true,
            "type": "string"
          },
          "vendor_contact_id": {
            "description": "Unique identifier of vendor contact, must be associated with passed vendor.",
            "format": "uuid",
            "type": "string"
          },
          "vendor_id": {
            "description": "Unique identifier of bill vendor.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "due_at",
          "entity_id",
          "invoice_currency",
          "invoice_number",
          "issued_at",
          "payment_method",
          "vendor_contact_id",
          "vendor_id"
        ],
        "type": "object"
      },
      "ApiCreateBillPaymentRequestBody": {
        "discriminator": {
          "mapping": {
            "ACH": "#/components/schemas/ApiCreateBankAccountPaymentParamsRequestBody",
            "CARD": "#/components/schemas/ApiCreateCardBillPaymentParamsRequestBody",
            "CHECK": "#/components/schemas/ApiCreateBillVendorPaymentParamsRequestBody",
            "DOMESTIC_WIRE": "#/components/schemas/ApiCreateBankAccountPaymentParamsRequestBody",
            "INTERNATIONAL": "#/components/schemas/ApiCreateBankAccountPaymentParamsRequestBody",
            "PAID_MANUALLY": "#/components/schemas/ApiCreateManualBillPaymentParamsRequestBody",
            "SWIFT": "#/components/schemas/ApiCreateBankAccountPaymentParamsRequestBody"
          },
          "propertyName": "payment_method"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ApiCreateBankAccountPaymentParamsRequestBody"
          },
          {
            "$ref": "#/components/schemas/ApiCreateBillVendorPaymentParamsRequestBody"
          },
          {
            "$ref": "#/components/schemas/ApiCreateCardBillPaymentParamsRequestBody"
          },
          {
            "$ref": "#/components/schemas/ApiCreateManualBillPaymentParamsRequestBody"
          }
        ]
      },
      "ApiCreateBillVendorPaymentParamsRequestBody": {
        "properties": {
          "payment_arrival_date": {
            "description": "\nThe expected date the payment will arrive in the vendor's bank account.\n\nThe required time and fee to process the payment depends on the payment method. See the [Ramp Help Center](https://support.ramp.com/hc/en-us/articles/4417836454419-Bill-payment-methods-and-timelines) for more information on payment speeds. An error will be thrown if selected date is invalid.\n",
            "format": "date",
            "type": "string"
          },
          "source_bank_account_id": {
            "description": "Unique identifier of the bank account to pay the bill from. Must be associated with the passed business entity and have usage_type=BILL_PAY_BANK_ACCOUNT.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": ["payment_arrival_date", "source_bank_account_id"],
        "type": "object"
      },
      "ApiCreateCardBillPaymentParamsRequestBody": {
        "properties": {
          "spend_limit_id": {
            "description": "Unique identifier of the spend limit associated with the matched transaction.",
            "format": "uuid",
            "type": "string"
          },
          "transaction_id": {
            "default": null,
            "description": "If already paid, the unique identifier of the bill payment transaction. The bill will be marked as paid with this transaction once approved.",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["spend_limit_id"],
        "type": "object"
      },
      "ApiCreateManualBillPaymentParamsRequestBody": {
        "properties": {
          "manual_payment_method": {
            "description": "Manual payment method of the bill. If passed, payment_date must also be passed and the bill will be marked as paid.",
            "enum": [
              "CASH",
              "CHECK",
              "CROSS_BORDER_PAYMENT",
              "DIRECT_DEBIT",
              "DOMESTIC_WIRE_TRANSFER",
              "NON_RAMP_CREDIT_CARD",
              "OTHER",
              "PAID_IN_ERP"
            ],
            "type": "string"
          },
          "payment_date": {
            "description": "The date the bill is paid. This field is not relevant for one-time card delivery, as limits are created immediately and sent out to the vendor on the due date.",
            "format": "date",
            "type": "string"
          }
        },
        "required": ["manual_payment_method", "payment_date"],
        "type": "object"
      },
      "ApiCustomFormCollectionResponse": {
        "properties": {
          "custom_form_collection_log_entry": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiCustomFormCollectionResponseLogEntry"
              }
            ],
            "description": "Log entry for response to a custom form collection.",
            "nullable": true
          }
        },
        "required": ["custom_form_collection_log_entry"],
        "type": "object"
      },
      "ApiCustomFormCollectionResponseLogEntry": {
        "properties": {
          "forms": {
            "description": "The custom forms and responses associated with the response log entry.",
            "items": {
              "$ref": "#/components/schemas/ApiCustomFormResponse"
            },
            "type": "array"
          },
          "label": {
            "description": "The label for the response log entry.",
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["forms", "label"],
        "type": "object"
      },
      "ApiCustomFormResponse": {
        "properties": {
          "fields": {
            "description": "The fields for the custom form responses.",
            "items": {
              "$ref": "#/components/schemas/CustomFormFieldResponseWrapperDumpSchemaV2"
            },
            "type": "array"
          },
          "label": {
            "description": "The label for the custom form.",
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["fields", "label"],
        "type": "object"
      },
      "ApiDefaultBusinessVendorResourceRequestBody": {
        "properties": {
          "email": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          }
        },
        "required": ["email"],
        "type": "object"
      },
      "ApiDepartmentCreateRequestBody": {
        "additionalProperties": false,
        "example": {
          "name": "Engineering"
        },
        "properties": {
          "name": {
            "description": "Name of the department.",
            "type": "string"
          }
        },
        "required": ["name"],
        "type": "object"
      },
      "ApiDepartmentUpdateRequestBody": {
        "example": {
          "name": "HR"
        },
        "properties": {
          "name": {
            "description": "Name of the department.",
            "type": "string"
          }
        },
        "required": ["name"],
        "type": "object"
      },
      "ApiDraftBillInventoryLineItem": {
        "properties": {
          "accounting_field_selections": {
            "description": "List of accounting field options selected to code the inventory line item.",
            "items": {
              "$ref": "#/components/schemas/ApiAccountingFieldSelection"
            },
            "type": "array"
          },
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Amount of the line item, equal to the product of unit quantity and unit price",
            "nullable": true,
            "readOnly": true
          },
          "memo": {
            "description": "Memo of the inventory line item",
            "nullable": true,
            "type": "string"
          },
          "unit_price": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Unit price of the line item",
            "nullable": true,
            "readOnly": true
          },
          "unit_quantity": {
            "description": "Unit quantity of the inventory line item",
            "nullable": true,
            "type": "integer"
          }
        },
        "required": ["accounting_field_selections", "amount", "memo", "unit_price", "unit_quantity"],
        "type": "object"
      },
      "ApiDraftBillLineItem": {
        "properties": {
          "accounting_field_selections": {
            "description": "List of accounting field options selected to code the line item.",
            "items": {
              "$ref": "#/components/schemas/ApiAccountingFieldSelection"
            },
            "type": "array"
          },
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Amount of the line item",
            "nullable": true,
            "readOnly": true
          },
          "memo": {
            "description": "Memo of the line item",
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["accounting_field_selections", "amount", "memo"],
        "type": "object"
      },
      "ApiEmptyResponse": {
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiEntityResource": {
        "example": {
          "accounts": [
            {
              "classification": "ASSET",
              "created_at": "2020-01-12T01:30:00+00:00",
              "external_id": "123456",
              "external_name": "Checking Account",
              "internal_id": "",
              "usage_type": "CASH_ACCOUNT"
            }
          ],
          "currency": "CAD",
          "entity_name": "Jill's Art Shop Canada",
          "id": "d290f1ee-6c54-4b01-90e6-d701748f0851",
          "is_primary": true,
          "location_ids": ["cabfda32-91a9-41d7-9d24-5c9c6dd19419"]
        },
        "properties": {
          "accounts": {
            "description": "Information about the entity's active accounts",
            "items": {
              "$ref": "#/components/schemas/EntityProviderAccount"
            },
            "readOnly": true,
            "type": "array"
          },
          "currency": {
            "description": "Currency used by this business entity.",
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLE",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VED",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAD",
              "XAF",
              "XAG",
              "XAU",
              "XBA",
              "XBB",
              "XBC",
              "XBD",
              "XCD",
              "XCG",
              "XDR",
              "XOF",
              "XPD",
              "XPF",
              "XPT",
              "XSU",
              "XTS",
              "XUA",
              "XXX",
              "YER",
              "ZAR",
              "ZMW",
              "ZWG",
              "ZWL"
            ],
            "type": "string"
          },
          "entity_name": {
            "description": "Name of the business entity.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the business entity.",
            "format": "uuid",
            "type": "string"
          },
          "is_primary": {
            "description": "Whether this is the primary entity for the business.",
            "type": "boolean"
          },
          "location_ids": {
            "description": "List of identifiers for locations associated with this entity.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "required": ["accounts", "id", "location_ids"],
        "type": "object",
        "x-resource-name": "entities"
      },
      "ApiItemReceiptCreateParamsRequestBody": {
        "example": {
          "item_receipt_line_items": [
            {
              "purchase_order_line_item_id": "39786dab-ce04-4033-84f1-913016a90b9d"
            },
            {
              "purchase_order_line_item_id": "7736417a-6a9f-4989-96ad-720b320d0afa",
              "unit_quantity": 2
            }
          ],
          "item_receipt_number": "IR-1234",
          "memo": "my item receipt",
          "purchase_order_id": "0a6c6475-94c6-4556-b45e-10f5360f3c60",
          "receieved_at": "2025-03-20"
        },
        "properties": {
          "item_receipt_line_items": {
            "description": "Item receipt line items.",
            "items": {
              "$ref": "#/components/schemas/ApiItemReceiptLineItemCreateParamsRequestBody"
            },
            "type": "array"
          },
          "item_receipt_number": {
            "description": "Item receipt number.",
            "type": "string"
          },
          "memo": {
            "default": null,
            "description": "Memo for the item receipt.",
            "nullable": true,
            "type": "string"
          },
          "purchase_order_id": {
            "description": "Unique identifier of the purchase order this item receipt is attached to.",
            "format": "uuid",
            "type": "string"
          },
          "received_at": {
            "description": "The date the vendor will deliver the goods or services.",
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "item_receipt_line_items",
          "item_receipt_number",
          "purchase_order_id",
          "received_at"
        ],
        "type": "object"
      },
      "ApiItemReceiptLineItem": {
        "properties": {
          "accounting_field_selections": {
            "description": "Accounting field selections for the item receipt line item.",
            "items": {
              "$ref": "#/components/schemas/ApiAccountingFieldSelection"
            },
            "type": "array"
          },
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "The cost of the item receipt line item.",
            "nullable": true,
            "readOnly": true
          },
          "memo": {
            "description": "Memo of the item receipt line item.",
            "nullable": true,
            "type": "string"
          },
          "purchase_order_line_item_id": {
            "description": "Unique identifier of the purchase order line item that was received.",
            "format": "uuid",
            "type": "string"
          },
          "remote_id": {
            "description": "The accounting remote identifier of the item receipt line item.",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "unit_price": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "The cost of the item receipt line item per unit.",
            "nullable": true,
            "readOnly": true
          },
          "unit_quantity": {
            "description": "Receieved quantity of the line item.",
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "accounting_field_selections",
          "amount",
          "memo",
          "purchase_order_line_item_id",
          "remote_id",
          "unit_price",
          "unit_quantity"
        ],
        "type": "object"
      },
      "ApiItemReceiptLineItemCreateParamsRequestBody": {
        "properties": {
          "purchase_order_line_item_id": {
            "description": "Unique identifier of the purchase order line item being received.",
            "format": "uuid",
            "type": "string"
          },
          "unit_quantity": {
            "default": null,
            "description": "The number of units of an item recieved; required for purchase order line items with inventory item accounting field selections.",
            "nullable": true,
            "type": "integer"
          }
        },
        "required": ["purchase_order_line_item_id"],
        "type": "object"
      },
      "ApiItemReceiptResource": {
        "example": {
          "archived_at": null,
          "created_at": "2022-05-10T00:00:00Z",
          "documents": ["https://someurl.com"],
          "id": "123e4567-e89b-12d3-a456-426614174000",
          "item_receipt_number": "1234567890",
          "line_items": [
            {
              "accounting_field_selections": [],
              "amount": {
                "amount": 100,
                "currency_code": "USD"
              },
              "memo": null,
              "purchase_order_line_item_id": "123e4567-e89b-12d3-a456-426614174000",
              "unit_price": {
                "amount": 500,
                "currency_code": "USD"
              },
              "unit_quantity": 1
            }
          ],
          "memo": null,
          "purchase_order_id": "123e4567-e89b-12d3-a456-426614174000",
          "received_at": "2022-05-09T00:00:00Z",
          "remote_id": "1"
        },
        "properties": {
          "archived_at": {
            "description": "The date and time when the item receipt was archived.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created_at": {
            "description": "The date and time when the item receipt was created.",
            "format": "date-time",
            "type": "string"
          },
          "documents": {
            "description": "The URLs of the documents associated with the item receipt.",
            "items": {
              "format": "url",
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "id": {
            "description": "The unique identifier of the item receipt.",
            "format": "uuid",
            "type": "string"
          },
          "item_receipt_number": {
            "description": "The user-defined identifier of the item receipt.",
            "type": "string"
          },
          "line_items": {
            "description": "List of line items on the item receipt.",
            "items": {
              "$ref": "#/components/schemas/ApiItemReceiptLineItem"
            },
            "type": "array"
          },
          "memo": {
            "description": "Memo of the item receipt.",
            "nullable": true,
            "type": "string"
          },
          "purchase_order_id": {
            "description": "The unique identifier of the purchase order that the item receipt belongs to.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "purchase_orders",
              "type": "many-to-one"
            }
          },
          "received_at": {
            "description": "The date and time when the item receipt was received.",
            "format": "date-time",
            "type": "string"
          },
          "remote_id": {
            "description": "The accounting remote identifier of the item receipt.",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "archived_at",
          "created_at",
          "documents",
          "id",
          "item_receipt_number",
          "line_items",
          "memo",
          "purchase_order_id",
          "received_at",
          "remote_id"
        ],
        "type": "object"
      },
      "ApiLocationCreateRequestBody": {
        "example": {
          "entity_id": "140af3ce-b00a-4c0e-adaa-ac83b65e2e18",
          "name": "Miami, FL"
        },
        "properties": {
          "entity_id": {
            "description": "Identifier of the business entity this location belongs to.",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Name of the location.",
            "type": "string"
          }
        },
        "required": ["name"],
        "type": "object"
      },
      "ApiLocationUpdateRequestBody": {
        "example": {
          "entity_id": "bb25a7e8-cc2f-4ba7-9bf4-7730ffe152bb",
          "name": "New York City, NY"
        },
        "properties": {
          "entity_id": {
            "description": "Updated identifier of the business entity this location belongs to.",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Updated name of the location.",
            "type": "string"
          }
        },
        "required": ["name"],
        "type": "object"
      },
      "ApiManualPaymentDetailsResource": {
        "properties": {
          "manual_payment_method": {
            "description": "Manual payment method used for this bill payment.",
            "enum": [
              "CASH",
              "CHECK",
              "CROSS_BORDER_PAYMENT",
              "DIRECT_DEBIT",
              "DOMESTIC_WIRE_TRANSFER",
              "NON_RAMP_CREDIT_CARD",
              "OTHER",
              "PAID_IN_ERP"
            ],
            "type": "string"
          }
        },
        "required": ["manual_payment_method"],
        "type": "object"
      },
      "ApiMemoCreateRequestBody": {
        "properties": {
          "is_memo_recurring": {
            "default": false,
            "description": "Whether this memo should automatically apply to similar future transactions.",
            "type": "boolean"
          },
          "memo": {
            "description": "Text content of the memo to create.",
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": ["memo"],
        "type": "object"
      },
      "ApiMerchantLocation": {
        "properties": {
          "city": {
            "nullable": true,
            "type": "string"
          },
          "country": {
            "nullable": true,
            "type": "string"
          },
          "postal_code": {
            "nullable": true,
            "type": "string"
          },
          "state": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["city", "country", "postal_code", "state"],
        "type": "object"
      },
      "ApiMileageReimbursementCreateRequestBody": {
        "example": {
          "distance": 125.5,
          "distance_units": "MILES",
          "end_location": "456 Business Ave, Philadelphia, PA 19103",
          "memo": "Client meeting in downtown office",
          "reimbursee_id": "7979392e-8d41-4f97-815b-ccd7584802bf",
          "start_location": "123 Main St, Scranton, PA 18503",
          "trip_date": "2023-08-19",
          "waypoints": [
            "321 Rest Area Dr, King of Prussia, PA 19406",
            "789 Highway Stop, Allentown, PA 18101"
          ]
        },
        "properties": {
          "distance": {
            "oneOf": [
              {
                "format": "decimal",
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          },
          "distance_units": {
            "enum": ["KILOMETERS", "MILES"],
            "type": "string"
          },
          "end_location": {
            "type": "string"
          },
          "memo": {
            "type": "string"
          },
          "reimbursee_id": {
            "format": "uuid",
            "type": "string"
          },
          "start_location": {
            "type": "string"
          },
          "trip_date": {
            "format": "date",
            "type": "string"
          },
          "waypoints": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": ["distance", "reimbursee_id", "trip_date"],
        "type": "object"
      },
      "ApiPaymentDetailsResource": {
        "discriminator": {
          "mapping": {
            "CardPaymentDetailsSchema": "#/components/schemas/ApiCardPaymentDetailsResource",
            "ManualPaymentDetailsSchema": "#/components/schemas/ApiManualPaymentDetailsResource",
            "VendorPaymentDetailsSchema": "#/components/schemas/ApiVendorPaymentDetailsResource"
          },
          "propertyName": "schema_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ApiCardPaymentDetailsResource"
          },
          {
            "$ref": "#/components/schemas/ApiManualPaymentDetailsResource"
          },
          {
            "$ref": "#/components/schemas/ApiVendorPaymentDetailsResource"
          }
        ]
      },
      "ApiPermittedSpendTypesDump": {
        "properties": {
          "primary_card_enabled": {
            "description": "Indicates whether the user's physical card can be linked to this limit.",
            "type": "boolean"
          },
          "reimbursements_enabled": {
            "description": "Indicates whether reimbursements can be submitted against this limit.",
            "type": "boolean"
          }
        },
        "required": ["primary_card_enabled", "reimbursements_enabled"],
        "type": "object"
      },
      "ApiPermittedSpendTypesRequestBody": {
        "properties": {
          "primary_card_enabled": {
            "description": "Dictates whether the user's physical card can be linked to this limit.",
            "type": "boolean"
          },
          "reimbursements_enabled": {
            "description": "Dictates whether reimbursements can be submitted against this limit.",
            "type": "boolean"
          }
        },
        "required": ["primary_card_enabled", "reimbursements_enabled"],
        "type": "object"
      },
      "ApiPhysicalRequestBody": {
        "example": {
          "display_name": "T&E",
          "fulfillment": {
            "shipping": {
              "recipient_address": {
                "address1": "123 Main St",
                "city": "New York City",
                "country": "US",
                "first_name": "Cardholder's first name",
                "last_name": "Cardholder's last name",
                "postal_code": "10003",
                "state": "NY"
              }
            }
          },
          "idempotency_key": "3a5b1f62-988f-4190-bf31-b7ae87c5df42",
          "spending_restrictions": {
            "amount": 5000,
            "categories": [],
            "currency": "USD",
            "interval": "MONTHLY",
            "transaction_amount_limit": 100
          },
          "user_id": "d8135cfe-0396-4b2d-b2cf-ad809fb04731"
        },
        "properties": {
          "card_program_id": {
            "description": "Alternative method to create a card using a card program. One of spending_restrictions or card_program_id must be provided. If this value is given, no other attributes (other than idempotency_key) may be given.",
            "format": "uuid",
            "type": "string"
          },
          "display_name": {
            "description": "Cosmetic display name of the card.",
            "type": "string"
          },
          "entity_id": {
            "description": "Create card associated with business entity. If not provided, defaults to entity associated with user's location.",
            "format": "uuid",
            "type": "string"
          },
          "fulfillment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardFulfillmentRequestBody"
              }
            ],
            "description": "Fulfillment details of a Ramp card. For physical cards only."
          },
          "idempotency_key": {
            "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.",
            "type": "string"
          },
          "is_temporary": {
            "default": false,
            "description": "Set to true to create a temporary card",
            "type": "boolean"
          },
          "spending_restrictions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiCardSpendingRestrictionsRequestBody"
              }
            ],
            "description": "Specifies the spend restrictions on a Ramp card. One of `spending_restrictions` or `card_program_id` must be provided."
          },
          "user_id": {
            "description": "Unique identifier of the card owner.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": ["idempotency_key", "user_id"],
        "type": "object"
      },
      "ApiPurchaseOrderArchiveRequestBody": {
        "example": {
          "archived_reason": "This purchase order is no longer needed."
        },
        "properties": {
          "archived_reason": {
            "description": "Reason for archiving the purchase order.",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiPurchaseOrderCreateParamsRequestBody": {
        "example": {
          "accounting_field_selections": [],
          "currency": "USD",
          "entity_id": "7b96a1f2-4b86-45f8-943a-f1ca6b5194d4",
          "line_items": [
            {
              "accounting_field_selections": [],
              "description": "my line item",
              "unit_price": 100,
              "unit_quantity": 1
            }
          ],
          "memo": "Purchase order for general software services",
          "net_payment_terms": 30,
          "promise_date": "2024-05-10",
          "purchase_order_number": "PO-1234",
          "three_way_match_enabled": false,
          "vendor_id": "b901afe8-46d7-4f30-b7b5-3c8af127e5a0"
        },
        "properties": {
          "accounting_field_selections": {
            "description": "List of accounting field options selected to code the purchase order. Generally, only a single vendor accounting field is supported.",
            "items": {
              "$ref": "#/components/schemas/ApiCreateAccountingFieldParamsRequestBody"
            },
            "type": "array"
          },
          "currency": {
            "description": "Currency of the purchase order.",
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLE",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VED",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAD",
              "XAF",
              "XAG",
              "XAU",
              "XBA",
              "XBB",
              "XBC",
              "XBD",
              "XCD",
              "XCG",
              "XDR",
              "XOF",
              "XPD",
              "XPF",
              "XPT",
              "XSU",
              "XTS",
              "XUA",
              "XXX",
              "YER",
              "ZAR",
              "ZMW",
              "ZWG",
              "ZWL"
            ],
            "type": "string"
          },
          "entity_id": {
            "description": "Unique identifier of associated business entity.",
            "format": "uuid",
            "type": "string"
          },
          "line_items": {
            "description": "List of purchase order line items.",
            "items": {
              "$ref": "#/components/schemas/ApiPurchaseOrderLineItemCreateParamsRequestBody"
            },
            "type": "array"
          },
          "memo": {
            "default": null,
            "description": "Memo for the purchase order.",
            "nullable": true,
            "type": "string"
          },
          "net_payment_terms": {
            "default": null,
            "description": "The required time an invoice needs to be paid after receipt in days.",
            "nullable": true,
            "type": "integer"
          },
          "promise_date": {
            "default": null,
            "description": "The date the vendor will deliver the goods or services.",
            "format": "date",
            "nullable": true,
            "type": "string"
          },
          "purchase_order_number": {
            "default": null,
            "description": "Unique purchase order number with format <prefix>-<number>. Prefixes must only contain numbers, uppercase letters, and dashes. Invalid characters will be filtered out automatically. If not provided, one will be auto-generated using a prefix specified in procurement settings, if it exists.",
            "nullable": true,
            "type": "string"
          },
          "three_way_match_enabled": {
            "description": "Whether three-way match is enabled for the purchase order. I.e. whether an item receipt will be attached to indicate goods were received.",
            "type": "boolean"
          },
          "vendor_id": {
            "default": null,
            "description": "Unique identifier for the vendor.",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["currency", "entity_id", "line_items", "three_way_match_enabled"],
        "type": "object"
      },
      "ApiPurchaseOrderDetailResource": {
        "example": {
          "accounting_field_selections": [],
          "amount": {
            "amount": 10000,
            "currency": "USD"
          },
          "archived_at": null,
          "bill_ids": ["ac6b4c79-9fcd-47d5-9c7e-55b6746903ef", "ea0a40d9-d7c4-4cf5-a8a8-e9230fb17459"],
          "billing_status": "CLOSED",
          "created_at": "2022-05-10T00:00:00Z",
          "creation_source": "ACCOUNTING_PROVIDER",
          "custom_form_collection_response": {
            "custom_form_collection_log_entry": {
              "forms": [
                {
                  "fields": [
                    {
                      "conditions": null,
                      "description": "",
                      "field": {
                        "field_type": "TEXT",
                        "mapped_fields": [],
                        "value": {
                          "value": "hello"
                        }
                      },
                      "field_id": "fc6e0459-a164-4a44-ace1-c432d860423b",
                      "is_mapped_to_ironclad_field": false,
                      "is_used_in_approval_workflow_condition": false,
                      "is_used_in_custom_form_workflow_condition": false,
                      "label": "Add a message for approvers to review",
                      "required": false,
                      "validation_errors": [],
                      "value_display_string": "hello"
                    }
                  ],
                  "label": "custom_field_1"
                }
              ],
              "label": null
            }
          },
          "entity_id": "7b96a1f2-4b86-45f8-943a-f1ca6b5194d4",
          "id": "54683adc-f49d-4163-b407-f231c62943ea",
          "line_items": [
            {
              "accounting_field_selections": [],
              "amount": {
                "amount": 100,
                "currency_code": "USD"
              },
              "description": "my line item",
              "id": "54683adc-f49d-4163-b407-f231c62943ea",
              "remote_id": null,
              "unit_price": {
                "amount": 100,
                "currency_code": "USD"
              },
              "unit_quantity": 1
            }
          ],
          "memo": "Purchase order for general software services",
          "name": "Purchase order for general software services",
          "net_payment_terms": 30,
          "promise_date": "2024-05-10T00:00:00Z",
          "purchase_order_number": "PO-0001",
          "receipt_status": "FULLY_RECEIVED",
          "spend_end_date": "2024-05-31T00:00:00Z",
          "spend_request_id": "fb718d18-5435-416b-940e-083fc637614",
          "spend_start_date": "2024-05-01T00:00:00Z",
          "spend_total_amount": {
            "amount": 10000,
            "currency_code": "USD"
          },
          "three_way_match_enabled": false,
          "transaction_ids": ["5a65cefc-5d59-40ec-9ae8-82fa657dc1b7"],
          "user_id": "54683adc-f49d-4163-b407-f231c62943ea",
          "vendor_id": "b901afe8-46d7-4f30-b7b5-3c8af127e5a0"
        },
        "properties": {
          "accounting_field_selections": {
            "description": "List of accounting field options selected to code the purchase order.",
            "items": {
              "$ref": "#/components/schemas/ApiAccountingFieldSelection"
            },
            "readOnly": true,
            "type": "array"
          },
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Amount of the purchse order.",
            "readOnly": true
          },
          "archived_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "bill_ids": {
            "description": "List of unique identifiers for attached bills.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "billing_status": {
            "enum": ["CLOSED", "DELETED", "FULLY_BILLED", "OPEN", "PARTIALLY_BILLED"],
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "creation_source": {
            "enum": ["ACCOUNTING_PROVIDER", "DEVELOPER_API", "RAMP"],
            "type": "string"
          },
          "custom_form_collection_response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiCustomFormCollectionResponse"
              }
            ],
            "description": "Custom form collection with an associated response log entry.",
            "nullable": true,
            "readOnly": true
          },
          "entity_id": {
            "description": "Associated business entity.",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "line_items": {
            "description": "List of line items on the purchase order.",
            "items": {
              "$ref": "#/components/schemas/ApiPurchaseOrderLineItem"
            },
            "type": "array"
          },
          "memo": {
            "description": "Memo of the purchase order.",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "The name of the spend request associated with the purchase order.",
            "nullable": true,
            "type": "string"
          },
          "net_payment_terms": {
            "description": "The required time an invoice needs to be paid after receipt.",
            "nullable": true,
            "type": "integer"
          },
          "promise_date": {
            "description": "The date the vendor will deliver the goods or services.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "purchase_order_number": {
            "nullable": true,
            "type": "string"
          },
          "receipt_status": {
            "enum": ["FULLY_RECEIVED", "NOT_RECEIVED", "OVER_RECEIVED", "PARTIALLY_RECEIVED"],
            "type": "string"
          },
          "remote_id": {
            "description": "The accounting remote identifier of the purchase order.",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "spend_end_date": {
            "description": "The date when spending for this purchase order ends.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "spend_request_id": {
            "description": "Unique identifier for the spend request associated with the purchase order. This value will only be null for purchase orders imported from an accounting provider.",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "spend_start_date": {
            "description": "The date when spending for this purchase order begins.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "spend_total_amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Total amount of the purchase order, calculated based on frequency and date range for recurring purchases.",
            "nullable": true,
            "readOnly": true
          },
          "three_way_match_enabled": {
            "description": "Whether three-way match is enabled for the purchase order.",
            "readOnly": true,
            "type": "boolean"
          },
          "transaction_ids": {
            "description": "List of unique identifiers for attached transactions. This does not include transactions on attached bills.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "user_id": {
            "description": "Unique identifier for the user who created the spend request. This value will only be present for Ramp-created purchase orders.",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "vendor_id": {
            "description": "Unique identifier for the vendor.",
            "format": "uuid",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "accounting_field_selections",
          "amount",
          "archived_at",
          "bill_ids",
          "created_at",
          "creation_source",
          "custom_form_collection_response",
          "entity_id",
          "id",
          "line_items",
          "memo",
          "name",
          "net_payment_terms",
          "promise_date",
          "purchase_order_number",
          "receipt_status",
          "remote_id",
          "spend_end_date",
          "spend_request_id",
          "spend_start_date",
          "spend_total_amount",
          "three_way_match_enabled",
          "transaction_ids",
          "user_id",
          "vendor_id"
        ],
        "type": "object"
      },
      "ApiPurchaseOrderLineItem": {
        "properties": {
          "accounting_field_selections": {
            "description": "List of accounting field options selected to code the purchase order line item.",
            "items": {
              "$ref": "#/components/schemas/ApiAccountingFieldSelection"
            },
            "readOnly": true,
            "type": "array"
          },
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Amount of the line item.",
            "readOnly": true
          },
          "description": {
            "description": "Description of the line item.",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the line item.",
            "format": "uuid",
            "type": "string"
          },
          "remote_id": {
            "description": "The accounting remote identifier of the line item.",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "unit_price": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Unit price of the line item.",
            "nullable": true,
            "readOnly": true
          },
          "unit_quantity": {
            "description": "Quantity of the line item.",
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "accounting_field_selections",
          "amount",
          "description",
          "id",
          "remote_id",
          "unit_price",
          "unit_quantity"
        ],
        "type": "object"
      },
      "ApiPurchaseOrderLineItemCreateParamsRequestBody": {
        "properties": {
          "accounting_field_selections": {
            "description": "List of accounting field options selected to code the line item.",
            "items": {
              "$ref": "#/components/schemas/ApiCreateAccountingFieldParamsRequestBody"
            },
            "type": "array"
          },
          "description": {
            "default": null,
            "description": "Description of the line item.",
            "nullable": true,
            "type": "string"
          },
          "unit_price": {
            "description": "Unit price of the line item.",
            "oneOf": [
              {
                "format": "decimal",
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          },
          "unit_quantity": {
            "description": "Quantity of the line item.",
            "type": "integer"
          }
        },
        "required": ["unit_price", "unit_quantity"],
        "type": "object"
      },
      "ApiPurchaseOrderResource": {
        "example": {
          "accounting_field_selections": [],
          "amount": {
            "amount": 10000,
            "currency": "USD"
          },
          "archived_at": null,
          "bill_ids": ["ac6b4c79-9fcd-47d5-9c7e-55b6746903ef", "ea0a40d9-d7c4-4cf5-a8a8-e9230fb17459"],
          "billing_status": "CLOSED",
          "created_at": "2022-05-10T00:00:00Z",
          "creation_source": "ACCOUNTING_PROVIDER",
          "entity_id": "7b96a1f2-4b86-45f8-943a-f1ca6b5194d4",
          "id": "54683adc-f49d-4163-b407-f231c62943ea",
          "line_items": [
            {
              "accounting_field_selections": [],
              "amount": {
                "amount": 100,
                "currency_code": "USD"
              },
              "description": "my line item",
              "id": "54683adc-f49d-4163-b407-f231c62943ea",
              "remote_id": null,
              "unit_price": {
                "amount": 100,
                "currency_code": "USD"
              },
              "unit_quantity": 1
            }
          ],
          "memo": "Purchase order for general software services",
          "name": "Purchase order for general software services",
          "net_payment_terms": 30,
          "promise_date": "2024-05-10T00:00:00Z",
          "purchase_order_number": "PO-0001",
          "receipt_status": "FULLY_RECEIVED",
          "spend_end_date": "2024-05-31T00:00:00Z",
          "spend_request_id": "fb718d18-5435-416b-940e-083fc637614",
          "spend_start_date": "2024-05-01T00:00:00Z",
          "spend_total_amount": {
            "amount": 10000,
            "currency_code": "USD"
          },
          "three_way_match_enabled": false,
          "transaction_ids": ["5a65cefc-5d59-40ec-9ae8-82fa657dc1b7"],
          "user_id": "54683adc-f49d-4163-b407-f231c62943ea",
          "vendor_id": "b901afe8-46d7-4f30-b7b5-3c8af127e5a0"
        },
        "properties": {
          "accounting_field_selections": {
            "description": "List of accounting field options selected to code the purchase order.",
            "items": {
              "$ref": "#/components/schemas/ApiAccountingFieldSelection"
            },
            "readOnly": true,
            "type": "array"
          },
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Amount of the purchse order.",
            "readOnly": true
          },
          "archived_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "bill_ids": {
            "description": "List of unique identifiers for attached bills.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "billing_status": {
            "enum": ["CLOSED", "DELETED", "FULLY_BILLED", "OPEN", "PARTIALLY_BILLED"],
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "creation_source": {
            "enum": ["ACCOUNTING_PROVIDER", "DEVELOPER_API", "RAMP"],
            "type": "string"
          },
          "entity_id": {
            "description": "Associated business entity.",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "line_items": {
            "description": "List of line items on the purchase order.",
            "items": {
              "$ref": "#/components/schemas/ApiPurchaseOrderLineItem"
            },
            "type": "array"
          },
          "memo": {
            "description": "Memo of the purchase order.",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "The name of the spend request associated with the purchase order.",
            "nullable": true,
            "type": "string"
          },
          "net_payment_terms": {
            "description": "The required time an invoice needs to be paid after receipt.",
            "nullable": true,
            "type": "integer"
          },
          "promise_date": {
            "description": "The date the vendor will deliver the goods or services.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "purchase_order_number": {
            "nullable": true,
            "type": "string"
          },
          "receipt_status": {
            "enum": ["FULLY_RECEIVED", "NOT_RECEIVED", "OVER_RECEIVED", "PARTIALLY_RECEIVED"],
            "type": "string"
          },
          "remote_id": {
            "description": "The accounting remote identifier of the purchase order.",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "spend_end_date": {
            "description": "The date when spending for this purchase order ends.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "spend_request_id": {
            "description": "Unique identifier for the spend request associated with the purchase order. This value will only be null for purchase orders imported from an accounting provider.",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "spend_start_date": {
            "description": "The date when spending for this purchase order begins.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "spend_total_amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Total amount of the purchase order, calculated based on frequency and date range for recurring purchases.",
            "nullable": true,
            "readOnly": true
          },
          "three_way_match_enabled": {
            "description": "Whether three-way match is enabled for the purchase order.",
            "readOnly": true,
            "type": "boolean"
          },
          "transaction_ids": {
            "description": "List of unique identifiers for attached transactions. This does not include transactions on attached bills.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "user_id": {
            "description": "Unique identifier for the user who created the spend request. This value will only be present for Ramp-created purchase orders.",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "vendor_id": {
            "description": "Unique identifier for the vendor.",
            "format": "uuid",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "accounting_field_selections",
          "amount",
          "archived_at",
          "bill_ids",
          "created_at",
          "creation_source",
          "entity_id",
          "id",
          "line_items",
          "memo",
          "name",
          "net_payment_terms",
          "promise_date",
          "purchase_order_number",
          "receipt_status",
          "remote_id",
          "spend_end_date",
          "spend_request_id",
          "spend_start_date",
          "spend_total_amount",
          "three_way_match_enabled",
          "transaction_ids",
          "user_id",
          "vendor_id"
        ],
        "type": "object"
      },
      "ApiReceiptIntegrationOptedOutEmailCreateRequestBody": {
        "properties": {
          "business_id": {
            "type": "integer"
          },
          "email": {
            "type": "string"
          }
        },
        "required": ["business_id", "email"],
        "type": "object"
      },
      "ApiReceiptIntegrationOptedOutEmailResource": {
        "properties": {
          "email": {
            "format": "email",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiReceiptIntegrationOptedOutEmailResourceRequestBody": {
        "properties": {
          "email": {
            "format": "email",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiReceiptUploadRequestBody": {
        "example": {
          "idempotency_key": "0a0ed428-0250-4993-96ad-94cd77bc86b6",
          "transaction_id": "01b7dc97-5b67-45a2-8b05-e4e078f3a722",
          "user_id": "30ffb5d0-3021-4438-8253-25819d480237"
        },
        "properties": {
          "idempotency_key": {
            "description": "Unique value to prevent duplicate uploads (use a UUID to avoid collisions).",
            "type": "string"
          },
          "transaction_id": {
            "description": "Transaction to attach to the uploaded receipt.",
            "format": "uuid",
            "type": "string"
          },
          "user_id": {
            "description": "User to associate with the receipt (affects transaction matching priority).",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": ["idempotency_key", "user_id"],
        "type": "object"
      },
      "ApiReimbursementAccountingCategoryInfo": {
        "properties": {
          "external_id": {
            "description": "External ID that uniquely identifies this field in the ERP.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for this accounting field within Ramp.",
            "type": "string"
          },
          "name": {
            "description": "Name of the accounting field.",
            "type": "string"
          },
          "type": {
            "description": "Type of accounting field.",
            "enum": [
              "AMORTIZATION_TEMPLATE",
              "BILLABLE",
              "COST_CENTER",
              "CUSTOMERS_JOBS",
              "DEFERRAL_CODE",
              "EXPENSE_ENTITY",
              "GL_ACCOUNT",
              "INVENTORY_ITEM",
              "JOURNAL",
              "MERCHANT",
              "OTHER",
              "PROJECT",
              "REPORTING_TAG",
              "SUBSIDIARY",
              "TAX_CODE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiReimbursementAccountingFieldSelection": {
        "properties": {
          "category_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiReimbursementAccountingCategoryInfo"
              }
            ],
            "description": "Information about the parent accounting category."
          },
          "external_code": {
            "description": "External code displayed in the ERP for this option.",
            "type": "string"
          },
          "external_id": {
            "description": "External ID that uniquely identifies this option in the ERP.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for this option within Ramp.",
            "type": "string"
          },
          "name": {
            "description": "Name of the accounting field option.",
            "type": "string"
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiAccountingFieldSelectionSource"
              }
            ],
            "description": "Source of this accounting coding selection."
          },
          "type": {
            "description": "Type of accounting field.",
            "enum": [
              "AMORTIZATION_TEMPLATE",
              "BILLABLE",
              "COST_CENTER",
              "CUSTOMERS_JOBS",
              "DEFERRAL_CODE",
              "EXPENSE_ENTITY",
              "GL_ACCOUNT",
              "INVENTORY_ITEM",
              "JOURNAL",
              "MERCHANT",
              "OTHER",
              "PROJECT",
              "REPORTING_TAG",
              "SUBSIDIARY",
              "TAX_CODE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiReimbursementAttendee": {
        "properties": {
          "name": {
            "description": "Full name of the attendee",
            "type": "string"
          },
          "user_id": {
            "description": "User ID of the attendee, if linked to a Ramp user. Missing if the attendee is not a Ramp user",
            "format": "uuid",
            "nullable": true,
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "users",
              "type": "many-to-one"
            }
          }
        },
        "required": ["name"],
        "type": "object"
      },
      "ApiReimbursementLineItem": {
        "properties": {
          "accounting_field_selections": {
            "description": "Accounting field selections used to code this line item.",
            "items": {
              "$ref": "#/components/schemas/ApiReimbursementAccountingFieldSelection"
            },
            "type": "array"
          },
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Amount of the line item.",
            "nullable": true
          },
          "memo": {
            "description": "Memo text for this line item.",
            "type": "string"
          }
        },
        "required": ["amount"],
        "type": "object"
      },
      "ApiReimbursementUploadReceiptRequestBody": {
        "example": {
          "idempotency_key": "0a0ed428-0250-4993-96ad-94cd77bc86b6",
          "reimbursee_id": "30ffb5d0-3021-4438-8253-25819d480237",
          "reimbursement_id": "01b7dc97-5b67-45a2-8b05-e4e078f3a722"
        },
        "properties": {
          "idempotency_key": {
            "description": "Unique value to prevent duplicate uploads (use a UUID to avoid collisions).",
            "type": "string"
          },
          "reimbursee_id": {
            "description": "UUID of the user to create the reimbursement for.",
            "format": "uuid",
            "type": "string"
          },
          "reimbursement_id": {
            "description": "Optional UUID of existing reimbursement to attach receipt to. If not provided, a new draft reimbursement will be created via OCR.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": ["idempotency_key", "reimbursee_id"],
        "type": "object"
      },
      "ApiSalesLeadBusinessDump": {
        "example": {
          "business_description": "We are in the empire business",
          "business_name_dba": "White & Pinkman Inc.",
          "business_name_legal": "White & Pinkman Inc.",
          "business_name_website": "www.whiteandpinkman.com",
          "date_of_incorporation": "2004-01-01",
          "ein_number": "12-3456789",
          "entity_type": "CORPORATION",
          "estimated_monthly_spend": "10,000",
          "industry": "Food Products",
          "industry_group": "Food, Beverage & Tobacco",
          "office_address": {
            "office_city": "Albuquerque",
            "office_country": "US",
            "office_postal_code": "100022",
            "office_state": "New Mexico",
            "office_street_address": "100 Main Street"
          },
          "sector": "Consumer Staples",
          "state_of_incorporation": "New Mexico"
        },
        "properties": {
          "business_description": {
            "description": "A short description of the business.",
            "type": "string"
          },
          "business_name_dba": {
            "description": "Doing business as (DBA)",
            "type": "string"
          },
          "business_name_legal": {
            "description": "Legal name of the business.",
            "type": "string"
          },
          "business_name_website": {
            "description": "Business's website.",
            "type": "string"
          },
          "date_of_incorporation": {
            "description": "Business's incorporation date.",
            "format": "date",
            "type": "string"
          },
          "ein_number": {
            "description": "Employer Identification Number (EIN).",
            "type": "string"
          },
          "entity_type": {
            "description": "Type of incorporation.",
            "enum": [
              "COOPERATIVE",
              "CORPORATION",
              "LLC",
              "NON_PROFIT_CORPORATION",
              "OTHER",
              "PARTNERSHIP",
              "SOLE_PROPRIETORSHIP"
            ],
            "type": "string"
          },
          "estimated_monthly_spend": {
            "description": "Estimated monthly spend.",
            "type": "string"
          },
          "industry": {
            "description": "Business's industry",
            "type": "string"
          },
          "industry_group": {
            "description": "Business's industry group",
            "type": "string"
          },
          "office_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSalesLeadOfficeAddress"
              }
            ],
            "description": "Office's address."
          },
          "office_phone_number": {
            "description": "Office phone number. Must include country code.",
            "type": "string"
          },
          "sector": {
            "description": "Business's sector",
            "type": "string"
          },
          "state_of_incorporation": {
            "description": "The state in which the business is incorporated.",
            "type": "string"
          },
          "sub_industry": {
            "description": "",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiSalesLeadBusinessRequestBody": {
        "example": {
          "business_description": "We are in the empire business",
          "business_name_dba": "White & Pinkman Inc.",
          "business_name_legal": "White & Pinkman Inc.",
          "business_name_website": "www.whiteandpinkman.com",
          "date_of_incorporation": "2004-01-01",
          "ein_number": "12-3456789",
          "entity_type": "CORPORATION",
          "estimated_monthly_spend": "10,000",
          "industry": "Food Products",
          "industry_group": "Food, Beverage & Tobacco",
          "office_address": {
            "office_city": "Albuquerque",
            "office_country": "US",
            "office_postal_code": "100022",
            "office_state": "New Mexico",
            "office_street_address": "100 Main Street"
          },
          "sector": "Consumer Staples",
          "state_of_incorporation": "New Mexico"
        },
        "properties": {
          "business_description": {
            "description": "A short description of the business.",
            "type": "string"
          },
          "business_name_dba": {
            "description": "Doing business as (DBA)",
            "maxLength": 255,
            "type": "string"
          },
          "business_name_legal": {
            "description": "Legal name of the business.",
            "maxLength": 255,
            "type": "string"
          },
          "business_name_website": {
            "description": "Business's website.",
            "type": "string"
          },
          "date_of_incorporation": {
            "description": "Business's incorporation date.",
            "format": "date",
            "type": "string"
          },
          "ein_number": {
            "description": "Employer Identification Number (EIN).",
            "type": "string"
          },
          "entity_type": {
            "description": "Type of incorporation.",
            "enum": [
              "COOPERATIVE",
              "CORPORATION",
              "LLC",
              "NON_PROFIT_CORPORATION",
              "OTHER",
              "PARTNERSHIP",
              "SOLE_PROPRIETORSHIP"
            ],
            "type": "string"
          },
          "estimated_monthly_spend": {
            "description": "Estimated monthly spend.",
            "type": "string"
          },
          "industry": {
            "description": "Business's industry",
            "type": "string"
          },
          "industry_group": {
            "description": "Business's industry group",
            "type": "string"
          },
          "office_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSalesLeadOfficeAddressRequestBody"
              }
            ],
            "description": "Office's address."
          },
          "office_phone_number": {
            "description": "Office phone number. Must include country code.",
            "type": "string"
          },
          "sector": {
            "description": "Business's sector",
            "type": "string"
          },
          "state_of_incorporation": {
            "description": "The state in which the business is incorporated.",
            "type": "string"
          },
          "sub_industry": {
            "description": "Business's subindustry",
            "type": "string"
          }
        },
        "required": ["business_name_dba", "business_name_legal"],
        "type": "object"
      },
      "ApiSalesLeadCreateRequestBody": {
        "example": {
          "business_info": {
            "business_description": "We are in the empire business",
            "business_name_dba": "White & Pinkman Inc.",
            "business_name_legal": "White & Pinkman Inc.",
            "business_name_website": "www.whiteandpinkman.com",
            "date_of_incorporation": "2004-01-01",
            "ein_number": "12-3456789",
            "entity_type": "CORPORATION",
            "estimated_monthly_spend": "10,000",
            "industry": "Food Products",
            "industry_group": "Food, Beverage & Tobacco",
            "office_address": {
              "office_city": "Albuquerque",
              "office_country": "US",
              "office_postal_code": "100022",
              "office_state": "New Mexico",
              "office_street_address": "100 Main Street"
            },
            "sector": "Consumer Staples",
            "state_of_incorporation": "New Mexico"
          },
          "email": "lead@whiteandpinkman.com",
          "external_id": "f26bfdb5-beei-4875-a9b5-a29f8af6f381",
          "first_name": "Walter",
          "last_name": "White",
          "redirect_uri": "https://app.whiteandpinkman.com/ramp/callback",
          "source": "White & Pinkman",
          "state": "f26bfdb5-7ecf-4875-a9b5-a29f8af6f381"
        },
        "properties": {
          "business_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSalesLeadBusinessRequestBody"
              }
            ],
            "description": ""
          },
          "email": {
            "description": "",
            "type": "string"
          },
          "external_id": {
            "description": "",
            "type": "string"
          },
          "first_name": {
            "description": "",
            "maxLength": 40,
            "type": "string"
          },
          "last_name": {
            "description": "",
            "maxLength": 40,
            "type": "string"
          },
          "phone": {
            "description": "",
            "type": "string"
          },
          "redirect_uri": {
            "description": "",
            "type": "string"
          },
          "source": {
            "description": "",
            "enum": ["AngelList", "Quanta"],
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "external_id",
          "first_name",
          "last_name",
          "redirect_uri",
          "source",
          "state"
        ],
        "type": "object"
      },
      "ApiSalesLeadOfficeAddress": {
        "properties": {
          "office_apt_suite": {
            "type": "string"
          },
          "office_city": {
            "type": "string"
          },
          "office_country": {
            "type": "string"
          },
          "office_postal_code": {
            "type": "string"
          },
          "office_state": {
            "type": "string"
          },
          "office_street_address": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiSalesLeadOfficeAddressRequestBody": {
        "properties": {
          "office_apt_suite": {
            "type": "string"
          },
          "office_city": {
            "type": "string"
          },
          "office_country": {
            "type": "string"
          },
          "office_postal_code": {
            "type": "string"
          },
          "office_state": {
            "type": "string"
          },
          "office_street_address": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiSpendAllocationBalance": {
        "properties": {
          "cleared": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Cleared amount on this limit.",
            "readOnly": true
          },
          "pending": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Pending amount towards this limit.",
            "readOnly": true
          },
          "total": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Total amount spent on this limit.",
            "readOnly": true
          }
        },
        "required": ["cleared", "pending", "total"],
        "type": "object"
      },
      "ApiSpendLimitCardResource": {
        "properties": {
          "card_id": {
            "description": "Unique identifier of the card.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "cards",
              "type": "one-to-many"
            }
          },
          "expiration": {
            "description": "Expiration date in the format of MMYY. Will be redacted if the card has not been activated.",
            "readOnly": true,
            "type": "string"
          },
          "is_ap_card": {
            "description": "Card created manually by Ramp for high velocity spend",
            "type": "boolean"
          },
          "last_four": {
            "description": "Last four digits of the card number. Will be redacted if the card has not been activated.",
            "readOnly": true,
            "type": "string"
          },
          "via_new_product_or_service": {
            "description": "Card created by 'New Product or Service' option",
            "readOnly": true,
            "type": "boolean"
          }
        },
        "required": ["expiration", "is_ap_card", "last_four", "via_new_product_or_service"],
        "type": "object"
      },
      "ApiSpendLimitCreateRequestBody": {
        "example": {
          "display_name": "T&E",
          "fulfillment": {
            "shipping": {
              "recipient_address": {
                "address1": "123 Main St",
                "city": "New York City",
                "country": "US",
                "first_name": "Julie",
                "last_name": "Phillip",
                "postal_code": "10003",
                "state": "NY"
              }
            },
            "shipping_date": null,
            "shipping_eta": null,
            "shipping_tracking_url": null
          },
          "idempotency_key": "3a5b1f62-988f-4190-bf31-b7ae87c5df42",
          "is_shareable": false,
          "permitted_spend_types": {
            "primary_card_enabled": false,
            "reimbursements_enabled": false
          },
          "spending_restrictions": {
            "allowed_categories": [18, 20],
            "auto_lock_date": null,
            "interval": "MONTHLY",
            "limit": {
              "amount": 500000,
              "currency_code": "USD"
            },
            "transaction_amount_limit": {
              "amount": 10000,
              "currency_code": "USD"
            }
          },
          "user_id": "d8135cfe-0396-4b2d-b2cf-ad809fb04731"
        },
        "properties": {
          "display_name": {
            "description": "Cosmetic display name of the limit.",
            "type": "string"
          },
          "fulfillment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardFulfillmentRequestBody"
              }
            ],
            "description": "Fulfillment details of the limit's card."
          },
          "idempotency_key": {
            "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.",
            "type": "string"
          },
          "is_shareable": {
            "description": "Dictates whether the spend limit is shareable among multiple users.",
            "type": "boolean"
          },
          "permitted_spend_types": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiPermittedSpendTypesRequestBody"
              }
            ],
            "description": "Specifies the permitted spend types."
          },
          "spend_program_id": {
            "description": "The id of the associated spend program.",
            "format": "uuid",
            "type": "string"
          },
          "spending_restrictions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSpendingRestrictionsRequestBody"
              }
            ],
            "description": "Specifies the spending restrictions. If spend_program_id is passed, this field is ignored and the limit will inherit the spending restrictions of the spend program."
          },
          "user_id": {
            "description": "Unique identifier of the limit owner.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": ["idempotency_key", "user_id"],
        "type": "object"
      },
      "ApiSpendLimitDeferredTaskContext": {
        "properties": {
          "acting_user_id": {
            "description": "Unique identifier of the acting user that initiated the deferred task.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "users",
              "type": "many-to-one"
            }
          },
          "spend_limit_id": {
            "description": "Unique identifier of the subject limit in the deferred task.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "limits",
              "type": "one-to-one"
            }
          }
        },
        "type": "object"
      },
      "ApiSpendLimitDeferredTaskData": {
        "properties": {
          "error": {
            "description": "An error message if the deferred task fails.",
            "type": "string"
          },
          "spend_limit_id": {
            "description": "Unique identifier of the subject limit in the deferred task.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "limits",
              "type": "many-to-one"
            }
          }
        },
        "type": "object"
      },
      "ApiSpendLimitDeferredUpdateRequestBody": {
        "properties": {
          "idempotency_key": {
            "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.",
            "type": "string"
          }
        },
        "required": ["idempotency_key"],
        "type": "object"
      },
      "ApiSpendLimitDetailResource": {
        "example": {
          "balance": {
            "cleared": {
              "amount": 6500,
              "currency_code": "USD"
            },
            "pending": {
              "amount": 3500,
              "currency_code": "USD"
            },
            "total": {
              "amount": 10000,
              "currency_code": "USD"
            }
          },
          "cards": [
            {
              "card_id": "a40a6ce8-70d4-4d06-91e1-0728ad9bbe39",
              "expiration": "0227",
              "is_ap_card": false,
              "last_four": "2543",
              "via_new_product_or_service": false
            }
          ],
          "created_at": "2024-05-12T01:37:27+00:00",
          "custom_form_collection_response": {
            "custom_form_collection_log_entry": {
              "forms": [
                {
                  "fields": [
                    {
                      "conditions": null,
                      "description": "",
                      "field": {
                        "field_type": "TEXT",
                        "mapped_fields": [],
                        "value": {
                          "value": "hello"
                        }
                      },
                      "field_id": "fc6e0459-a164-4a44-ace1-c432d860423b",
                      "is_mapped_to_ironclad_field": false,
                      "is_used_in_approval_workflow_condition": false,
                      "is_used_in_custom_form_workflow_condition": false,
                      "label": "Add a message for approvers to review",
                      "required": false,
                      "validation_errors": [],
                      "value_display_string": "hello"
                    }
                  ],
                  "label": "custom_field_1"
                }
              ],
              "label": null
            }
          },
          "display_name": "T&E",
          "entity_id": "c18d9d2e-964f-476d-8bb3-9ac078f00e11",
          "has_program_overridden": false,
          "id": "d8135cfe-0396-4b2d-b2cf-ad809fb04731",
          "is_shareable": true,
          "permitted_spend_types": {
            "primary_card_enabled": true,
            "reimbursements_enabled": false
          },
          "restrictions": {
            "auto_lock_date": null,
            "categories_whitelist": [35],
            "interval": "MONTHLY",
            "limit": 500,
            "next_interval_reset": "2022-12-01T00:00:00+00:00",
            "start_of_interval_date": "2022-11-01T00:00:00+00:00",
            "temporary_limit": null,
            "transaction_amount_limit": 200,
            "vendor_blacklist": [61]
          },
          "spend_program_id": "3a5b1f62-988f-4190-bf31-b7ae87c5dfee",
          "state": "ACTIVE",
          "suspension": {
            "acting_user_id": "e9186c3a-4650-48ef-aee4-56b77f5019bd",
            "inserted_at": "2022-11-03T00:00:00+00:00",
            "suspended_by_ramp": false
          },
          "users": [
            {
              "user_id": "2ba219ba-5867-453f-bec2-b8d0414b7f75"
            }
          ]
        },
        "properties": {
          "balance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSpendAllocationBalance"
              }
            ],
            "description": "Details about the current balance of the limit."
          },
          "cards": {
            "description": "List of cards linked to this limit.",
            "items": {
              "$ref": "#/components/schemas/ApiSpendLimitCardResource"
            },
            "type": "array"
          },
          "created_at": {
            "description": "Time at which the spend limit is created, presented in ISO8601 format.",
            "format": "date-time",
            "type": "string"
          },
          "custom_form_collection_response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiCustomFormCollectionResponse"
              }
            ],
            "description": "Custom form collection with an associated response log entry.",
            "nullable": true,
            "readOnly": true
          },
          "display_name": {
            "description": "Display name of the limit and all linked cards.",
            "type": "string"
          },
          "entity_id": {
            "description": "Associated business entity of the limit.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "entities",
              "type": "many-to-one"
            }
          },
          "has_program_overridden": {
            "description": "Indicates if the limit's settings override those of its Spend Program.",
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier of the limit.",
            "format": "uuid",
            "type": "string"
          },
          "is_shareable": {
            "description": "Whether this spend limit is shareable.",
            "type": "boolean"
          },
          "permitted_spend_types": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiPermittedSpendTypesDump"
              }
            ],
            "description": "Specifies the permitted spend types of the limit."
          },
          "restrictions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSpendingRestrictionsDump"
              }
            ],
            "description": "Restrictions imposed on this limit."
          },
          "spend_program_id": {
            "description": "Unique identifier of the associated Spend Program.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "spend_programs",
              "type": "many-to-one"
            }
          },
          "state": {
            "description": "Current state of the limit.",
            "enum": ["ACTIVE", "SUSPENDED", "TERMINATED"],
            "type": "string"
          },
          "suspension": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSuspensionDump"
              }
            ],
            "description": "Suspension (lock) on the limit.",
            "nullable": true
          },
          "users": {
            "description": "Members who can spend from the limit.",
            "items": {
              "$ref": "#/components/schemas/ApiSpendLimitMember"
            },
            "type": "array"
          }
        },
        "required": ["custom_form_collection_response"],
        "type": "object",
        "x-resource-name": "limits"
      },
      "ApiSpendLimitMember": {
        "properties": {
          "user_id": {
            "description": "The unique identifier of the limit owner.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "users",
              "type": "many-to-one"
            }
          }
        },
        "type": "object"
      },
      "ApiSpendLimitModifyUserAccessRequestBody": {
        "properties": {
          "user_ids": {
            "items": {
              "description": "Unique identifier of user(s) in shared limit.",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiSpendLimitUpdateRequestBody": {
        "example": {
          "display_name": "New Display Name",
          "is_shareable": true,
          "new_user_id": "b9627abf-6b7e-47bc-a475-7493a8fa9cb4",
          "permitted_spend_types": {
            "primary_card_enabled": false,
            "reimbursements_enabled": true
          },
          "spending_restrictions": {
            "amount": 500,
            "interval": "DAILY"
          }
        },
        "properties": {
          "display_name": {
            "description": "Change the display name of the limit",
            "type": "string"
          },
          "is_shareable": {
            "description": "Dictates whether the spend limit is shareable among multiple users.",
            "type": "boolean"
          },
          "new_user_id": {
            "description": "Change the user of the limit",
            "format": "uuid",
            "type": "string"
          },
          "permitted_spend_types": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiPermittedSpendTypesRequestBody"
              }
            ],
            "description": "Modify permitted spend types. All fields of permitted_spend_types must be given."
          },
          "spend_program_id": {
            "description": "Specify a spend program to link with.\n            This will override the limit's spending restrictions and permitted spend types with those of the spend program.\n            Pass spend_program_id = None to detach the limit's current spend program.\n            If the spend_program_id field is specified, no other fields may be passed.\n            ",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "spending_restrictions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSpendingRestrictionsUpdateRequestBody"
              }
            ],
            "description": "Modify spending restrictions. If this field is passed, the entire set of new spending restrictions must be passed (i.e. the given spending restrictions will override all existing spending restrictions)."
          }
        },
        "type": "object",
        "x-resource-name": "spend_limits"
      },
      "ApiSpendProgramCreateIssuanceRulesRequestBody": {
        "properties": {
          "automatic": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSpendProgramIssuanceRulesRequestBody"
              }
            ],
            "description": "Set of rules for having spend programs issued by default to users",
            "nullable": true
          },
          "requestable": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSpendProgramIssuanceRulesRequestBody"
              }
            ],
            "description": "Set of rules for users requesting spend programs.",
            "nullable": true
          }
        },
        "type": "object"
      },
      "ApiSpendProgramCreateRequestBody": {
        "properties": {
          "description": {
            "description": "Description of the spend program.",
            "type": "string"
          },
          "display_name": {
            "description": "Display name of the spend program.",
            "type": "string"
          },
          "icon": {
            "description": "The template icon for the spend program.",
            "enum": [
              "AccountingServicesIcon",
              "AdvertisingIcon",
              "CONTRACTORS_AND_PROFESSIONAL_SERVICES",
              "CUSTOM",
              "CardIcon",
              "EducationStipendIcon",
              "EmployeeRewardsIcon",
              "GroundTransportationIcon",
              "LegalFeesIcon",
              "LodgingIcon",
              "LunchOrderingIcon",
              "OnboardingIcon",
              "PerDiemCardIcon",
              "SOFTWARE",
              "SaasSubscriptionIcon",
              "SoftwareTrialIcon",
              "SuppliesIcon",
              "TeamSocialIcon",
              "TravelExpensesIcon",
              "VirtualEventIcon",
              "WellnessIcon",
              "WorkFromHomeIcon",
              "advertising",
              "airlines",
              "bills",
              "business",
              "car_services",
              "contractor",
              "education",
              "entertainment",
              "event_balloons",
              "event_virtual",
              "food",
              "fuel_and_gas",
              "general_expense",
              "general_merchandise",
              "gift",
              "government_services",
              "internet_and_phone",
              "legal",
              "lodging",
              "lodging_room",
              "newspaper",
              "office",
              "physical_card",
              "procurement_checklist",
              "procurement_intake",
              "professional_services",
              "restaurants",
              "reward",
              "saas_software",
              "shipping",
              "travel_misc",
              "wellness"
            ],
            "type": "string"
          },
          "is_shareable": {
            "default": false,
            "description": "Dictates whether the spend program is shareable among multiple users.",
            "type": "boolean"
          },
          "issuance_rules": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSpendProgramCreateIssuanceRulesRequestBody"
              }
            ],
            "default": null,
            "description": "Spend Program Issuance Rules can be set for requests or default issuance of Limits from a program. Set whether a program is requestable or issued by default for a given set of users and their attributes (department, locations, and custom fields). If you'd like to give these permissions to all employees, you can set `applies_to_all` to `True`. Feel free to ignore this if you don't want any custom requestability or issuance logic.",
            "nullable": true
          },
          "issue_physical_card_if_needed": {
            "default": false,
            "description": "Dictates whether the spend program should issue a physical card if the user does not have one.",
            "type": "boolean"
          },
          "permitted_spend_types": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiPermittedSpendTypesRequestBody"
              }
            ],
            "description": "Specifies the permitted spend types for the spend program."
          },
          "spending_restrictions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSpendingRestrictionsRequestBody"
              }
            ],
            "description": "A set of restrictions imposed on the spend program."
          }
        },
        "required": [
          "description",
          "display_name",
          "icon",
          "permitted_spend_types",
          "spending_restrictions"
        ],
        "type": "object"
      },
      "ApiSpendProgramIssuanceRulesRequestBody": {
        "properties": {
          "applies_to_all": {
            "default": false,
            "description": "Dictates whether this rule should apply to all employees or not (if True, location_ids, department_ids, and user_custom_field_ids should be null).",
            "type": "boolean"
          },
          "department_ids": {
            "description": "List of departments whose users are able to request or be issued this spend program.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "location_ids": {
            "description": "List of locations whose users are able to request or be issued this spend program.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "user_custom_field_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiSpendProgramResource": {
        "example": {
          "description": "Offer a yearly stipend for conferences and courses.",
          "display_name": "Education Stipend",
          "icon": "EducationStipendIcon",
          "id": "796dab75-a23f-4e2a-984e-20da003c38ef",
          "is_shareable": true,
          "issue_physical_card_if_needed": false,
          "permitted_spend_types": {
            "primary_card_enabled": true,
            "reimbursements_enabled": true
          },
          "restrictions": {
            "allowed_categories": [33],
            "allowed_vendors": [],
            "auto_lock_date": "2025-10-28T00:00:00+00:00",
            "blocked_categories": [],
            "blocked_vendors": [],
            "interval": "YEARLY",
            "limit": {
              "amount": 75000,
              "currency_code": "USD"
            },
            "next_interval_reset": "2024-01-01T00:00:00+00:00",
            "start_of_interval": "2023-01-01T00:00:00+00:00",
            "temporary_limit": null,
            "transaction_amount_limit": null
          }
        },
        "properties": {
          "description": {
            "description": "Description of the spend program.",
            "type": "string"
          },
          "display_name": {
            "description": "Display name of the spend program.",
            "type": "string"
          },
          "icon": {
            "description": "The template icon for the spend program.",
            "enum": [
              "AccountingServicesIcon",
              "AdvertisingIcon",
              "CONTRACTORS_AND_PROFESSIONAL_SERVICES",
              "CUSTOM",
              "CardIcon",
              "EducationStipendIcon",
              "EmployeeRewardsIcon",
              "GroundTransportationIcon",
              "LegalFeesIcon",
              "LodgingIcon",
              "LunchOrderingIcon",
              "OnboardingIcon",
              "PerDiemCardIcon",
              "SOFTWARE",
              "SaasSubscriptionIcon",
              "SoftwareTrialIcon",
              "SuppliesIcon",
              "TeamSocialIcon",
              "TravelExpensesIcon",
              "VirtualEventIcon",
              "WellnessIcon",
              "WorkFromHomeIcon",
              "advertising",
              "airlines",
              "bills",
              "business",
              "car_services",
              "contractor",
              "education",
              "entertainment",
              "event_balloons",
              "event_virtual",
              "food",
              "fuel_and_gas",
              "general_expense",
              "general_merchandise",
              "gift",
              "government_services",
              "internet_and_phone",
              "legal",
              "lodging",
              "lodging_room",
              "newspaper",
              "office",
              "physical_card",
              "procurement_checklist",
              "procurement_intake",
              "professional_services",
              "restaurants",
              "reward",
              "saas_software",
              "shipping",
              "travel_misc",
              "wellness"
            ],
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the spend program.",
            "format": "uuid",
            "type": "string"
          },
          "is_shareable": {
            "description": "Whether this spend program is shareable.",
            "type": "boolean"
          },
          "issue_physical_card_if_needed": {
            "description": "Indicates whether the spend program should issue a physical card if the user does not have one.",
            "type": "boolean"
          },
          "permitted_spend_types": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiPermittedSpendTypesDump"
              }
            ],
            "description": "Permitted spend types for the spend program."
          },
          "restrictions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SpendIntentApiSpendingRestrictionsDump"
              }
            ],
            "description": "A set of restrictions imposed on the spend program."
          }
        },
        "required": ["id"],
        "type": "object",
        "x-resource-name": "spend_programs"
      },
      "ApiSpendingRestrictionsDump": {
        "properties": {
          "allowed_categories": {
            "description": " List of [Ramp category codes](/developer-api/v1/overview/conventions#ramp-category-codes) allowed for the limit.",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "allowed_vendors": {
            "description": "List of merchants allowed for the limit.",
            "items": {
              "format": "uuid",
              "type": "string",
              "x-relationship": {
                "inverse_field_name": null,
                "reference_field_name": "id",
                "target_resource": "merchants",
                "type": "many-to-many"
              }
            },
            "type": "array"
          },
          "auto_lock_date": {
            "description": "Date to automatically to lock the limit.",
            "format": "date-time",
            "type": "string"
          },
          "blocked_categories": {
            "description": "List of [Ramp category codes](/developer-api/v1/overview/conventions#ramp-category-codes) blocked for the limit.",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "blocked_vendors": {
            "description": "List of merchants  blocked for the limit.",
            "items": {
              "format": "uuid",
              "type": "string",
              "x-relationship": {
                "inverse_field_name": null,
                "reference_field_name": "id",
                "target_resource": "merchants",
                "type": "many-to-many"
              }
            },
            "type": "array"
          },
          "interval": {
            "description": "Time interval the limit is applied on.",
            "enum": ["ANNUAL", "DAILY", "MONTHLY", "QUARTERLY", "TERTIARY", "TOTAL", "WEEKLY", "YEARLY"],
            "type": "string"
          },
          "limit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Amount limit total per interval denominated in cents. Currency is USD.",
            "nullable": true,
            "readOnly": true
          },
          "next_interval_reset": {
            "description": "Date and time for the next interval reset.",
            "format": "date-time",
            "type": "string"
          },
          "start_of_interval": {
            "description": "Date and time for the start of the current interval.",
            "format": "date-time",
            "type": "string"
          },
          "temporary_limit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Temporary limit total per interval.",
            "nullable": true,
            "readOnly": true
          },
          "transaction_amount_limit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Max amount allowed on a single transaction.",
            "nullable": true,
            "readOnly": true
          }
        },
        "required": ["limit", "temporary_limit", "transaction_amount_limit"],
        "type": "object"
      },
      "ApiSpendingRestrictionsRequestBody": {
        "properties": {
          "allowed_categories": {
            "description": " List of [Ramp category codes](/developer-api/v1/overview/conventions#ramp-category-codes) allowed for the limit.",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "allowed_vendors": {
            "description": "List of merchants allowed for the limit.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "blocked_categories": {
            "description": "List of [Ramp category codes](/developer-api/v1/overview/conventions#ramp-category-codes) blocked for the limit.",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "blocked_mcc_codes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "blocked_vendors": {
            "description": "List of merchants  blocked for the limit.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "interval": {
            "description": "Time interval to apply limit to.",
            "enum": ["ANNUAL", "DAILY", "MONTHLY", "QUARTERLY", "TERTIARY", "TOTAL", "WEEKLY", "YEARLY"],
            "type": "string"
          },
          "limit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmountRequestBody"
              }
            ],
            "description": "Total amount limit per interval. Currently we expect the currency to be USD and the amount need to be denominated in cents."
          },
          "lock_date": {
            "description": "Date to automatically lock the card. If lock date has passed, set to a future date or to null to unlock the card.",
            "format": "date-time",
            "type": "string"
          },
          "transaction_amount_limit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmountRequestBody"
              }
            ],
            "description": "Max amount per transaction. Currently we expect the currency to be USD and the amount need to be denominated in cents."
          }
        },
        "required": ["interval", "limit"],
        "type": "object"
      },
      "ApiSpendingRestrictionsUpdateRequestBody": {
        "properties": {
          "allowed_categories": {
            "description": " List of [Ramp category codes](/developer-api/v1/overview/conventions#ramp-category-codes) allowed for the limit.",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "allowed_vendors": {
            "description": "List of merchants allowed for the limit.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "blocked_categories": {
            "description": "List of [Ramp category codes](/developer-api/v1/overview/conventions#ramp-category-codes) blocked for the limit.",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "blocked_mcc_codes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "blocked_vendors": {
            "description": "List of merchants  blocked for the limit.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "interval": {
            "description": "Time interval to apply limit to.",
            "enum": ["ANNUAL", "DAILY", "MONTHLY", "QUARTERLY", "TERTIARY", "TOTAL", "WEEKLY", "YEARLY"],
            "type": "string"
          },
          "is_one_time_edit": {
            "description": "Dictates whether the spend restriction update is only applicable for the current period. Set to true for a temporary limit increase. Default is false.",
            "type": "boolean"
          },
          "limit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmountRequestBody"
              }
            ],
            "description": "Total amount limit per interval. Currently we expect the currency to be USD and the amount need to be denominated in cents."
          },
          "lock_date": {
            "description": "Date to automatically lock the card. If lock date has passed, set to a future date or to null to unlock the card.",
            "format": "date-time",
            "type": "string"
          },
          "transaction_amount_limit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmountRequestBody"
              }
            ],
            "description": "Max amount per transaction. Currently we expect the currency to be USD and the amount need to be denominated in cents."
          }
        },
        "required": ["interval", "limit"],
        "type": "object"
      },
      "ApiStatementItem": {
        "properties": {
          "cleared_at": {
            "description": "Time when transaction was cleared. Only present for transactions and may be null if not cleared.",
            "format": "date-time",
            "type": "string"
          },
          "created_at": {
            "description": "For transactions: time when card was swiped. For transfers/cashbacks: creation time.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the statement line item.",
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "description": "Type of statement line item (CARD_TRANSACTION, TRANSFER_PAYMENT, or CASHBACK).",
            "enum": ["CARD_TRANSACTION", "CASHBACK", "TRANSFER_PAYMENT"],
            "type": "string"
          }
        },
        "required": ["created_at"],
        "type": "object"
      },
      "ApiSuspensionDump": {
        "properties": {
          "acting_user_id": {
            "description": "Unique identifier of the user who placed the suspension.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "users",
              "type": "many-to-one"
            }
          },
          "inserted_at": {
            "description": "Date and time at which suspension was placed.",
            "format": "date-time",
            "type": "string"
          },
          "suspended_by_ramp": {
            "description": "Whether the suspension is placed by Ramp.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ApiTransactionAccountingCategoryInfo": {
        "properties": {
          "external_id": {
            "description": "external id of accounting field; It should uniquely identify an accounting field on the ERP.",
            "type": "string"
          },
          "id": {
            "description": "ID that uniquely identifies an accounting field within Ramp",
            "type": "string"
          },
          "name": {
            "description": "name of accounting field",
            "type": "string"
          },
          "type": {
            "description": "accounting field type",
            "enum": [
              "AMORTIZATION_TEMPLATE",
              "BILLABLE",
              "COST_CENTER",
              "CUSTOMERS_JOBS",
              "DEFERRAL_CODE",
              "EXPENSE_ENTITY",
              "GL_ACCOUNT",
              "INVENTORY_ITEM",
              "JOURNAL",
              "MERCHANT",
              "OTHER",
              "PROJECT",
              "REPORTING_TAG",
              "SUBSIDIARY",
              "TAX_CODE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiTransactionAccountingFieldSelection": {
        "properties": {
          "category_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiTransactionAccountingCategoryInfo"
              }
            ],
            "description": "information about the accounting category (or accounting field)."
          },
          "external_code": {
            "description": "external code of accounting field option; Code field displayed on the ERP.",
            "type": "string"
          },
          "external_id": {
            "description": "external id of accounting field option; It should uniquely identify an accounting field option on the ERP.",
            "type": "string"
          },
          "id": {
            "description": "ID that uniquely identifies an accounting field option within Ramp",
            "type": "string"
          },
          "name": {
            "description": "name of accounting field option",
            "type": "string"
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiAccountingFieldSelectionSource"
              }
            ],
            "description": "Describes the source of the accounting coding selection."
          },
          "type": {
            "description": "Accounting field type",
            "enum": [
              "AMORTIZATION_TEMPLATE",
              "BILLABLE",
              "COST_CENTER",
              "CUSTOMERS_JOBS",
              "DEFERRAL_CODE",
              "EXPENSE_ENTITY",
              "GL_ACCOUNT",
              "INVENTORY_ITEM",
              "JOURNAL",
              "MERCHANT",
              "OTHER",
              "PROJECT",
              "REPORTING_TAG",
              "SUBSIDIARY",
              "TAX_CODE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiTransactionAttendee": {
        "properties": {
          "name": {
            "description": "Full name of the attendee",
            "type": "string"
          },
          "user_id": {
            "description": "User ID of the attendee, if linked to a Ramp user. Missing if the attendee is not a Ramp user",
            "format": "uuid",
            "nullable": true,
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "users",
              "type": "many-to-one"
            }
          }
        },
        "required": ["name"],
        "type": "object"
      },
      "ApiTransactionCardHolder": {
        "properties": {
          "department_id": {
            "description": "ID of the card holder's department.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "departments",
              "type": "many-to-one"
            }
          },
          "department_name": {
            "description": "Name of the card holder's deparment.",
            "type": "string"
          },
          "employee_id": {
            "description": "User-defined employee ID of the card holder.",
            "type": "string"
          },
          "first_name": {
            "description": "Card holder's first name.",
            "type": "string"
          },
          "last_name": {
            "description": "Card holder's last name.",
            "type": "string"
          },
          "location_id": {
            "description": "ID of the card holder's location.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "locations",
              "type": "many-to-one"
            }
          },
          "location_name": {
            "description": "Name of the card holder's location.",
            "type": "string"
          },
          "user_id": {
            "description": "Card holder's ID.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "users",
              "type": "many-to-one"
            }
          }
        },
        "type": "object"
      },
      "ApiTransactionDeclineDetails": {
        "properties": {
          "amount": {
            "type": "number"
          },
          "reason": {
            "enum": [
              "AUTHORIZER",
              "AUTHORIZER_AP_CARD_VELOCITY_LIMIT",
              "AUTHORIZER_BUSINESS_LIMIT",
              "AUTHORIZER_BUSINESS_SUSPENDED",
              "AUTHORIZER_BUSINESS_VENDOR_BLACKLIST",
              "AUTHORIZER_CARD_AUTO_LOCK_DATE",
              "AUTHORIZER_CARD_CATEGORY_BLACKLIST",
              "AUTHORIZER_CARD_CATEGORY_WHITELIST",
              "AUTHORIZER_CARD_LIMIT",
              "AUTHORIZER_CARD_MCC_BLACKLIST",
              "AUTHORIZER_CARD_MISSING_POLICY_ITEMS",
              "AUTHORIZER_CARD_NOT_ACTIVATED",
              "AUTHORIZER_CARD_START_DATE",
              "AUTHORIZER_CARD_SUSPENDED",
              "AUTHORIZER_CARD_TASK_SANCTION",
              "AUTHORIZER_CARD_VENDOR_BLACKLIST",
              "AUTHORIZER_CARD_VENDOR_WHITELIST",
              "AUTHORIZER_COMMANDO_MODE",
              "AUTHORIZER_FRAUD",
              "AUTHORIZER_FREEZE_TRANSACTIONS_RISK",
              "AUTHORIZER_GLOBAL_MCC_BLACKLIST",
              "AUTHORIZER_NON_AP_CARD_VELOCITY_LIMIT",
              "AUTHORIZER_OOB_BLOCKED_MERCHANT",
              "AUTHORIZER_OOB_DAILY_BUSINESS_BALANCE",
              "AUTHORIZER_OOB_DAILY_CARD_SPEND",
              "AUTHORIZER_RAMP_AUTHORIZATION_METHODS",
              "AUTHORIZER_RAMP_TRANSACTION_AMOUNT_LIMIT",
              "AUTHORIZER_RAMP_VENDOR_RESTRICTIONS",
              "AUTHORIZER_SPEND_ALLOCATION_SUSPENDED",
              "AUTHORIZER_TRANSACTION_AMOUNT_LIMIT",
              "AUTHORIZER_USER_LIMIT",
              "AUTHORIZER_USER_SUSPENDED",
              "BLOCKED_COUNTRY",
              "CARD_EXPIRED",
              "CARD_LOST_OR_STOLEN",
              "CARD_TERMINATED",
              "CHIP_FAILURE",
              "FORBIDDEN_CATEGORY",
              "INSECURE_AUTHORIZATION_METHOD",
              "INSUFFICIENT_FUNDS",
              "INVALID_PIN",
              "MISSING_CVV",
              "MISSING_EXPIRATION",
              "MOBILE_WALLET_FAILURE",
              "MOBILE_WALLET_TOKEN_NOT_FOUND",
              "MOBILE_WALLET_TOKEN_TERMINATED",
              "NETWORK_DECLINE_ACCOUNT_VERIFICATION",
              "NETWORK_DECLINE_ADVICE",
              "NETWORK_DECLINE_ADVICE_ACQUIRER_ISSUE",
              "NETWORK_DECLINE_ADVICE_ADDITIONAL_AUTHENTICATION_REQUIRED",
              "NETWORK_DECLINE_ADVICE_FORCED_STIP_BY_ISSUER",
              "NETWORK_DECLINE_ADVICE_ISSUER_LOGGED_OFF",
              "NETWORK_DECLINE_ADVICE_ISSUER_TIMEOUT",
              "NETWORK_DECLINE_ADVICE_ISSUER_UNAVAILABLE",
              "NETWORK_DECLINE_ADVICE_PIN_ERROR",
              "NETWORK_DECLINE_ADVICE_RECURRING_PAYMENT",
              "NETWORK_DECLINE_ADVICE_SELECTIVE_ACCEPTANCE_SERVICE",
              "NETWORK_DECLINE_ADVICE_SUSPECTED_FRAUD_TRANSACTION",
              "NETWORK_DECLINE_ADVICE_TOKEN_PROVISIONING_SERVICE",
              "NETWORK_DECLINE_ADVICE_VISA_PAYMENT_CONTROLS_RULE",
              "NOT_ACTIVE",
              "NOT_ALLOWED",
              "NO_AUTO_ROUTED_LIMITS_AVAILABLE",
              "NO_LINKED_SPEND_ALLOCATION",
              "OFAC_VERIFICATION_NEEDED",
              "OPEN_TO_BUY_LIMIT",
              "OTHER",
              "PIN_BLOCKED",
              "PIN_TRY_LIMIT_EXCEEDED",
              "PROCESSOR_CAP",
              "QUASI_CASH",
              "ROUTED_TO_TERMINATED_SPEND_ALLOCATION",
              "STRIPE_WEBHOOK_TIMEOUT",
              "SUSPECTED_BIN_ATTACK",
              "SUSPECTED_FRAUD",
              "THREE_D_SECURE_REQUIRED",
              "USER_BLOCKED",
              "USER_TERMINATED",
              "WRONG_ADDRESS",
              "WRONG_CVV",
              "WRONG_EXPIRATION",
              "WRONG_POSTAL_CODE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiTransactionDispute": {
        "properties": {
          "created_at": {
            "description": "Time at which the dispute is created, presented in ISO8601 format.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Uniquely identifies a transaction dispute.",
            "format": "uuid",
            "type": "string"
          },
          "memo": {
            "description": "Free form text regarding the dispute.",
            "type": "string"
          },
          "type": {
            "description": "The dispute type; It could be one of the following values: RESOLVED_BY_RAMP, CANCELLED_BY_CUSTOMER, CANCELLED_BY_RAMP, CREATED_MERCHANT_ERROR and CREATED_UNRECOGNIZED_CHARGE.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiTransactionLineItem": {
        "properties": {
          "accounting_field_selections": {
            "description": "List of accounting field options selected to code the line item.",
            "items": {
              "$ref": "#/components/schemas/ApiTransactionAccountingFieldSelection"
            },
            "type": "array"
          },
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Amount of the line item, denominated in the currency that the transaction was settled in.",
            "nullable": true
          },
          "converted_amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Amount of the split line item, converted to the currency of the card on which the transaction occured.",
            "nullable": true
          },
          "memo": {
            "description": "Memo associated with the line item.",
            "type": "string"
          }
        },
        "required": ["amount", "converted_amount"],
        "type": "object"
      },
      "ApiTransactionPolicyViolation": {
        "properties": {
          "created_at": {
            "description": "Time at which the policy violation is created, presented in ISO8601 format.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Uniquely identifies a policy violation.",
            "format": "uuid",
            "type": "string"
          },
          "memo": {
            "description": "Free form text regarding the policy violation.",
            "type": "string"
          },
          "type": {
            "description": "Type of the policy violation.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiTransactionPurchaseAutoRental": {
        "properties": {
          "check_out": {
            "type": "string"
          },
          "days": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiTransactionPurchaseData": {
        "properties": {
          "auto_rental": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiTransactionPurchaseAutoRental"
              }
            ],
            "description": "Auto rental purchase data provided by the merchant",
            "nullable": true
          },
          "flight": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiTransactionPurchaseFlightData"
              }
            ],
            "description": "Flight purchase data provided by the merchant",
            "nullable": true
          },
          "lodging": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiTransactionPurchaseLodging"
              }
            ],
            "description": "Lodging purchase data provided by the merchant",
            "nullable": true
          },
          "receipt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiTransactionPurchaseReceipt"
              }
            ],
            "description": "Receipt purchase data provided by the merchant",
            "nullable": true
          },
          "reference": {
            "description": "Purchase data reference ID provided by the merchant",
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["auto_rental", "flight", "lodging", "receipt", "reference"],
        "type": "object"
      },
      "ApiTransactionPurchaseFlightData": {
        "properties": {
          "departure_date": {
            "nullable": true,
            "type": "string"
          },
          "passenger_name": {
            "type": "string"
          },
          "segments": {
            "items": {
              "$ref": "#/components/schemas/ApiTransactionPurchaseFlightSegment"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "required": ["departure_date", "segments"],
        "type": "object"
      },
      "ApiTransactionPurchaseFlightSegment": {
        "properties": {
          "arrival_airport_code": {
            "type": "string"
          },
          "carrier": {
            "type": "string"
          },
          "departure_airport_code": {
            "type": "string"
          },
          "flight_number": {
            "type": "string"
          },
          "service_class": {
            "type": "string"
          },
          "stopover_allowed": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ApiTransactionPurchaseLodging": {
        "properties": {
          "check_in": {
            "type": "string"
          },
          "nights": {
            "nullable": true,
            "type": "integer"
          }
        },
        "required": ["nights"],
        "type": "object"
      },
      "ApiTransactionPurchaseReceipt": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ApiTransactionPurchaseReceiptLineItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiTransactionPurchaseReceiptLineItem": {
        "properties": {
          "commodity_code": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "discount": {
            "nullable": true,
            "type": "number"
          },
          "quantity": {
            "type": "number"
          },
          "tax": {
            "nullable": true,
            "type": "number"
          },
          "total": {
            "type": "number"
          },
          "unit_cost": {
            "type": "number"
          }
        },
        "required": ["commodity_code", "discount", "tax"],
        "type": "object"
      },
      "ApiUpdateBillParamsRequestBody": {
        "example": {
          "accounting_field_selections": [
            {
              "field_external_id": "b3B0aW9uX2lk",
              "field_option_external_id": "aln2l3B0aW9uX2lk"
            }
          ],
          "due_at": "2024-10-15",
          "entity_id": "1cc4b57c-fe4a-4425-90f1-9019d06376b3",
          "inventory_line_items": [
            {
              "accounting_field_selections": [
                {
                  "field_external_id": "aa73laMazi2",
                  "field_option_external_id": "abk3Rkfnls25"
                }
              ],
              "memo": "Pens",
              "unit_price": 55,
              "unit_quantity": 2
            }
          ],
          "invoice_number": "123",
          "issued_at": "2024-08-15",
          "line_items": [
            {
              "accounting_field_selections": [],
              "amount": 100,
              "memo": "Printing services"
            }
          ],
          "memo": "Office supplies",
          "payment_method": "ONE_TIME_CARD_DELIVERY",
          "posting_date": null,
          "remote_id": "bo2f1lAnkf3llL",
          "vendor_contact_id": "12f55361-8c7f-42dc-8667-64926d330b80",
          "vendor_id": "c0c89fa8-976e-428d-938d-a5ec89838474"
        },
        "properties": {
          "accounting_field_selections": {
            "description": "List of accounting field options selected to code the bill.",
            "items": {
              "$ref": "#/components/schemas/ApiCreateAccountingFieldParamsRequestBody"
            },
            "type": "array"
          },
          "due_at": {
            "description": "Due date of the bill.",
            "format": "date",
            "type": "string"
          },
          "entity_id": {
            "description": "Associated business entity.",
            "format": "uuid",
            "type": "string"
          },
          "inventory_line_items": {
            "description": "List of inventory line items related to the bill.",
            "items": {
              "$ref": "#/components/schemas/ApiCreateBillInventoryLineItemParamsRequestBody"
            },
            "nullable": true,
            "type": "array"
          },
          "invoice_number": {
            "description": "The invoice number on the bill.",
            "maxLength": 20,
            "type": "string"
          },
          "issued_at": {
            "description": "Issued date of the bill.",
            "format": "date",
            "type": "string"
          },
          "line_items": {
            "description": "List of line items related to the bill.",
            "items": {
              "$ref": "#/components/schemas/ApiCreateBillLineItemParamsRequestBody"
            },
            "nullable": true,
            "type": "array"
          },
          "memo": {
            "description": "Memo of the bill.",
            "maxLength": 1000,
            "nullable": true,
            "type": "string"
          },
          "payment_method": {
            "description": "Payment method of the bill.",
            "enum": [
              "ACH",
              "CARD",
              "CHECK",
              "DOMESTIC_WIRE",
              "INTERNATIONAL",
              "ONE_TIME_CARD",
              "ONE_TIME_CARD_DELIVERY",
              "PAID_MANUALLY",
              "SWIFT",
              "UNSPECIFIED",
              "VENDOR_CREDIT"
            ],
            "type": "string"
          },
          "posting_date": {
            "description": "The date the bill is posted to the accounting system.",
            "format": "date",
            "nullable": true,
            "type": "string"
          },
          "purchase_order_id": {
            "description": "Unique identifier of the purchase order to match this bill to. Set to null to remove the link to the purchase order from the bill.",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "remote_id": {
            "description": "An ID that identifies the bill on client's side.",
            "nullable": true,
            "type": "string"
          },
          "vendor_contact_id": {
            "description": "Unique identifier of vendor contact, must be associated with passed vendor.",
            "format": "uuid",
            "type": "string"
          },
          "vendor_id": {
            "description": "Unique identifier of bill vendor.",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiUserCreateRequestBody": {
        "example": {
          "department_id": "2d68eb67-f6eb-4284-8683-7d530c77a5a6",
          "direct_manager_id": "ccc5d4cc-337f-49a5-86b3-5df128233f2c",
          "email": "cardholder_7@company.com",
          "first_name": "Linda",
          "idempotency_key": "d471d830-2e73-4082-8a75-68540f83e86e",
          "is_manager": false,
          "last_name": "Gu",
          "location_id": "f4efe11c-221f-4b49-a1e4-33eaf96a49ee",
          "role": "BUSINESS_USER"
        },
        "properties": {
          "department_id": {
            "description": "Unique identifier of the employee's department",
            "format": "uuid",
            "type": "string"
          },
          "direct_manager_id": {
            "description": "Unique identifier of the employee's direct manager",
            "format": "uuid",
            "type": "string"
          },
          "email": {
            "description": "The employee's email address",
            "format": "email",
            "type": "string"
          },
          "employee_id": {
            "description": "An alternative identifier for an employee, coming from external systems, which can be used in place of an email.",
            "minLength": 1,
            "type": "string"
          },
          "first_name": {
            "description": "First name of the employee",
            "maxLength": 255,
            "type": "string"
          },
          "idempotency_key": {
            "description": "an idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.",
            "type": "string"
          },
          "is_manager": {
            "description": "Whether the employee is a manager",
            "type": "boolean"
          },
          "last_name": {
            "description": "Last name of the employee",
            "maxLength": 255,
            "type": "string"
          },
          "location_id": {
            "description": "Unique identifier of the employee's location",
            "format": "uuid",
            "type": "string"
          },
          "role": {
            "description": "The employee's role; It could be one of the following values: Admin, Cardholder, Bookkeeper; Note that Owner is not a invitable role.",
            "enum": [
              "AUDITOR",
              "BUSINESS_ADMIN",
              "BUSINESS_BOOKKEEPER",
              "BUSINESS_OWNER",
              "BUSINESS_USER",
              "GUEST_USER",
              "IT_ADMIN"
            ],
            "type": "string"
          }
        },
        "required": ["email", "first_name", "idempotency_key", "last_name", "role"],
        "type": "object"
      },
      "ApiUserCustomField": {
        "properties": {
          "name": {
            "description": "Name of the custom field",
            "type": "string"
          },
          "value": {
            "description": "Value of the custom field",
            "type": "string"
          }
        },
        "required": ["name", "value"],
        "type": "object"
      },
      "ApiUserDeferredTaskContext": {
        "properties": {
          "acting_user_id": {
            "description": "Unique identifier of the acting user that initiated the deferred task.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "users",
              "type": "many-to-one"
            }
          }
        },
        "type": "object"
      },
      "ApiUserDeferredTaskData": {
        "properties": {
          "error": {
            "description": "An error message if the deferred task fails",
            "type": "string"
          },
          "user_id": {
            "description": "The subject employee's ID of the deferred task.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "users",
              "type": "many-to-one"
            }
          }
        },
        "type": "object",
        "x-resource-name": "user_deferred_task_data"
      },
      "ApiUserUpdateRequestBody": {
        "example": {
          "department_id": "2d68eb67-f6eb-4284-8683-7d530c77a5a6",
          "direct_manager_id": "ccc5d4cc-337f-49a5-86b3-5df128233f2c",
          "first_name": "Jeremy",
          "is_manager": true,
          "last_name": "Smith",
          "location_id": "f4efe11c-221f-4b49-a1e4-33eaf96a49ee",
          "role": "BUSINESS_ADMIN"
        },
        "properties": {
          "auto_promote": {
            "description": "Whether to automatically promote the users manager to manager.",
            "type": "boolean"
          },
          "department_id": {
            "description": "Unique identifier of the employee's department",
            "format": "uuid",
            "type": "string"
          },
          "direct_manager_id": {
            "description": "Unique identifier of the employee's direct manager",
            "format": "uuid",
            "type": "string"
          },
          "employee_id": {
            "description": "An alternative identifier for an employee, coming from external systems, which can be used in place of an email.",
            "minLength": 1,
            "type": "string"
          },
          "first_name": {
            "minLength": 1,
            "type": "string"
          },
          "is_manager": {
            "description": "Whether the employee is a manager",
            "type": "boolean"
          },
          "last_name": {
            "minLength": 1,
            "type": "string"
          },
          "location_id": {
            "description": "Unique identifier of the employee's location",
            "format": "uuid",
            "type": "string"
          },
          "role": {
            "description": "The employee's role; It could be one of the following values: Admin, Cardholder, Bookkeeper; Note that Owner is not a permissible value.",
            "enum": [
              "AUDITOR",
              "BUSINESS_ADMIN",
              "BUSINESS_BOOKKEEPER",
              "BUSINESS_OWNER",
              "BUSINESS_USER",
              "GUEST_USER",
              "IT_ADMIN"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiVendorAddressCreateRequestBody": {
        "properties": {
          "address_line_1": {
            "description": "Primary address line of the vendor.",
            "type": "string"
          },
          "address_line_2": {
            "description": "Secondary address line or suite number of the vendor.",
            "nullable": true,
            "type": "string"
          },
          "city": {
            "description": "City of the vendor address.",
            "type": "string"
          },
          "country": {
            "description": "Country of the vendor address.",
            "nullable": true,
            "type": "string"
          },
          "postal_code": {
            "description": "Postal or ZIP code of the vendor address.",
            "type": "string"
          },
          "state": {
            "description": "State/province of the vendor address.",
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["address_line_1", "city", "postal_code"],
        "type": "object"
      },
      "ApiVendorBankAccountResource": {
        "properties": {
          "account_nickname": {
            "description": "Nickname of the vendor bank account.",
            "type": "string"
          },
          "currency": {
            "description": "Currency of the vendor bank account.",
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLE",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VED",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAD",
              "XAF",
              "XAG",
              "XAU",
              "XBA",
              "XBB",
              "XBC",
              "XBD",
              "XCD",
              "XCG",
              "XDR",
              "XOF",
              "XPD",
              "XPF",
              "XPT",
              "XSU",
              "XTS",
              "XUA",
              "XXX",
              "YER",
              "ZAR",
              "ZMW",
              "ZWG",
              "ZWL"
            ],
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the vendor bank account.",
            "format": "uuid",
            "type": "string"
          },
          "is_default": {
            "description": "Whether this is the payee's default bank account.",
            "type": "boolean"
          },
          "payment_method": {
            "description": "Supported payment method for the vendor bank account.",
            "enum": [
              "ACH",
              "CARD",
              "CHECK",
              "DOMESTIC_WIRE",
              "INTERNATIONAL",
              "ONE_TIME_CARD",
              "ONE_TIME_CARD_DELIVERY",
              "PAID_MANUALLY",
              "SWIFT",
              "UNSPECIFIED",
              "VENDOR_CREDIT"
            ],
            "type": "string"
          }
        },
        "required": ["currency", "id", "payment_method"],
        "type": "object"
      },
      "ApiVendorBankAccountUpdateRequestBody": {
        "example": {
          "account_nickname": "Primary Business Account",
          "ach_details": {
            "account_name": "Business Account",
            "account_number": "123456789",
            "account_owner_type": "BUSINESS",
            "account_type": "Checking",
            "routing_number": "021000021"
          },
          "is_default": false
        },
        "properties": {
          "account_nickname": {
            "description": "Optional nickname for the payment account",
            "type": "string"
          },
          "ach_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VendorACHDetailsRequestBody"
              }
            ],
            "description": "ACH payment details"
          },
          "is_default": {
            "default": false,
            "description": "Whether this should be the default payment method",
            "type": "boolean"
          },
          "wire_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VendorWireDetailsRequestBody"
              }
            ],
            "description": "Wire payment details"
          }
        },
        "type": "object"
      },
      "ApiVendorContactResource": {
        "properties": {
          "email": {
            "type": "string"
          },
          "first_name": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the vendor contact.",
            "format": "uuid",
            "type": "string"
          },
          "is_default": {
            "type": "boolean"
          },
          "last_name": {
            "nullable": true,
            "type": "string"
          },
          "phone": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["email", "first_name", "id", "is_default", "last_name", "phone"],
        "type": "object",
        "x-resource-name": "vendor_contacts"
      },
      "ApiVendorCreateRequestBody": {
        "example": {
          "business_vendor_contacts": {
            "email": "vendor@ramp.com",
            "first_name": "John",
            "last_name": "Doe",
            "phone": "+13525342357"
          },
          "country": "US",
          "name": "Ramp",
          "request_payment_details": true,
          "request_tax_details": true,
          "state": "NY",
          "vendor_owner_id": "6b864472-294e-4fc9-91ab-158d684c8886",
          "vendor_tracking_category_option_id": "60a1a5c9-9b2d-4658-9024-cc4baebf819a"
        },
        "properties": {
          "accounting_vendor_remote_id": {
            "description": "The accounting remote id of the vendor. At most one of `accounting_vendor_remote_id` or `vendor_tracking_category_option_id` should be provided.",
            "type": "string"
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiVendorAddressCreateRequestBody"
              }
            ],
            "description": "The address of the vendor."
          },
          "business_vendor_contacts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiDefaultBusinessVendorResourceRequestBody"
              }
            ],
            "description": "Detailed information about the vendor contact."
          },
          "country": {
            "description": "The country of the vendor.",
            "type": "string"
          },
          "name": {
            "description": "Name of the new vendor to be created.",
            "type": "string"
          },
          "request_payment_details": {
            "default": false,
            "description": "Whether to request payment details from the vendor (ACH bank account, international wire transfer, and check mailing address). Requires a contact email.",
            "type": "boolean"
          },
          "request_tax_details": {
            "default": false,
            "description": "Whether to request tax information from the vendor (Tax Identification Number, federal tax classification, and tax address). Requires a contact email.",
            "type": "boolean"
          },
          "state": {
            "default": null,
            "description": "The state of the vendor if country is US.",
            "nullable": true,
            "type": "string"
          },
          "vendor_owner_id": {
            "description": "Unique identifier of the user that will own this vendor.",
            "format": "uuid",
            "type": "string"
          },
          "vendor_tracking_category_option_id": {
            "description": "Ramp unique identifier of the accounting vendor to link to this vendor. At most one of `accounting_vendor_remote_id` or `vendor_tracking_category_option_id` should be provided.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": ["business_vendor_contacts", "country", "vendor_owner_id"],
        "type": "object"
      },
      "ApiVendorDetailResource": {
        "example": {
          "accounting_vendor_remote_id": "1234",
          "address": {
            "address_line_1": "442 Good St",
            "address_line_2": null,
            "city": "San Diego",
            "country": "US",
            "postal_code": "94105",
            "state": "CA"
          },
          "billing_frequency": null,
          "contacts": ["315eb85a-3a60-45ba-8d1c-67385cd0281f", "5453d095-38ad-4656-8d73-df4e204a51b4"],
          "country": "US",
          "created_at": "2024-05-12T02:23:00+00:00",
          "custom_form_collection_response": {
            "custom_form_collection_log_entry": {
              "forms": [
                {
                  "fields": [
                    {
                      "conditions": null,
                      "description": "",
                      "field": {
                        "field_type": "TEXT",
                        "mapped_fields": [],
                        "value": {
                          "value": "hello"
                        }
                      },
                      "field_id": "fc6e0459-a164-4a44-ace1-c432d860423b",
                      "is_mapped_to_ironclad_field": false,
                      "is_used_in_approval_workflow_condition": false,
                      "is_used_in_custom_form_workflow_condition": false,
                      "label": "Add a message for approvers to review",
                      "required": false,
                      "validation_errors": [],
                      "value_display_string": "hello"
                    }
                  ],
                  "label": "custom_field_1"
                }
              ],
              "label": null
            }
          },
          "description": "Vendor for art supplies",
          "federal_tax_classification": "C_CORPORATION",
          "id": "4f08baf7-e3f0-4271-aedd-4d2c2214ed9a",
          "is_active": true,
          "is_deletable": false,
          "merchant_id": null,
          "name": "Ali's Art shop",
          "name_legal": "Ali's Art shop LLC",
          "sk_category_id": 30,
          "sk_category_name": "General merchandise",
          "state": "CA",
          "tax_address": {
            "address_line_1": "1234 Main St",
            "address_line_2": "Suite 200",
            "city": "San Diego",
            "country": "US",
            "postal_code": "94105",
            "state": "CA"
          },
          "total_spend_all_time": {
            "amount": 18500,
            "currency_code": "USD"
          },
          "total_spend_last_30_days": {
            "amount": 18500,
            "currency_code": "USD"
          },
          "total_spend_last_365_days": {
            "amount": 18500,
            "currency_code": "USD"
          },
          "total_spend_ytd": {
            "amount": 18500,
            "currency_code": "USD"
          },
          "vendor_owner_id": "8ca6cfe2-2bea-46f9-998b-56c1a8ac9454",
          "vendor_type": "BUSINESS"
        },
        "properties": {
          "accounting_vendor_remote_id": {
            "description": "The accounting remote id of the vendor.",
            "nullable": true,
            "type": "string"
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiAddressResource"
              }
            ],
            "description": "The address of the vendor."
          },
          "billing_frequency": {
            "description": "The billing frequency for this vendor.",
            "enum": [
              "ANNUAL",
              "MONTHLY",
              "MULTIPLE",
              "NA",
              "OTHER",
              "QUARTERLY",
              "ROLLING",
              "TBD",
              "TWICE_A_YEAR"
            ],
            "type": "string"
          },
          "contacts": {
            "description": "Unique identifiers of contacts associated with this vendor.",
            "items": {
              "description": "Unique identifier of the vendor contact.",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "country": {
            "description": "The 2-letter country of the vendor.",
            "type": "string"
          },
          "created_at": {
            "description": "The date and time when this vendor was created.",
            "format": "date-time",
            "type": "string"
          },
          "custom_form_collection_response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiCustomFormCollectionResponse"
              }
            ],
            "description": "Custom form collection with an associated response log entry.",
            "nullable": true,
            "readOnly": true
          },
          "description": {
            "description": "Description of the vendor.",
            "type": "string"
          },
          "federal_tax_classification": {
            "description": "The federal tax classification of the vendor.",
            "enum": [
              "C_CORPORATION",
              "INDIVIDUAL_SOLE_PROPRIETOR_SINGLE_MEMBER_LLC",
              "INTERNATIONAL",
              "LLC_C_CORPORATION",
              "LLC_PARTNERSHIP",
              "LLC_S_CORPORATION",
              "OTHER",
              "PARTNERSHIP",
              "S_CORPORATION",
              "TRUST_ESTATE"
            ],
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the vendor.",
            "format": "uuid",
            "type": "string"
          },
          "is_active": {
            "description": "Whether this vendor is active.",
            "type": "boolean"
          },
          "is_deletable": {
            "description": "Whether this vendor is deletable.",
            "readOnly": true,
            "type": "boolean"
          },
          "merchant_id": {
            "description": "The id of the card merchant.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "merchants",
              "type": "many-to-many"
            }
          },
          "name": {
            "description": "Name of the vendor.",
            "type": "string"
          },
          "name_legal": {
            "description": "Legal name of the vendor.",
            "type": "string"
          },
          "sk_category_id": {
            "description": "Ramp category code of the vendor.",
            "type": "integer"
          },
          "sk_category_name": {
            "description": "The category name of the vendor.",
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "tax_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiAddressResource"
              }
            ],
            "description": "The tax address of the vendor."
          },
          "total_spend_all_time": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Total spend for all time for this vendor.",
            "readOnly": true
          },
          "total_spend_last_30_days": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Total spend for the last 30 days for this vendor.",
            "readOnly": true
          },
          "total_spend_last_365_days": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Total spend for the last 365 days for this vendor.",
            "readOnly": true
          },
          "total_spend_ytd": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Total spend year-to-date for this vendor.",
            "readOnly": true
          },
          "vendor_owner_id": {
            "description": "Unique identifier of the user which owns this vendor.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "users",
              "type": "many-to-one"
            }
          },
          "vendor_type": {
            "description": "The type of vendor if bill pay.",
            "enum": ["BUSINESS", "INDIVIDUAL"],
            "type": "string"
          }
        },
        "required": [
          "accounting_vendor_remote_id",
          "contacts",
          "country",
          "created_at",
          "custom_form_collection_response",
          "id",
          "is_active",
          "is_deletable",
          "name",
          "total_spend_all_time",
          "total_spend_last_30_days",
          "total_spend_last_365_days",
          "total_spend_ytd"
        ],
        "type": "object",
        "x-resource-name": "vendors"
      },
      "ApiVendorPaymentDetailsResource": {
        "properties": {
          "approval_status": {
            "description": "Approval status of the payment, if payment-step approvals are used.",
            "enum": ["APPROVED", "INITIALIZED", "PENDING", "REJECTED", "TERMINATED"],
            "nullable": true,
            "type": "string"
          },
          "source_bank_account_id": {
            "description": "Unique identifier of the bank account associated with this bill payment, if it exists.",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "vendor_account_id": {
            "description": "Unique identifier of the vendor account associated with this bill payment, if it exists.",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["approval_status", "source_bank_account_id", "vendor_account_id"],
        "type": "object"
      },
      "ApiVendorUpdateRequestBody": {
        "example": {
          "address": {
            "address_line_1": "442 Good St",
            "address_line_2": null,
            "city": "Allentown",
            "country": "US",
            "postal_code": "18102",
            "state": "Pennsylvania"
          },
          "country": "US",
          "description": "Some description",
          "is_active": true,
          "state": "NY",
          "vendor_tracking_category_option_id": "60a1a5c9-9b2d-4658-9024-cc4baebf819a"
        },
        "properties": {
          "accounting_vendor_remote_id": {
            "description": "The accounting remote id of the vendor. At most one of `accounting_vendor_remote_id` or `vendor_tracking_category_option_id` should be provided.",
            "type": "string"
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiVendorAddressCreateRequestBody"
              }
            ],
            "description": "The address of the vendor."
          },
          "country": {
            "description": "The country of the vendor.",
            "type": "string"
          },
          "description": {
            "description": "Name of the vendor.",
            "type": "string"
          },
          "is_active": {
            "description": "Whether this vendor is active.",
            "type": "boolean"
          },
          "state": {
            "default": null,
            "description": "The state of the vendor if country is the US.",
            "nullable": true,
            "type": "string"
          },
          "vendor_tracking_category_option_id": {
            "description": "Unique identifier of the vendor. At most one of `accounting_vendor_remote_id` or `vendor_tracking_category_option_id` should be provided.",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ArrayValue": {
        "properties": {
          "child_type": {
            "enum": ["ARRAY", "BOOL", "INT", "JSONB", "NUMERIC", "STR"],
            "type": "string"
          },
          "type": {
            "enum": ["ARRAY"],
            "type": "string"
          },
          "value": {
            "items": {
              "$ref": "#/components/schemas/TypedValue"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "required": ["child_type", "type"],
        "type": "object"
      },
      "AtomicCondition": {
        "properties": {
          "condition_item_type": {
            "enum": ["CONDITION"],
            "type": "string"
          },
          "left_operand": {
            "$ref": "#/components/schemas/Operand"
          },
          "operator": {
            "$ref": "#/components/schemas/Operator"
          },
          "right_operand": {
            "$ref": "#/components/schemas/Operand"
          }
        },
        "required": ["condition_item_type", "left_operand", "operator", "right_operand"],
        "type": "object"
      },
      "AvailableOperand": {
        "discriminator": {
          "mapping": {
            "OBJECT": "#/components/schemas/AvailableOperandObjectType",
            "STATE": "#/components/schemas/AvailableState",
            "STATE_OBJECT": "#/components/schemas/AvailableStateObject",
            "STATE_OBJECT_LIST": "#/components/schemas/AvailableStateObjectList"
          },
          "propertyName": "available_operand_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/AvailableOperandObjectType"
          },
          {
            "$ref": "#/components/schemas/AvailableState"
          },
          {
            "$ref": "#/components/schemas/AvailableStateObject"
          },
          {
            "$ref": "#/components/schemas/AvailableStateObjectList"
          }
        ]
      },
      "AvailableOperandObjectType": {
        "properties": {
          "available_operand_type": {
            "enum": ["OBJECT"],
            "type": "string"
          },
          "object_type": {
            "type": "string"
          }
        },
        "required": ["available_operand_type", "object_type"],
        "type": "object"
      },
      "AvailableState": {
        "properties": {
          "available_operand_type": {
            "enum": ["STATE"],
            "type": "string"
          },
          "child_type": {
            "nullable": true,
            "type": "string"
          },
          "display": {
            "readOnly": true,
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "mask": {
            "enum": ["CURRENCY", "DAY", "PERCENTAGE"],
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "state_type": {
            "enum": ["CONSTANT", "DYNAMIC", "STATIC"],
            "type": "string"
          },
          "type": {
            "enum": ["ARRAY", "BOOL", "INT", "JSONB", "NUMERIC", "STR"],
            "type": "string"
          }
        },
        "required": ["available_operand_type", "display", "key", "state_type", "type"],
        "type": "object"
      },
      "AvailableStateObject": {
        "properties": {
          "available_operand_type": {
            "enum": ["STATE_OBJECT"],
            "type": "string"
          },
          "display": {
            "readOnly": true,
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "mask": {
            "enum": ["CURRENCY", "DAY", "PERCENTAGE"],
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "state_type": {
            "enum": ["CONSTANT", "DYNAMIC", "STATIC"],
            "type": "string"
          }
        },
        "required": ["available_operand_type", "display", "key", "object_type", "state_type"],
        "type": "object"
      },
      "AvailableStateObjectList": {
        "properties": {
          "available_operand_type": {
            "enum": ["STATE_OBJECT_LIST"],
            "type": "string"
          },
          "display": {
            "readOnly": true,
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "mask": {
            "enum": ["CURRENCY", "DAY", "PERCENTAGE"],
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "object_list_type": {
            "readOnly": true,
            "type": "string"
          },
          "state_type": {
            "enum": ["CONSTANT", "DYNAMIC", "STATIC"],
            "type": "string"
          }
        },
        "required": ["available_operand_type", "display", "key", "object_list_type", "state_type"],
        "type": "object"
      },
      "Bill": {
        "example": {
          "accounting_date": "2024-05-12T00:00:00+00:00",
          "accounting_field_selections": [],
          "accounting_sync_date": "2024-05-12T00:00:00+00:00",
          "amount": {
            "amount": 96993,
            "currency_code": "USD"
          },
          "bill_owner": {
            "first_name": "John",
            "id": "96bb7007-eec5-430f-8d09-e033cbc000c2",
            "last_name": "Doe"
          },
          "created_at": "2024-05-12T01:37:27+00:00",
          "deep_link_url": null,
          "due_at": "2022-12-31T00:00:00+00:00",
          "entity_id": "5bcc3734-f03a-4756-bc4b-afeb52d738ad",
          "fx_conversion_rate": "1.0",
          "id": "6e3816e3-0e53-42ae-b075-bdb0adff10c4",
          "inventory_line_items": [
            {
              "accounting_field_selections": [
                {
                  "category_info": {
                    "external_id": "Category",
                    "id": "0c0d0bcc-8716-4e05-a651-4ad5e64d2b3e",
                    "name": "Category",
                    "type": "GL_ACCOUNT"
                  },
                  "external_id": "426",
                  "id": "07b4ce4d-2750-412e-aef4-6b7815f1411a",
                  "name": "Ramp Category",
                  "type": "Subsidiary"
                }
              ],
              "amount": {
                "amount": 25000,
                "currency_code": "USD"
              },
              "memo": "Staplers.",
              "unit_price": {
                "amount": 5000,
                "currency_code": "USD"
              },
              "unit_quantity": 5
            }
          ],
          "invoice_number": "432",
          "invoice_urls": ["https://receipts.ramp.com/some-url"],
          "issued_at": "2022-12-31T00:00:00+00:00",
          "line_items": [
            {
              "accounting_field_selections": [],
              "amount": {
                "amount": 1998,
                "currency_code": "USD"
              },
              "memo": "Telephone Headset"
            },
            {
              "accounting_field_selections": [],
              "amount": {
                "amount": 94995,
                "currency_code": "USD"
              },
              "memo": "2-Drawer Lateral File Cabinet Steel White"
            }
          ],
          "memo": "Office Supplies",
          "paid_at": "2024-05-15T14:02:28.298Z",
          "payment": {
            "amount": {
              "amount": 96993,
              "currency_code": "USD"
            },
            "effective_date": "2024-05-13T00:00:00+00:00",
            "payment_date": "2024-05-13T00:00:00+00:00",
            "payment_method": "ACH",
            "trace_id": {
              "descriptor": "ACH Trace ID",
              "trace_id": "076921900257224"
            }
          },
          "posting_date": "2024-05-12T00:00:00+00:00",
          "remote_id": null,
          "status": "OPEN",
          "sync_status": "NOT_SYNCED",
          "vendor": {
            "remote_code": "AMZON12",
            "remote_id": "Amazon",
            "remote_name": "Amazon",
            "type": "BUSINESS"
          },
          "vendor_contact_id": "ef825336-820e-4dd5-9d7f-0fc508e978c9",
          "vendor_memo": "Invoice #432 - July 2020"
        },
        "properties": {
          "accounting_date": {
            "description": "The date for the bill for accounting purposes. If not specified, falls back to the bill issue date.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "accounting_field_selections": {
            "description": "List of accounting field options selected to code the bill.",
            "items": {
              "$ref": "#/components/schemas/ApiAccountingFieldSelection"
            },
            "type": "array"
          },
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Amount of the bill.",
            "readOnly": true
          },
          "approval_status": {
            "description": "Approval status of the bill.",
            "enum": ["APPROVED", "INITIALIZED", "PENDING", "REJECTED", "TERMINATED"],
            "nullable": true,
            "type": "string"
          },
          "archived_at": {
            "description": "The datetime the bill was archived.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "bill_owner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiBillOwner"
              }
            ],
            "description": "Information about the bill owner."
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "deep_link_url": {
            "description": "Link to bill in ERP, if exists.",
            "type": "string"
          },
          "due_at": {
            "format": "date-time",
            "type": "string"
          },
          "entity_id": {
            "description": "Associated business entity.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "entities",
              "type": "many-to-one"
            }
          },
          "fx_conversion_rate": {
            "description": "FX conversion rate from bill invoice currency to payer currency.",
            "format": "decimal",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "inventory_line_items": {
            "description": "List of inventory line items related to the bill.",
            "items": {
              "$ref": "#/components/schemas/ApiBillInventoryLineItem"
            },
            "type": "array"
          },
          "invoice_number": {
            "description": "The invoice number on the bill.",
            "type": "string"
          },
          "invoice_urls": {
            "description": "Pre-signed urls to download invoice files.",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "issued_at": {
            "description": "The date the bill was issued on invoice.",
            "format": "date-time",
            "type": "string"
          },
          "line_items": {
            "description": "List of line items related to the bill.",
            "items": {
              "$ref": "#/components/schemas/ApiBillLineItem"
            },
            "type": "array"
          },
          "memo": {
            "description": "Memo of the bill.",
            "type": "string"
          },
          "paid_at": {
            "description": "The datetime the bill's payment status is set to PAID. None if the bill's payment status is OPEN",
            "format": "date-time",
            "type": "string"
          },
          "payment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiBillPayment"
              }
            ],
            "description": "Payment information of the bill.",
            "nullable": true
          },
          "posting_date": {
            "description": "The date the bill was posted to the ERP. Alternatively known as accounting date, accounting sync date.",
            "format": "date-time",
            "type": "string"
          },
          "remote_id": {
            "description": "The external ID that identifies the bill on client's side.",
            "type": "string"
          },
          "status": {
            "enum": ["OPEN", "PAID"],
            "type": "string"
          },
          "sync_status": {
            "description": "Sync status of the bill.",
            "enum": ["BILL_AND_PAYMENT_SYNCED", "BILL_SYNCED", "NOT_SYNCED"],
            "readOnly": true,
            "type": "string"
          },
          "vendor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiBillVendor"
              }
            ],
            "description": "Vendor information of the bill."
          },
          "vendor_contact_id": {
            "description": "Unique identifier of associated vendor contact.",
            "format": "uuid",
            "nullable": true,
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "vendor_contacts",
              "type": "many-to-one"
            }
          },
          "vendor_memo": {
            "description": "Memo to the vendor.",
            "type": "string"
          }
        },
        "required": [
          "accounting_date",
          "accounting_field_selections",
          "amount",
          "approval_status",
          "archived_at",
          "bill_owner",
          "created_at",
          "due_at",
          "entity_id",
          "fx_conversion_rate",
          "id",
          "inventory_line_items",
          "invoice_urls",
          "issued_at",
          "line_items",
          "payment",
          "status",
          "sync_status",
          "vendor",
          "vendor_contact_id"
        ],
        "type": "object",
        "x-resource-name": "bills"
      },
      "BlockGroup": {
        "properties": {
          "available_operands": {
            "items": {
              "$ref": "#/components/schemas/AvailableOperand"
            },
            "readOnly": true,
            "type": "array"
          },
          "has_been_visited": {
            "readOnly": true,
            "type": "boolean"
          },
          "identifier": {
            "nullable": true,
            "type": "string"
          },
          "metadata": {},
          "uuid": {
            "format": "uuid",
            "type": "string"
          },
          "vertex_type": {
            "enum": ["BLOCK_GROUP"],
            "type": "string"
          }
        },
        "required": ["available_operands", "uuid", "vertex_type"],
        "type": "object"
      },
      "BoolValue": {
        "properties": {
          "child_type": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "enum": ["BOOL"],
            "type": "string"
          },
          "value": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": ["type"],
        "type": "object"
      },
      "BooleanCellContentsForDisplay": {
        "properties": {
          "display_name": {
            "type": "string"
          },
          "type": {
            "default": "boolean",
            "enum": ["boolean"],
            "type": "string"
          },
          "value": {
            "type": "boolean"
          }
        },
        "required": ["display_name", "type", "value"],
        "type": "object"
      },
      "BooleanValueSchema": {
        "properties": {
          "value": {
            "title": "Value",
            "type": "boolean"
          }
        },
        "required": ["value"],
        "title": "BooleanValueSchema",
        "type": "object"
      },
      "Business": {
        "example": {
          "active": true,
          "billing_address": {
            "address1": "123 Main St",
            "city": "New York City",
            "country": "US",
            "postal_code": "10003",
            "state": "NY"
          },
          "business_name_legal": "Sushi Luncheonette",
          "business_name_on_card": "Sushi Luncheonette",
          "created_time": "2022-08-20T16:54:29+00:00",
          "enforce_sso": false,
          "id": "9abffcf0-dd7d-42f0-b806-ce0502ab6496",
          "initial_approved_limit": 2000000,
          "is_integrated_with_slack": false,
          "limit_locked": false,
          "phone": "8014441234",
          "website": "www.ramp.com"
        },
        "properties": {
          "active": {
            "description": "Whether the business account is active.",
            "type": "boolean"
          },
          "billing_address": {
            "description": "Billing address of the business.",
            "type": "object"
          },
          "business_name_legal": {
            "description": "Legal name of the business entity.",
            "type": "string"
          },
          "business_name_on_card": {
            "description": "Business name that appears on issued cards.",
            "type": "string"
          },
          "created_time": {
            "description": "When the business account was created.",
            "format": "date-time",
            "type": "string"
          },
          "enforce_sso": {
            "description": "Whether single sign-on is enforced for the business.",
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for the business.",
            "format": "uuid",
            "type": "string"
          },
          "initial_approved_limit": {
            "description": "Initial credit limit approved for the business.",
            "type": "integer"
          },
          "is_integrated_with_slack": {
            "description": "Whether the business has integrated with Slack.",
            "type": "boolean"
          },
          "is_reimbursements_enabled": {
            "description": "Whether reimbursements feature is enabled for the business.",
            "type": "boolean"
          },
          "limit_locked": {
            "description": "Whether the credit limit is locked and cannot be modified.",
            "type": "boolean"
          },
          "phone": {
            "description": "Primary contact phone number for the business.",
            "type": "string"
          },
          "website": {
            "description": "Company website URL.",
            "type": "string"
          }
        },
        "required": ["is_reimbursements_enabled"],
        "type": "object",
        "x-resource-name": "businesses"
      },
      "BusinessBalance": {
        "example": {
          "available_card_limit": 2000000,
          "available_flex_limit": 0,
          "balance_including_pending": 6271.22,
          "card_balance_excluding_pending": 4941.29,
          "card_balance_including_pending": 6271.22,
          "card_limit": 2000000,
          "flex_balance": 0,
          "flex_limit": 0,
          "float_balance_excluding_pending": 0,
          "global_limit": 2000000,
          "max_balance": 2000000,
          "next_billing_date": "09/17/2022",
          "prev_billing_date": "08/21/2022",
          "statement_balance": 4941.29
        },
        "properties": {
          "available_card_limit": {
            "description": "Remaining available card spending limit.",
            "type": "number"
          },
          "available_flex_limit": {
            "description": "Remaining available flex spending limit.",
            "type": "number"
          },
          "balance_including_pending": {
            "description": "Total balance including pending transactions.",
            "type": "number"
          },
          "card_balance_excluding_pending": {
            "description": "Current card balance excluding pending transactions.",
            "type": "number"
          },
          "card_balance_including_pending": {
            "description": "Current card balance including pending transactions.",
            "type": "number"
          },
          "card_limit": {
            "description": "Maximum allowed card spending limit.",
            "type": "number"
          },
          "flex_balance": {
            "description": "Current balance of flex spending.",
            "type": "number"
          },
          "flex_limit": {
            "description": "Maximum allowed flex spending limit.",
            "type": "number"
          },
          "float_balance_excluding_pending": {
            "description": "Float account balance excluding pending transactions.",
            "type": "number"
          },
          "global_limit": {
            "description": "Overall spending limit for the business.",
            "type": "number"
          },
          "max_balance": {
            "description": "Maximum balance allowed for the business.",
            "type": "number"
          },
          "next_billing_date": {
            "description": "Date of the next billing cycle.",
            "type": "string"
          },
          "prev_billing_date": {
            "description": "Date of the previous billing cycle.",
            "type": "string"
          },
          "statement_balance": {
            "description": "Balance from the most recent statement.",
            "type": "number"
          }
        },
        "type": "object"
      },
      "Card": {
        "example": {
          "card_program_id": null,
          "cardholder_id": "3a5b1f62-988f-4190-bf31-b7ae87c5df42",
          "cardholder_name": "Julie Phillip",
          "created_at": "2022-05-04T00:00:00+00:00",
          "display_name": "T&E",
          "entity_id": "c6c61be9-f278-47bc-a814-f98a7fc2dfdc",
          "expiration": "0227",
          "fulfillment": {
            "fulfillment_status": "ISSUED",
            "shipping": {
              "recipient_address": {
                "address1": "123 Main St",
                "city": "New York City",
                "country": "US",
                "first_name": "Julie",
                "last_name": "Phillip",
                "postal_code": "10003",
                "state": "NY"
              }
            },
            "shipping_date": null,
            "shipping_eta": null,
            "shipping_tracking_url": null
          },
          "has_program_overridden": false,
          "id": "d8135cfe-0396-4b2d-b2cf-ad809fb04731",
          "is_physical": false,
          "last_four": "3751",
          "spending_restrictions": {
            "amount": 5000,
            "auto_lock_date": null,
            "blocked_categories": [],
            "categories": [],
            "interval": "MONTHLY",
            "suspended": false,
            "transaction_amount_limit": null
          },
          "state": "ACTIVE"
        },
        "properties": {
          "card_program_id": {
            "description": "Unique identifier of the card program.",
            "format": "uuid",
            "nullable": true,
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "card_programs",
              "type": "many-to-one"
            }
          },
          "cardholder_id": {
            "description": "Unique identifier of the card holder.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "users",
              "type": "many-to-one"
            }
          },
          "cardholder_name": {
            "description": "Card holder's full name.",
            "type": "string"
          },
          "created_at": {
            "description": "Date time at which the card is created. It conforms to ISO8601 format",
            "format": "date-time",
            "type": "string"
          },
          "display_name": {
            "description": "Cosmetic display name of the card.",
            "readOnly": true,
            "type": "string"
          },
          "entity_id": {
            "description": "Unique identifier of the associated business entity.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "entities",
              "type": "many-to-one"
            }
          },
          "expiration": {
            "description": "Expiration date in the format of MMYY.",
            "readOnly": true,
            "type": "string"
          },
          "fulfillment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiCardFulfillment"
              }
            ],
            "description": "Fulfillment details of a Ramp card. For physical cards only.",
            "readOnly": true
          },
          "has_program_overridden": {
            "description": "Whether the card has overridden the default settings from its card program.",
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier of the card.",
            "format": "uuid",
            "type": "string"
          },
          "is_physical": {
            "type": "boolean"
          },
          "last_four": {
            "description": "Last four digits of the card number.",
            "readOnly": true,
            "type": "string"
          },
          "spending_restrictions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiCardSpendingRestrictionsDump"
              }
            ],
            "description": "Specifies the spend restrictions on a Ramp card.",
            "readOnly": true
          },
          "state": {
            "description": "State of the card",
            "enum": ["ACTIVE", "CHIP_LOCKED", "SUSPENDED", "TERMINATED", "UNACTIVATED"],
            "type": "string"
          }
        },
        "required": [
          "card_program_id",
          "display_name",
          "expiration",
          "has_program_overridden",
          "last_four"
        ],
        "type": "object",
        "x-resource-name": "cards"
      },
      "CardDeferredTask": {
        "example": {
          "context": {
            "acting_user_id": "c45f22e0-4c15-4a64-8580-3819e89baf6d"
          },
          "data": {
            "card_id": "f4efe11c-221f-4b49-a1e4-33eaf96a49ee"
          },
          "id": "2d68eb67-f6eb-4284-8683-7d530c77a5a6",
          "status": "SUCCESS"
        },
        "properties": {
          "context": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiCardDeferredTaskContext"
              }
            ],
            "description": "Further context for the deferred task."
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiCardDeferredTaskData"
              }
            ],
            "description": "Detailed data of the deferred task."
          },
          "id": {
            "description": "Unique identifier of the deferred task.",
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "description": "Status of the deferred task. It could be one of the following values: STARTED, IN_PROGRESS, ERROR, SUCCESS",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CardFulfillmentRequestBody": {
        "properties": {
          "card_personalization": {
            "$ref": "#/components/schemas/CardPersonalizationRequestBody"
          },
          "cardholder_uuid": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "shipping": {
            "$ref": "#/components/schemas/CardShippingRequestBody"
          }
        },
        "type": "object"
      },
      "CardPersonalization": {
        "properties": {
          "text": {
            "$ref": "#/components/schemas/CardPersonalizationText"
          }
        },
        "type": "object"
      },
      "CardPersonalizationNameLine": {
        "properties": {
          "value": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CardPersonalizationNameLineRequestBody": {
        "properties": {
          "value": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CardPersonalizationRequestBody": {
        "properties": {
          "text": {
            "$ref": "#/components/schemas/CardPersonalizationTextRequestBody"
          }
        },
        "type": "object"
      },
      "CardPersonalizationText": {
        "properties": {
          "name_line_1": {
            "$ref": "#/components/schemas/CardPersonalizationNameLine"
          },
          "name_line_2": {
            "$ref": "#/components/schemas/CardPersonalizationNameLine"
          }
        },
        "type": "object"
      },
      "CardPersonalizationTextRequestBody": {
        "properties": {
          "name_line_1": {
            "$ref": "#/components/schemas/CardPersonalizationNameLineRequestBody"
          },
          "name_line_2": {
            "$ref": "#/components/schemas/CardPersonalizationNameLineRequestBody"
          }
        },
        "type": "object"
      },
      "CardShipping": {
        "properties": {
          "method": {
            "nullable": true,
            "type": "string"
          },
          "recipient_address": {
            "$ref": "#/components/schemas/CardShippingAddress"
          },
          "recipient_address_verification_state": {
            "enum": ["NOT_VERIFIED", "OVERRIDEN", "VERIFIED"],
            "nullable": true,
            "type": "string"
          },
          "return_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardShippingAddress"
              }
            ],
            "nullable": true
          }
        },
        "type": "object"
      },
      "CardShippingAddress": {
        "properties": {
          "address1": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "address2": {
            "maxLength": 50,
            "minLength": 0,
            "nullable": true,
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "phone": {
            "nullable": true,
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "state": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["address1", "city", "country", "first_name", "last_name", "postal_code"],
        "type": "object"
      },
      "CardShippingAddressRequestBody": {
        "properties": {
          "address1": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "address2": {
            "maxLength": 50,
            "minLength": 0,
            "nullable": true,
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "phone": {
            "nullable": true,
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "state": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["address1", "city", "country", "first_name", "last_name", "postal_code"],
        "type": "object"
      },
      "CardShippingRequestBody": {
        "properties": {
          "method": {
            "nullable": true,
            "type": "string"
          },
          "recipient_address": {
            "$ref": "#/components/schemas/CardShippingAddressRequestBody"
          },
          "recipient_address_verification_state": {
            "enum": ["NOT_VERIFIED", "OVERRIDEN", "VERIFIED"],
            "nullable": true,
            "type": "string"
          },
          "return_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardShippingAddressRequestBody"
              }
            ],
            "nullable": true
          }
        },
        "type": "object"
      },
      "Cashback": {
        "properties": {
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Amount of the cashback.",
            "readOnly": true
          },
          "created_at": {
            "description": "Timestamp when the cashback was created (ISO8601 format).",
            "format": "date-time",
            "type": "string"
          },
          "entity_id": {
            "description": "Business entity associated with this cashback.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "entities",
              "type": "many-to-one"
            }
          },
          "id": {
            "description": "Unique identifier for the cashback.",
            "format": "uuid",
            "type": "string"
          },
          "sync_status": {
            "description": "Current sync status of the cashback.",
            "enum": ["NOT_SYNC_READY", "SYNCED", "SYNC_READY"],
            "readOnly": true,
            "type": "string"
          }
        },
        "required": ["amount", "sync_status"],
        "type": "object",
        "x-resource-name": "cashbacks"
      },
      "ColumnNameAndContentsRequestBody": {
        "properties": {
          "contents": {
            "default": null,
            "description": "The value to insert into the cell. If the column is a reference, this should be the external key of the row to reference.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/NativeRowIdentifierRequestBody"
              },
              {
                "type": "boolean"
              },
              {
                "type": "string"
              }
            ]
          },
          "name": {
            "description": "The name of the column to write values to.",
            "type": "string"
          }
        },
        "required": ["name"],
        "type": "object"
      },
      "Condition": {
        "properties": {
          "condition": {
            "$ref": "#/components/schemas/ConditionGroup"
          },
          "then": {
            "items": {
              "$ref": "#/components/schemas/Vertex"
            },
            "type": "array"
          }
        },
        "required": ["condition", "then"],
        "type": "object"
      },
      "ConditionGroup": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ConditionItem"
            },
            "type": "array"
          },
          "operator": {
            "enum": ["ALL", "ANY", "NOT"],
            "type": "string"
          }
        },
        "required": ["items", "operator"],
        "type": "object"
      },
      "ConditionItem": {
        "discriminator": {
          "mapping": {
            "CONDITION": "#/components/schemas/AtomicCondition",
            "CONDITION_GROUP": "#/components/schemas/NestedConditionGroup"
          },
          "propertyName": "condition_item_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/AtomicCondition"
          },
          {
            "$ref": "#/components/schemas/NestedConditionGroup"
          }
        ]
      },
      "ConditionVertex": {
        "properties": {
          "available_operands": {
            "items": {
              "$ref": "#/components/schemas/AvailableOperand"
            },
            "readOnly": true,
            "type": "array"
          },
          "has_been_visited": {
            "readOnly": true,
            "type": "boolean"
          },
          "identifier": {
            "nullable": true,
            "type": "string"
          },
          "metadata": {},
          "uuid": {
            "format": "uuid",
            "type": "string"
          },
          "vertex_type": {
            "enum": ["CONDITION"],
            "type": "string"
          }
        },
        "required": ["available_operands", "uuid", "vertex_type"],
        "type": "object"
      },
      "ContactValueSchema": {
        "properties": {
          "email": {
            "description": "Contact email",
            "format": "email",
            "title": "Email",
            "type": "string"
          },
          "first_name": {
            "default": null,
            "nullable": true,
            "title": "First Name",
            "type": "string"
          },
          "last_name": {
            "default": null,
            "nullable": true,
            "title": "Last Name",
            "type": "string"
          },
          "phone_number": {
            "default": null,
            "description": "Contact phone number",
            "nullable": true,
            "title": "Phone Number",
            "type": "string"
          }
        },
        "required": ["email"],
        "title": "ContactValueSchema",
        "type": "object"
      },
      "CreatedTableColumnResponse": {
        "properties": {
          "column_id": {
            "description": "The id of the created column",
            "type": "string"
          }
        },
        "required": ["column_id"],
        "type": "object"
      },
      "CurrencyAmount": {
        "properties": {
          "amount": {
            "description": "the amount of money represented in the smallest denomination of the currency. For example, when the currency is USD, then the amount is expressed in cents.",
            "type": "integer"
          },
          "currency_code": {
            "default": "USD",
            "description": "The type of currency, in ISO 4217 format. e.g. USD for US dollars",
            "type": "string"
          }
        },
        "required": ["amount", "currency_code"],
        "type": "object"
      },
      "CurrencyAmountRequestBody": {
        "properties": {
          "amount": {
            "description": "the amount of money represented in the smallest denomination of the currency. For example, when the currency is USD, then the amount is expressed in cents.",
            "type": "integer"
          },
          "currency_code": {
            "default": "USD",
            "description": "The type of currency, in ISO 4217 format. e.g. USD for US dollars",
            "type": "string"
          }
        },
        "required": ["amount"],
        "type": "object"
      },
      "CustomCellOutputWithLoadedReferences": {
        "properties": {
          "column_display_name": {
            "description": "The display name of the column",
            "type": "string"
          },
          "column_id": {
            "description": "The id of the column",
            "type": "string"
          },
          "value": {
            "description": "The contents of the cell",
            "oneOf": [
              {
                "$ref": "#/components/schemas/BooleanCellContentsForDisplay"
              },
              {
                "$ref": "#/components/schemas/CustomTableReferenceCellContentsForDisplay"
              },
              {
                "$ref": "#/components/schemas/NativeTableReferenceCellContentsForDisplay"
              },
              {
                "$ref": "#/components/schemas/TextCellContentsForDisplay"
              }
            ]
          }
        },
        "required": ["column_display_name", "column_id", "value"],
        "type": "object"
      },
      "CustomFieldOption": {
        "example": {
          "code": "20001",
          "created_at": "2019-08-28T14:15:22+00:00",
          "id": "123",
          "is_active": true,
          "ramp_id": "649b6731-33c6-4ff5-8a5d-2333fcc90ace",
          "updated_at": "2020-08-28T14:40:12+00:00",
          "value": "Office/Admin:Phone & Internet"
        },
        "properties": {
          "code": {
            "description": "Code of the custom field option; Usually it is a unique identifier for the custom field option in the remote ERP system.",
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "display_name": {
            "description": "Display name of the custom field option.",
            "type": "string"
          },
          "id": {
            "description": "Remote/external ID of custom accounting field option from ERP system.",
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          },
          "ramp_id": {
            "description": "id to uniquely identify a custom field option within Ramp system",
            "format": "uuid",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "value": {
            "description": "A vendor is a person or business that provides goods or services",
            "type": "string"
          },
          "visibility": {
            "description": "Visibility of the custom field option.",
            "enum": ["HIDDEN", "VISIBLE"],
            "type": "string"
          }
        },
        "type": "object"
      },
      "CustomFormAddressFieldResponseDumpSchema": {
        "properties": {
          "field_type": {
            "enum": ["ADDRESS"],
            "title": "Field Type",
            "type": "string"
          },
          "mapped_fields": {
            "items": {
              "$ref": "#/components/schemas/CustomFormAddressMappedFieldSchema"
            },
            "title": "Mapped Fields",
            "type": "array"
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressValueSchema"
              }
            ],
            "nullable": true
          }
        },
        "required": ["field_type", "value"],
        "title": "CustomFormAddressFieldResponseDumpSchema",
        "type": "object"
      },
      "CustomFormAddressMappedFieldSchema": {
        "discriminator": {
          "mapping": {
            "PAYEE__CUSTOM_FIELD": "#/components/schemas/PayeeCustomFieldMappedFieldSchema",
            "PURCHASE_ORDER__BILL_TO_ADDRESS": "#/components/schemas/PurchaseOrderBillToAddressMappedFieldSchema",
            "PURCHASE_ORDER__PAYEE_ADDRESS": "#/components/schemas/PurchaseOrderPayeeAddressMappedFieldSchema",
            "PURCHASE_ORDER__SHIP_TO_ADDRESS": "#/components/schemas/PurchaseOrderShipToAddressMappedFieldSchema"
          },
          "propertyName": "mapped_field"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/PayeeCustomFieldMappedFieldSchema"
          },
          {
            "$ref": "#/components/schemas/PurchaseOrderBillToAddressMappedFieldSchema"
          },
          {
            "$ref": "#/components/schemas/PurchaseOrderPayeeAddressMappedFieldSchema"
          },
          {
            "$ref": "#/components/schemas/PurchaseOrderShipToAddressMappedFieldSchema"
          }
        ],
        "title": "CustomFormAddressMappedFieldSchema"
      },
      "CustomFormBooleanFieldResponseDumpSchema": {
        "properties": {
          "field_type": {
            "enum": ["BOOLEAN"],
            "title": "Field Type",
            "type": "string"
          },
          "mapped_fields": {
            "items": {
              "$ref": "#/components/schemas/CustomFormBooleanMappedFieldSchema"
            },
            "title": "Mapped Fields",
            "type": "array"
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BooleanValueSchema"
              }
            ],
            "nullable": true
          }
        },
        "required": ["field_type", "value"],
        "title": "CustomFormBooleanFieldResponseDumpSchema",
        "type": "object"
      },
      "CustomFormBooleanMappedFieldSchema": {
        "discriminator": {
          "mapping": {
            "PAYEE__CUSTOM_FIELD": "#/components/schemas/PayeeCustomFieldMappedFieldSchema",
            "SPEND_ALLOCATION__IS_SHAREABLE": "#/components/schemas/SpendAllocationIsShareableMappedFieldSchema"
          },
          "propertyName": "mapped_field"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/PayeeCustomFieldMappedFieldSchema"
          },
          {
            "$ref": "#/components/schemas/SpendAllocationIsShareableMappedFieldSchema"
          }
        ],
        "title": "CustomFormBooleanMappedFieldSchema"
      },
      "CustomFormContactFieldResponseDumpSchema": {
        "properties": {
          "field_type": {
            "enum": ["CONTACT"],
            "title": "Field Type",
            "type": "string"
          },
          "mapped_fields": {
            "items": {
              "$ref": "#/components/schemas/CustomFormContactMappedFieldSchema"
            },
            "title": "Mapped Fields",
            "type": "array"
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactValueSchema"
              }
            ],
            "nullable": true
          }
        },
        "required": ["field_type", "value"],
        "title": "CustomFormContactFieldResponseDumpSchema",
        "type": "object"
      },
      "CustomFormContactMappedFieldSchema": {
        "discriminator": {
          "mapping": {
            "PURCHASE_ORDER__BILLING_CONTACT": "#/components/schemas/PurchaseOrderBillingContactMappedFieldSchema",
            "PURCHASE_ORDER__PAYEE_CONTACT": "#/components/schemas/PurchaseOrderPayeeContactMappedFieldSchema",
            "PURCHASE_ORDER__SHIPPING_CONTACT": "#/components/schemas/PurchaseOrderShippingContactMappedFieldSchema"
          },
          "propertyName": "mapped_field"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/PurchaseOrderBillingContactMappedFieldSchema"
          },
          {
            "$ref": "#/components/schemas/PurchaseOrderPayeeContactMappedFieldSchema"
          },
          {
            "$ref": "#/components/schemas/PurchaseOrderShippingContactMappedFieldSchema"
          }
        ],
        "title": "CustomFormContactMappedFieldSchema"
      },
      "CustomFormDateFieldResponseDumpSchema": {
        "properties": {
          "field_type": {
            "enum": ["DATE"],
            "title": "Field Type",
            "type": "string"
          },
          "mapped_fields": {
            "items": {
              "$ref": "#/components/schemas/CustomFormDateMappedFieldSchema"
            },
            "title": "Mapped Fields",
            "type": "array"
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StringValueSchema"
              }
            ],
            "nullable": true
          }
        },
        "required": ["field_type", "value"],
        "title": "CustomFormDateFieldResponseDumpSchema",
        "type": "object"
      },
      "CustomFormDateMappedFieldSchema": {
        "discriminator": {
          "mapping": {
            "PAYEE__CUSTOM_FIELD": "#/components/schemas/PayeeCustomFieldMappedFieldSchema",
            "PURCHASE_ORDER__PROMISE_DATE": "#/components/schemas/PurchaseOrderPromiseDateMappedFieldSchema",
            "SPEND_ALLOCATION__END_DATE": "#/components/schemas/SpendAllocationEndDateMappedFieldSchema",
            "SPEND_ALLOCATION__START_DATE": "#/components/schemas/SpendAllocationStartDateMappedFieldSchema"
          },
          "propertyName": "mapped_field"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/PayeeCustomFieldMappedFieldSchema"
          },
          {
            "$ref": "#/components/schemas/PurchaseOrderPromiseDateMappedFieldSchema"
          },
          {
            "$ref": "#/components/schemas/SpendAllocationEndDateMappedFieldSchema"
          },
          {
            "$ref": "#/components/schemas/SpendAllocationStartDateMappedFieldSchema"
          }
        ],
        "title": "CustomFormDateMappedFieldSchema"
      },
      "CustomFormDepartmentFieldResponseDumpSchema": {
        "properties": {
          "field_type": {
            "enum": ["DEPARTMENT"],
            "title": "Field Type",
            "type": "string"
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DepartmentValueDumpSchema"
              }
            ],
            "nullable": true
          }
        },
        "required": ["field_type", "value"],
        "title": "CustomFormDepartmentFieldResponseDumpSchema",
        "type": "object"
      },
      "CustomFormEmailFieldResponseDumpSchema": {
        "properties": {
          "field_type": {
            "enum": ["EMAIL"],
            "title": "Field Type",
            "type": "string"
          },
          "mapped_fields": {
            "items": {
              "$ref": "#/components/schemas/CustomFormEmailMappedFieldSchema"
            },
            "title": "Mapped Fields",
            "type": "array"
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StringValueSchema"
              }
            ],
            "nullable": true
          }
        },
        "required": ["field_type", "value"],
        "title": "CustomFormEmailFieldResponseDumpSchema",
        "type": "object"
      },
      "CustomFormEmailMappedFieldSchema": {
        "discriminator": {
          "mapping": {
            "PAYEE__CUSTOM_FIELD": "#/components/schemas/PayeeCustomFieldMappedFieldSchema"
          },
          "propertyName": "mapped_field"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/PayeeCustomFieldMappedFieldSchema"
          }
        ],
        "title": "CustomFormEmailMappedFieldSchema"
      },
      "CustomFormFieldMappingMetadataRestrictionControlTypeSchema": {
        "properties": {
          "restriction_control_type": {
            "$ref": "#/components/schemas/CustomFormMappingMetadataRestrictionControlType"
          }
        },
        "required": ["restriction_control_type"],
        "title": "CustomFormFieldMappingMetadataRestrictionControlTypeSchema",
        "type": "object"
      },
      "CustomFormFieldResponseDumpSchemaV2": {
        "discriminator": {
          "mapping": {
            "ADDRESS": "#/components/schemas/CustomFormAddressFieldResponseDumpSchema",
            "BOOLEAN": "#/components/schemas/CustomFormBooleanFieldResponseDumpSchema",
            "CONTACT": "#/components/schemas/CustomFormContactFieldResponseDumpSchema",
            "DATE": "#/components/schemas/CustomFormDateFieldResponseDumpSchema",
            "DEPARTMENT": "#/components/schemas/CustomFormDepartmentFieldResponseDumpSchema",
            "EMAIL": "#/components/schemas/CustomFormEmailFieldResponseDumpSchema",
            "FILE_UPLOAD": "#/components/schemas/CustomFormFileUploadFieldResponseDumpSchema",
            "LINK": "#/components/schemas/CustomFormLinkFieldResponseDumpSchema",
            "MERCHANT": "#/components/schemas/CustomFormMerchantFieldResponseDumpSchema",
            "MERCHANT_CATEGORY": "#/components/schemas/CustomFormMerchantCategoryFieldResponseDumpSchema",
            "MONETARY_AMOUNT": "#/components/schemas/CustomFormMonetaryAmountFieldResponseDumpSchema",
            "NUMBER": "#/components/schemas/CustomFormNumberFieldResponseDumpSchema",
            "PARAGRAPH": "#/components/schemas/CustomFormParagraphFieldResponseDumpSchema",
            "TEXT": "#/components/schemas/CustomFormTextFieldResponseDumpSchema",
            "TEXT_MULTI_SELECT": "#/components/schemas/CustomFormTextMultiSelectFieldResponseDumpSchema",
            "TEXT_SINGLE_SELECT": "#/components/schemas/CustomFormTextSingleSelectFieldResponseDumpSchema",
            "VENDOR": "#/components/schemas/CustomFormVendorFieldResponseDumpSchema"
          },
          "propertyName": "field_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/CustomFormAddressFieldResponseDumpSchema"
          },
          {
            "$ref": "#/components/schemas/CustomFormBooleanFieldResponseDumpSchema"
          },
          {
            "$ref": "#/components/schemas/CustomFormContactFieldResponseDumpSchema"
          },
          {
            "$ref": "#/components/schemas/CustomFormDateFieldResponseDumpSchema"
          },
          {
            "$ref": "#/components/schemas/CustomFormDepartmentFieldResponseDumpSchema"
          },
          {
            "$ref": "#/components/schemas/CustomFormEmailFieldResponseDumpSchema"
          },
          {
            "$ref": "#/components/schemas/CustomFormFileUploadFieldResponseDumpSchema"
          },
          {
            "$ref": "#/components/schemas/CustomFormLinkFieldResponseDumpSchema"
          },
          {
            "$ref": "#/components/schemas/CustomFormMerchantCategoryFieldResponseDumpSchema"
          },
          {
            "$ref": "#/components/schemas/CustomFormMerchantFieldResponseDumpSchema"
          },
          {
            "$ref": "#/components/schemas/CustomFormMonetaryAmountFieldResponseDumpSchema"
          },
          {
            "$ref": "#/components/schemas/CustomFormNumberFieldResponseDumpSchema"
          },
          {
            "$ref": "#/components/schemas/CustomFormParagraphFieldResponseDumpSchema"
          },
          {
            "$ref": "#/components/schemas/CustomFormTextFieldResponseDumpSchema"
          },
          {
            "$ref": "#/components/schemas/CustomFormTextMultiSelectFieldResponseDumpSchema"
          },
          {
            "$ref": "#/components/schemas/CustomFormTextSingleSelectFieldResponseDumpSchema"
          },
          {
            "$ref": "#/components/schemas/CustomFormVendorFieldResponseDumpSchema"
          }
        ],
        "title": "CustomFormFieldResponseDumpSchemaV2"
      },
      "CustomFormFieldResponseWrapperDumpSchemaV2": {
        "properties": {
          "conditions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkflowsCondition"
              }
            ],
            "nullable": true,
            "title": "Conditions"
          },
          "description": {
            "nullable": true,
            "title": "Description",
            "type": "string"
          },
          "field": {
            "$ref": "#/components/schemas/CustomFormFieldResponseDumpSchemaV2"
          },
          "field_id": {
            "title": "Field Id",
            "type": "string"
          },
          "is_mapped_to_ironclad_field": {
            "default": false,
            "title": "Is Mapped To Ironclad Field",
            "type": "boolean"
          },
          "is_used_in_approval_workflow_condition": {
            "default": false,
            "title": "Is Used In Approval Workflow Condition",
            "type": "boolean"
          },
          "is_used_in_custom_form_workflow_condition": {
            "default": false,
            "title": "Is Used In Custom Form Workflow Condition",
            "type": "boolean"
          },
          "label": {
            "title": "Label",
            "type": "string"
          },
          "required": {
            "title": "Required",
            "type": "boolean"
          },
          "validation_errors": {
            "items": {
              "$ref": "#/components/schemas/CustomFormFieldValidationErrorSchemaV2"
            },
            "title": "Validation Errors",
            "type": "array"
          },
          "value_display_string": {
            "nullable": true,
            "readOnly": true,
            "title": "Value Display String",
            "type": "string"
          }
        },
        "required": [
          "conditions",
          "description",
          "field",
          "field_id",
          "label",
          "required",
          "value_display_string"
        ],
        "title": "CustomFormFieldResponseWrapperDumpSchemaV2",
        "type": "object"
      },
      "CustomFormFieldValidationErrorSchemaV2": {
        "properties": {
          "message": {
            "title": "Message",
            "type": "string"
          }
        },
        "required": ["message"],
        "title": "CustomFormFieldValidationErrorSchemaV2",
        "type": "object"
      },
      "CustomFormFileUploadFieldResponseDumpSchema": {
        "properties": {
          "document_category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PayeeDocumentCategory"
              }
            ],
            "default": null,
            "nullable": true
          },
          "field_type": {
            "enum": ["FILE_UPLOAD"],
            "title": "Field Type",
            "type": "string"
          },
          "mapped_fields": {
            "items": {
              "$ref": "#/components/schemas/CustomFormFileUploadMappedFieldSchema"
            },
            "title": "Mapped Fields",
            "type": "array"
          },
          "value": {
            "items": {
              "$ref": "#/components/schemas/FileValueDumpSchema"
            },
            "nullable": true,
            "title": "Value",
            "type": "array"
          }
        },
        "required": ["field_type", "value"],
        "title": "CustomFormFileUploadFieldResponseDumpSchema",
        "type": "object"
      },
      "CustomFormFileUploadMappedFieldSchema": {
        "discriminator": {
          "mapping": {
            "PURCHASE_ORDER__ATTACHMENTS": "#/components/schemas/PurchaseOrderAttachmentsMappedFieldSchema"
          },
          "propertyName": "mapped_field"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/PurchaseOrderAttachmentsMappedFieldSchema"
          }
        ],
        "title": "CustomFormFileUploadMappedFieldSchema"
      },
      "CustomFormLinkFieldResponseDumpSchema": {
        "properties": {
          "field_type": {
            "enum": ["LINK"],
            "title": "Field Type",
            "type": "string"
          },
          "mapped_fields": {
            "items": {
              "$ref": "#/components/schemas/CustomFormLinkMappedFieldSchema"
            },
            "title": "Mapped Fields",
            "type": "array"
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StringValueSchema"
              }
            ],
            "nullable": true
          }
        },
        "required": ["field_type", "value"],
        "title": "CustomFormLinkFieldResponseDumpSchema",
        "type": "object"
      },
      "CustomFormLinkMappedFieldSchema": {
        "discriminator": {
          "mapping": {
            "PAYEE__CUSTOM_FIELD": "#/components/schemas/PayeeCustomFieldMappedFieldSchema"
          },
          "propertyName": "mapped_field"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/PayeeCustomFieldMappedFieldSchema"
          }
        ],
        "title": "CustomFormLinkMappedFieldSchema"
      },
      "CustomFormMappingMetadataRestrictionControlType": {
        "enum": ["ALLOWLIST", "BLOCKLIST"],
        "title": "CustomFormMappingMetadataRestrictionControlType",
        "type": "string"
      },
      "CustomFormMerchantCategoryFieldResponseDumpSchema": {
        "properties": {
          "field_type": {
            "enum": ["MERCHANT_CATEGORY"],
            "title": "Field Type",
            "type": "string"
          },
          "mapped_fields": {
            "items": {
              "discriminator": {
                "mapping": {
                  "SPEND_ALLOCATION__MERCHANT_CATEGORY_RESTRICTIONS": "#/components/schemas/SpendAllocationMerchantCategoryRestrictionsMappedFieldResponseSchema",
                  "SPEND_ALLOCATION__MERCHANT_CATEGORY_RESTRICTIONS_ALLOWLIST": "#/components/schemas/SpendAllocationMerchantCategoryRestrictionsAllowListMappedFieldSchema",
                  "SPEND_ALLOCATION__MERCHANT_CATEGORY_RESTRICTIONS_BLOCKLIST": "#/components/schemas/SpendAllocationMerchantCategoryRestrictionsBlockListMappedFieldSchema"
                },
                "propertyName": "mapped_field"
              },
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SpendAllocationMerchantCategoryRestrictionsAllowListMappedFieldSchema"
                },
                {
                  "$ref": "#/components/schemas/SpendAllocationMerchantCategoryRestrictionsBlockListMappedFieldSchema"
                },
                {
                  "$ref": "#/components/schemas/SpendAllocationMerchantCategoryRestrictionsMappedFieldResponseSchema"
                }
              ]
            },
            "title": "Mapped Fields",
            "type": "array"
          },
          "value": {
            "items": {
              "$ref": "#/components/schemas/MerchantCategoryValueDumpSchema"
            },
            "nullable": true,
            "title": "Value",
            "type": "array"
          }
        },
        "required": ["field_type", "value"],
        "title": "CustomFormMerchantCategoryFieldResponseDumpSchema",
        "type": "object"
      },
      "CustomFormMerchantFieldResponseDumpSchema": {
        "properties": {
          "field_type": {
            "enum": ["MERCHANT"],
            "title": "Field Type",
            "type": "string"
          },
          "mapped_fields": {
            "items": {
              "discriminator": {
                "mapping": {
                  "SPEND_ALLOCATION__MERCHANT_RESTRICTIONS": "#/components/schemas/SpendAllocationMerchantRestrictionsMappedFieldResponseSchema",
                  "SPEND_ALLOCATION__MERCHANT_RESTRICTIONS_ALLOWLIST": "#/components/schemas/SpendAllocationMerchantRestrictionsAllowListMappedFieldSchema",
                  "SPEND_ALLOCATION__MERCHANT_RESTRICTIONS_BLOCKLIST": "#/components/schemas/SpendAllocationMerchantRestrictionsBlockListMappedFieldSchema"
                },
                "propertyName": "mapped_field"
              },
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SpendAllocationMerchantRestrictionsAllowListMappedFieldSchema"
                },
                {
                  "$ref": "#/components/schemas/SpendAllocationMerchantRestrictionsBlockListMappedFieldSchema"
                },
                {
                  "$ref": "#/components/schemas/SpendAllocationMerchantRestrictionsMappedFieldResponseSchema"
                }
              ]
            },
            "title": "Mapped Fields",
            "type": "array"
          },
          "value": {
            "items": {
              "$ref": "#/components/schemas/MerchantValueDumpSchema"
            },
            "nullable": true,
            "title": "Value",
            "type": "array"
          }
        },
        "required": ["field_type", "value"],
        "title": "CustomFormMerchantFieldResponseDumpSchema",
        "type": "object"
      },
      "CustomFormMonetaryAmountFieldResponseDumpSchema": {
        "properties": {
          "field_type": {
            "enum": ["MONETARY_AMOUNT"],
            "title": "Field Type",
            "type": "string"
          },
          "mapped_fields": {
            "items": {
              "$ref": "#/components/schemas/CustomFormMonetaryAmountMappedFieldSchema"
            },
            "title": "Mapped Fields",
            "type": "array"
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountValueSchema"
              }
            ],
            "nullable": true
          }
        },
        "required": ["field_type", "value"],
        "title": "CustomFormMonetaryAmountFieldResponseDumpSchema",
        "type": "object"
      },
      "CustomFormMonetaryAmountMappedFieldSchema": {
        "discriminator": {
          "mapping": {
            "PAYEE__CUSTOM_FIELD": "#/components/schemas/PayeeCustomFieldMappedFieldSchema"
          },
          "propertyName": "mapped_field"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/PayeeCustomFieldMappedFieldSchema"
          }
        ],
        "title": "CustomFormMonetaryAmountMappedFieldSchema"
      },
      "CustomFormNumberFieldResponseDumpSchema": {
        "properties": {
          "field_type": {
            "enum": ["NUMBER"],
            "title": "Field Type",
            "type": "string"
          },
          "mapped_fields": {
            "items": {
              "$ref": "#/components/schemas/CustomFormNumberMappedFieldSchema"
            },
            "title": "Mapped Fields",
            "type": "array"
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalValueSchema"
              }
            ],
            "nullable": true
          }
        },
        "required": ["field_type", "value"],
        "title": "CustomFormNumberFieldResponseDumpSchema",
        "type": "object"
      },
      "CustomFormNumberMappedFieldSchema": {
        "discriminator": {
          "mapping": {
            "PAYEE__CUSTOM_FIELD": "#/components/schemas/PayeeCustomFieldMappedFieldSchema",
            "PAYEE__NET_PAYMENT_TERMS": "#/components/schemas/PayeeNetPaymentTermsMappedFieldSchema",
            "PURCHASE_ORDER__NET_PAYMENT_TERMS": "#/components/schemas/PurchaseOrderNetPaymentTermsMappedFieldSchema",
            "SPEND_ALLOCATION__EXPENSE_AMOUNT_LIMIT": "#/components/schemas/SpendAllocationExpenseAmountLimitMappedFieldSchema"
          },
          "propertyName": "mapped_field"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/PayeeCustomFieldMappedFieldSchema"
          },
          {
            "$ref": "#/components/schemas/PayeeNetPaymentTermsMappedFieldSchema"
          },
          {
            "$ref": "#/components/schemas/PurchaseOrderNetPaymentTermsMappedFieldSchema"
          },
          {
            "$ref": "#/components/schemas/SpendAllocationExpenseAmountLimitMappedFieldSchema"
          }
        ],
        "title": "CustomFormNumberMappedFieldSchema"
      },
      "CustomFormParagraphFieldResponseDumpSchema": {
        "properties": {
          "field_type": {
            "enum": ["PARAGRAPH"],
            "title": "Field Type",
            "type": "string"
          },
          "mapped_fields": {
            "items": {
              "$ref": "#/components/schemas/CustomFormParagraphMappedFieldSchema"
            },
            "title": "Mapped Fields",
            "type": "array"
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StringValueSchema"
              }
            ],
            "nullable": true
          }
        },
        "required": ["field_type", "value"],
        "title": "CustomFormParagraphFieldResponseDumpSchema",
        "type": "object"
      },
      "CustomFormParagraphMappedFieldSchema": {
        "discriminator": {
          "mapping": {
            "PAYEE__CUSTOM_FIELD": "#/components/schemas/PayeeCustomFieldMappedFieldSchema",
            "PAYEE__DESCRIPTION": "#/components/schemas/PayeeDescriptionMappedFieldSchema",
            "PURCHASE_ORDER__MEMO": "#/components/schemas/PurchaseOrderMemoMappedFieldSchema"
          },
          "propertyName": "mapped_field"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/PayeeCustomFieldMappedFieldSchema"
          },
          {
            "$ref": "#/components/schemas/PayeeDescriptionMappedFieldSchema"
          },
          {
            "$ref": "#/components/schemas/PurchaseOrderMemoMappedFieldSchema"
          }
        ],
        "title": "CustomFormParagraphMappedFieldSchema"
      },
      "CustomFormStringFieldChoiceDumpSchema": {
        "properties": {
          "value": {
            "$ref": "#/components/schemas/StringValueSchema"
          },
          "value_id": {
            "title": "Value Id",
            "type": "string"
          }
        },
        "required": ["value", "value_id"],
        "title": "CustomFormStringFieldChoiceDumpSchema",
        "type": "object"
      },
      "CustomFormTextFieldResponseDumpSchema": {
        "properties": {
          "field_type": {
            "enum": ["TEXT"],
            "title": "Field Type",
            "type": "string"
          },
          "mapped_fields": {
            "items": {
              "$ref": "#/components/schemas/CustomFormTextMappedFieldSchema"
            },
            "title": "Mapped Fields",
            "type": "array"
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StringValueSchema"
              }
            ],
            "nullable": true
          }
        },
        "required": ["field_type", "value"],
        "title": "CustomFormTextFieldResponseDumpSchema",
        "type": "object"
      },
      "CustomFormTextMappedFieldSchema": {
        "discriminator": {
          "mapping": {
            "PAYEE__CUSTOM_FIELD": "#/components/schemas/PayeeCustomFieldMappedFieldSchema",
            "REQUEST_NAME": "#/components/schemas/RequestNameMappedFieldSchema"
          },
          "propertyName": "mapped_field"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/PayeeCustomFieldMappedFieldSchema"
          },
          {
            "$ref": "#/components/schemas/RequestNameMappedFieldSchema"
          }
        ],
        "title": "CustomFormTextMappedFieldSchema"
      },
      "CustomFormTextMultiSelectFieldResponseDumpSchema": {
        "properties": {
          "choices": {
            "items": {
              "$ref": "#/components/schemas/CustomFormStringFieldChoiceDumpSchema"
            },
            "title": "Choices",
            "type": "array"
          },
          "field_type": {
            "enum": ["TEXT_MULTI_SELECT"],
            "title": "Field Type",
            "type": "string"
          },
          "mapped_fields": {
            "items": {
              "$ref": "#/components/schemas/CustomFormTextMultiSelectMappedFieldSchema"
            },
            "title": "Mapped Fields",
            "type": "array"
          },
          "value": {
            "items": {
              "$ref": "#/components/schemas/StringValueSchema"
            },
            "nullable": true,
            "title": "Value",
            "type": "array"
          }
        },
        "required": ["field_type", "value"],
        "title": "CustomFormTextMultiSelectFieldResponseDumpSchema",
        "type": "object"
      },
      "CustomFormTextMultiSelectMappedFieldSchema": {
        "discriminator": {
          "mapping": {
            "PAYEE__CUSTOM_FIELD": "#/components/schemas/PayeeCustomFieldMappedFieldSchema"
          },
          "propertyName": "mapped_field"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/PayeeCustomFieldMappedFieldSchema"
          }
        ],
        "title": "CustomFormTextMultiSelectMappedFieldSchema"
      },
      "CustomFormTextSingleSelectFieldResponseDumpSchema": {
        "properties": {
          "choices": {
            "items": {
              "$ref": "#/components/schemas/CustomFormStringFieldChoiceDumpSchema"
            },
            "title": "Choices",
            "type": "array"
          },
          "field_type": {
            "enum": ["TEXT_SINGLE_SELECT"],
            "title": "Field Type",
            "type": "string"
          },
          "mapped_fields": {
            "items": {
              "$ref": "#/components/schemas/CustomFormTextSingleSelectMappedFieldSchema"
            },
            "title": "Mapped Fields",
            "type": "array"
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StringValueSchema"
              }
            ],
            "nullable": true
          }
        },
        "required": ["field_type", "value"],
        "title": "CustomFormTextSingleSelectFieldResponseDumpSchema",
        "type": "object"
      },
      "CustomFormTextSingleSelectMappedFieldSchema": {
        "discriminator": {
          "mapping": {
            "PAYEE__CUSTOM_FIELD": "#/components/schemas/PayeeCustomFieldMappedFieldSchema"
          },
          "propertyName": "mapped_field"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/PayeeCustomFieldMappedFieldSchema"
          }
        ],
        "title": "CustomFormTextSingleSelectMappedFieldSchema"
      },
      "CustomFormVendorFieldResponseDumpSchema": {
        "properties": {
          "field_type": {
            "enum": ["VENDOR"],
            "title": "Field Type",
            "type": "string"
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VendorValueDumpSchema"
              }
            ],
            "nullable": true
          }
        },
        "required": ["field_type", "value"],
        "title": "CustomFormVendorFieldResponseDumpSchema",
        "type": "object"
      },
      "CustomRecordBooleanColumnType": {
        "properties": {
          "type": {
            "default": "boolean",
            "enum": ["boolean"],
            "type": "string"
          }
        },
        "required": ["type"],
        "type": "object"
      },
      "CustomRecordCustomReferenceColumnType": {
        "properties": {
          "cardinality": {
            "description": "The cardinality of the referencing column",
            "enum": ["many_to_many", "many_to_one", "one_to_many", "one_to_one"],
            "type": "string"
          },
          "corresponding_column_id": {
            "description": "The column in the referenced table that corresponds to the referencing column.",
            "type": "string"
          },
          "table_display_name": {
            "description": "The display name of the referenced table",
            "type": "string"
          },
          "table_id": {
            "description": "The unique identifier for the referenced table",
            "type": "string"
          },
          "table_name": {
            "description": "The API name of the custom table that is referenced",
            "type": "string"
          },
          "type": {
            "default": "custom_reference",
            "enum": ["custom_reference"],
            "type": "string"
          }
        },
        "required": [
          "cardinality",
          "corresponding_column_id",
          "table_display_name",
          "table_id",
          "table_name",
          "type"
        ],
        "type": "object"
      },
      "CustomRecordNativeReferenceColumnType": {
        "properties": {
          "cardinality": {
            "description": "The cardinality of the referencing column",
            "enum": ["many_to_many", "many_to_one", "one_to_many", "one_to_one"],
            "type": "string"
          },
          "corresponding_column_id": {
            "description": "The column in the referenced table that corresponds to the referencing column.",
            "type": "string"
          },
          "table_id": {
            "description": "The unique identifier for the referenced table",
            "type": "string"
          },
          "table_name": {
            "description": "The native Ramp table that is referenced",
            "enum": [
              "accounting_field_options",
              "bills",
              "business_entities",
              "departments",
              "locations",
              "reimbursements",
              "transactions",
              "users"
            ],
            "type": "string"
          },
          "type": {
            "default": "native_reference",
            "enum": ["native_reference"],
            "type": "string"
          }
        },
        "required": ["cardinality", "corresponding_column_id", "table_id", "table_name", "type"],
        "type": "object"
      },
      "CustomRecordTextColumnType": {
        "properties": {
          "type": {
            "default": "text",
            "enum": ["text"],
            "type": "string"
          }
        },
        "required": ["type"],
        "type": "object"
      },
      "CustomRowColumnContentsByColumnNameRequestBody": {
        "properties": {
          "cells": {
            "description": "The contents of the cells in the row. The column name should be the name of the column, and the contents should be the value to insert into the cell. When setting a cell to reference many rows, each reference must be a separate entry in the list.",
            "items": {
              "$ref": "#/components/schemas/ColumnNameAndContentsRequestBody"
            },
            "type": "array"
          },
          "external_key": {
            "description": "The external key of the row.",
            "type": "string"
          }
        },
        "required": ["cells", "external_key"],
        "type": "object"
      },
      "CustomRowDataWithLoadedReferences": {
        "example": {
          "cells": [
            {
              "column_display_name": "Country",
              "column_id": "<column_id>",
              "value": {
                "has_more": false,
                "rows": [
                  {
                    "display_name": "USA",
                    "external_key": "USA",
                    "row_id": "<row_id>",
                    "type": "custom_table"
                  }
                ],
                "table_name": "countries",
                "type": "custom_table"
              }
            },
            {
              "column_display_name": "Regional Director",
              "column_id": "<column_id>",
              "value": {
                "has_more": false,
                "rows": [
                  {
                    "display_name": "John Doe",
                    "external_key": "<existing_ramp_user_uuid>",
                    "row_id": "<row_id>",
                    "type": "native_table"
                  }
                ],
                "table_name": "users",
                "type": "native_table"
              }
            },
            {
              "column_display_name": "States",
              "column_id": "<column_id>",
              "value": {
                "has_more": true,
                "rows": [
                  {
                    "display_name": "Arizona",
                    "external_key": "Arizona",
                    "row_id": "<row_id>",
                    "type": "custom_table"
                  },
                  {
                    "display_name": "California",
                    "external_key": "California",
                    "row_id": "<row_id>",
                    "type": "custom_table"
                  },
                  {
                    "display_name": "New Jersey",
                    "external_key": "New Jersey",
                    "row_id": "<row_id>",
                    "type": "custom_table"
                  },
                  {
                    "display_name": "New York",
                    "external_key": "New York",
                    "row_id": "<row_id>",
                    "type": "custom_table"
                  },
                  {
                    "display_name": "Texas",
                    "external_key": "Texas",
                    "row_id": "<row_id>",
                    "type": "custom_table"
                  }
                ],
                "table_name": "states",
                "type": "custom_table"
              }
            }
          ],
          "external_key": "Northeast",
          "id": "<row_id>"
        },
        "properties": {
          "cells": {
            "description": "The contents of each column for this row.",
            "items": {
              "$ref": "#/components/schemas/CustomCellOutputWithLoadedReferences"
            },
            "type": "array"
          },
          "display_name": {
            "description": "A display name for the custom row.",
            "type": "string"
          },
          "external_key": {
            "description": "The external key of the custom row. Will be unique within the table.",
            "type": "string"
          },
          "id": {
            "description": "The id of the custom row",
            "type": "string"
          }
        },
        "required": ["cells", "display_name", "external_key", "id"],
        "type": "object"
      },
      "CustomRowExternalKeyRequestBody": {
        "properties": {
          "external_key": {
            "description": "The external key of the row",
            "type": "string"
          }
        },
        "required": ["external_key"],
        "type": "object"
      },
      "CustomTableReferenceCellContentsForDisplay": {
        "properties": {
          "has_more": {
            "description": "Indicates if there are more rows in the table than are included in this response",
            "type": "boolean"
          },
          "rows": {
            "description": "The rows referenced by this cell",
            "items": {
              "$ref": "#/components/schemas/CustomTableRowForDisplay"
            },
            "type": "array"
          },
          "table_name": {
            "description": "The custom table that referenced rows are part of",
            "type": "string"
          },
          "type": {
            "default": "custom_table",
            "enum": ["custom_table"],
            "type": "string"
          }
        },
        "required": ["has_more", "rows", "table_name", "type"],
        "type": "object"
      },
      "CustomTableReferenceRequestBody": {
        "example": {
          "table_name": "business_regions",
          "type": "custom_table"
        },
        "properties": {
          "table_name": {
            "description": "The name of the custom table",
            "type": "string"
          },
          "type": {
            "default": "custom_table",
            "enum": ["custom_table"],
            "type": "string"
          }
        },
        "required": ["table_name"],
        "type": "object"
      },
      "CustomTableReferenceUsingLabelAndName": {
        "example": {
          "table_label": "Teams",
          "table_name": "teams",
          "type": "custom_table"
        },
        "properties": {
          "table_label": {
            "description": "The custom table's label as displayed in Ramp",
            "type": "string"
          },
          "table_name": {
            "description": "The custom table's API name",
            "type": "string"
          },
          "type": {
            "default": "custom_table",
            "enum": ["custom_table"],
            "type": "string"
          }
        },
        "required": ["table_label", "table_name", "type"],
        "type": "object"
      },
      "CustomTableReferenceUsingLabelAndNameRequestBody": {
        "example": {
          "table_label": "Teams",
          "table_name": "teams",
          "type": "custom_table"
        },
        "properties": {
          "table_label": {
            "description": "The custom table's label as displayed in Ramp",
            "type": "string"
          },
          "table_name": {
            "description": "The custom table's API name",
            "type": "string"
          },
          "type": {
            "default": "custom_table",
            "enum": ["custom_table"],
            "type": "string"
          }
        },
        "required": ["table_label", "table_name"],
        "type": "object"
      },
      "CustomTableRowForDisplay": {
        "properties": {
          "display_name": {
            "type": "string"
          },
          "external_key": {
            "description": "The external key of the row",
            "type": "string"
          },
          "row_id": {
            "description": "The id of the row",
            "type": "string"
          },
          "type": {
            "default": "custom_table",
            "enum": ["custom_table"],
            "type": "string"
          }
        },
        "required": ["display_name", "external_key", "row_id", "type"],
        "type": "object"
      },
      "DecimalValueSchema": {
        "properties": {
          "value": {
            "title": "Value",
            "type": "number"
          }
        },
        "required": ["value"],
        "title": "DecimalValueSchema",
        "type": "object"
      },
      "DeferredTaskUUID": {
        "properties": {
          "id": {
            "description": "ID of the deferred task.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": ["id"],
        "type": "object"
      },
      "DeleteCellsResponse": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/NumDeleted"
          }
        },
        "required": ["metadata"],
        "type": "object"
      },
      "DeleteCustomRowRequestBody": {
        "example": {
          "data": [
            {
              "external_key": "Northeast"
            },
            {
              "external_key": "Southwest"
            }
          ]
        },
        "properties": {
          "data": {
            "description": "List of the external keys of rows to delete.",
            "items": {
              "$ref": "#/components/schemas/CustomRowExternalKeyRequestBody"
            },
            "type": "array"
          }
        },
        "required": ["data"],
        "type": "object"
      },
      "DeleteCustomRowResponse": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/NumDeleted"
          }
        },
        "required": ["metadata"],
        "type": "object"
      },
      "Department": {
        "example": {
          "id": "c16b6ee1-2f5d-45e9-9fb4-c1c541a9ea70",
          "name": "Bookkeeping"
        },
        "properties": {
          "id": {
            "description": "Unique identifier for the department.",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Name of the department.",
            "type": "string"
          }
        },
        "required": ["id", "name"],
        "type": "object",
        "x-resource-name": "departments"
      },
      "DepartmentValueDumpSchema": {
        "properties": {
          "department_name": {
            "title": "Department Name",
            "type": "string"
          },
          "department_uuid": {
            "title": "Department Uuid",
            "type": "string"
          }
        },
        "required": ["department_name", "department_uuid"],
        "title": "DepartmentValueDumpSchema",
        "type": "object"
      },
      "DevApiCreateReferenceColumnArgsRequestBody": {
        "example": {
          "cardinality": "many_to_one",
          "corresponding_column_label": "Members",
          "corresponding_column_name": "members",
          "foreign_table": {
            "table_name": "cost_center",
            "type": "custom_table"
          }
        },
        "properties": {
          "cardinality": {
            "description": "The cardinality of the reference.",
            "enum": ["many_to_many", "many_to_one"],
            "type": "string"
          },
          "corresponding_column_label": {
            "default": null,
            "description": "The label of the corresponding column. Will be generated if not provided.",
            "nullable": true,
            "type": "string"
          },
          "corresponding_column_name": {
            "description": "The API name of the corresponding column.",
            "type": "string"
          },
          "foreign_table": {
            "description": "The table that this column references.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CustomTableReferenceRequestBody"
              },
              {
                "$ref": "#/components/schemas/NativeTableReferenceRequestBody"
              }
            ]
          }
        },
        "required": ["cardinality", "corresponding_column_name", "foreign_table"],
        "type": "object"
      },
      "DeveloperAPINestedPage": {
        "example": {
          "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
        },
        "properties": {
          "next": {
            "description": "the query to get to the next page; it is in the format of <BASE_URL>?<new_params>",
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["next"],
        "type": "object"
      },
      "DeveloperApiCreateCustomRecordColumnRequestBody": {
        "example": {
          "column_type_name": "custom_reference",
          "label": "Cost Center",
          "name": "cost_center",
          "reference_args": {
            "cardinality": "many_to_one",
            "corresponding_column_label": "Members",
            "corresponding_column_name": "members",
            "foreign_table": {
              "table_name": "cost_center",
              "type": "custom_table"
            }
          }
        },
        "properties": {
          "column_type_name": {
            "description": "The type of the column. This determines how the column behaves and what data it can hold.",
            "enum": ["boolean", "custom_reference", "native_reference", "text"],
            "type": "string"
          },
          "label": {
            "description": "The display name of the column",
            "type": "string"
          },
          "name": {
            "description": "The API name of the column, to be used when writing to this column",
            "type": "string"
          },
          "reference_args": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DevApiCreateReferenceColumnArgsRequestBody"
              }
            ],
            "default": null,
            "description": "Arguments for creating a reference column, if applicable. This is required for columns of type 'custom_reference' or 'native_reference'.",
            "nullable": true
          }
        },
        "required": ["column_type_name", "label", "name"],
        "type": "object"
      },
      "DeveloperApiCustomRecordColumn": {
        "example": {
          "allows_writes": true,
          "display_name": "Country",
          "id": "<column_id>",
          "name": "country",
          "type": "custom_reference"
        },
        "properties": {
          "allows_writes": {
            "description": "Whether the column can be directly written to. Columns not directly written to have values derived from columns that reference them.",
            "type": "boolean"
          },
          "display_name": {
            "description": "The display name of the column",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier for the column",
            "type": "string"
          },
          "name": {
            "description": "The name of the column, to be used when writing to this column",
            "type": "string"
          },
          "type": {
            "description": "The type of the column",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CustomRecordBooleanColumnType"
              },
              {
                "$ref": "#/components/schemas/CustomRecordCustomReferenceColumnType"
              },
              {
                "$ref": "#/components/schemas/CustomRecordNativeReferenceColumnType"
              },
              {
                "$ref": "#/components/schemas/CustomRecordTextColumnType"
              }
            ]
          }
        },
        "required": ["allows_writes", "display_name", "id", "name", "type"],
        "type": "object"
      },
      "DraftBill": {
        "properties": {
          "accounting_date": {
            "description": "The date for the bill for accounting purposes. If not specified, falls back to the bill issue date.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "accounting_field_selections": {
            "description": "List of accounting field options selected to code the bill.",
            "items": {
              "$ref": "#/components/schemas/ApiAccountingFieldSelection"
            },
            "type": "array"
          },
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Amount of the bill.",
            "nullable": true,
            "readOnly": true
          },
          "bill_owner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiBillOwner"
              }
            ],
            "description": "Information about the bill owner.",
            "nullable": true
          },
          "created_at": {
            "description": "The date the bill was created.",
            "format": "date-time",
            "type": "string"
          },
          "due_at": {
            "description": "The date the bill is due.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "entity_id": {
            "description": "Associated business entity.",
            "format": "uuid",
            "nullable": true,
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "entities",
              "type": "many-to-one"
            }
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "inventory_line_items": {
            "description": "List of inventory line items related to the bill.",
            "items": {
              "$ref": "#/components/schemas/ApiDraftBillInventoryLineItem"
            },
            "type": "array"
          },
          "invoice_number": {
            "description": "The invoice number on the bill.",
            "nullable": true,
            "type": "string"
          },
          "invoice_urls": {
            "description": "Pre-signed urls to download invoice files.",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "issued_at": {
            "description": "The date the bill was issued on invoice.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "line_items": {
            "description": "List of line items related to the bill.",
            "items": {
              "$ref": "#/components/schemas/ApiDraftBillLineItem"
            },
            "type": "array"
          },
          "memo": {
            "description": "Memo of the bill.",
            "nullable": true,
            "type": "string"
          },
          "posting_date": {
            "description": "The date the bill was posted to the ERP. Alternatively known as accounting date, accounting sync date.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "status": {
            "default": "DRAFT",
            "description": "Payment status of the bill. Always DRAFT for provisional bills."
          },
          "sync_status": {
            "default": "NOT_SYNCED",
            "description": "Sync status of the bill. Always NOT_SYNCED for drafts."
          },
          "vendor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiBillVendor"
              }
            ],
            "description": "Vendor information of the bill.",
            "nullable": true
          },
          "vendor_memo": {
            "description": "Memo to the vendor.",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "accounting_date",
          "accounting_field_selections",
          "amount",
          "bill_owner",
          "created_at",
          "due_at",
          "entity_id",
          "id",
          "inventory_line_items",
          "invoice_number",
          "invoice_urls",
          "issued_at",
          "line_items",
          "memo",
          "posting_date",
          "status",
          "sync_status",
          "vendor",
          "vendor_memo"
        ],
        "type": "object",
        "x-resource-name": "draft_bills"
      },
      "EmptyObject": {
        "additionalProperties": false,
        "properties": {},
        "type": "object"
      },
      "EntityProviderAccount": {
        "properties": {
          "bank_account_id": {
            "description": "Unique identifier of the associated bank account, if exists",
            "format": "uuid",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "classification": {
            "description": "Classification type of the account (Asset, Liability, Equity, etc.).",
            "enum": ["ANY", "ASSET", "CREDCARD", "EQUITY", "EXPENSE", "LIABILITY", "REVENUE", "UNKNOWN"],
            "type": "string"
          },
          "created_at": {
            "description": "When the account was created.",
            "format": "date-time",
            "type": "string"
          },
          "external_id": {
            "description": "External ID of the account. If connected to a direct integration, this value is sourced from the remote ERP system.",
            "type": "string"
          },
          "external_name": {
            "description": "External name of the account. If connected to a direct integration, this value is sourced from the remote ERP system.",
            "type": "string"
          },
          "internal_id": {
            "description": "Internal ID of the account. This value is entered as the Account ID in Ramp as the unique ID or number assigned by your accounting provider.",
            "type": "string"
          },
          "usage_type": {
            "description": "How the account is used within the system (Cash Account, Expense Account, etc.).",
            "enum": [
              "ACCRUAL_LIABILITY_ACCOUNT",
              "BILL_PAY_ACCOUNTS_PAYABLE_ACCOUNT",
              "BILL_PAY_BANK_ACCOUNT",
              "BILL_PAY_FX_GAIN_LOSS_ACCOUNT",
              "BROKERAGE_ACCOUNT",
              "BROKERAGE_DIVIDEND_ACCOUNT",
              "CARD_LIABILITY_ACCOUNT",
              "CARD_TRANSACTION_BILLS_ACCOUNTS_PAYABLE_ACCOUNT",
              "CASHBACK_ACCOUNT",
              "CASH_ACCOUNT",
              "INTERCOMPANY_ACCOUNTS_PAYABLE_ACCOUNT",
              "INTERCOMPANY_ACCOUNTS_RECEIVABLE_ACCOUNT",
              "INTERCOMPANY_TRANSFER_CLEARING_ACCOUNT",
              "REIMBURSEMENT_ACCOUNTS_PAYABLE_ACCOUNT",
              "REIMBURSEMENT_BANK_ACCOUNT",
              "TRANSFER_BANK_ACCOUNT",
              "UNDEPOSITED_FUNDS",
              "WALLET_ACCOUNT",
              "WALLET_BANK_ACCOUNT",
              "WALLET_YIELD_ACCOUNT"
            ],
            "type": "string"
          }
        },
        "required": ["internal_id"],
        "type": "object"
      },
      "FieldOption": {
        "example": {
          "code": "400-100",
          "id": "514",
          "value": "Employees:Salaries & Wages"
        },
        "properties": {
          "code": {
            "description": "Code of the custom accounting field option; e.g. 400-100.",
            "type": "string"
          },
          "id": {
            "description": "Remote/external ID of custom accounting field option from ERP system.",
            "type": "string"
          },
          "value": {
            "description": "e.g. Employees:Salaries & Wages",
            "type": "string"
          }
        },
        "required": ["id", "value"],
        "type": "object"
      },
      "FileValueDumpSchema": {
        "properties": {
          "displayed_filename": {
            "title": "Displayed Filename",
            "type": "string"
          },
          "document_category": {
            "$ref": "#/components/schemas/PayeeDocumentCategory"
          },
          "file_url": {
            "title": "File Url",
            "type": "string"
          },
          "file_uuid": {
            "title": "File Uuid",
            "type": "string"
          },
          "spend_request_document_uuid": {
            "nullable": true,
            "title": "Spend Request Document Uuid",
            "type": "string"
          }
        },
        "required": [
          "displayed_filename",
          "document_category",
          "file_url",
          "file_uuid",
          "spend_request_document_uuid"
        ],
        "title": "FileValueDumpSchema",
        "type": "object"
      },
      "GLAccount": {
        "example": {
          "classification": "EXPENSE",
          "code": "6410",
          "id": "514",
          "name": "Employees:Salaries & Wages"
        },
        "properties": {
          "classification": {
            "enum": ["ANY", "ASSET", "CREDCARD", "EQUITY", "EXPENSE", "LIABILITY", "REVENUE", "UNKNOWN"],
            "type": "string"
          },
          "code": {
            "description": "e.g. 400-100.",
            "type": "string"
          },
          "id": {
            "description": "Remote/external ID of GL account in ERP system.",
            "type": "string"
          },
          "name": {
            "description": "e.g. Travel : Travel - Lodging.",
            "type": "string"
          }
        },
        "required": ["classification", "id", "name"],
        "type": "object"
      },
      "GeneralLedgerAccount": {
        "example": {
          "classification": "EXPENSE",
          "code": "6410",
          "created_at": "2019-08-28T14:15:22+00:00",
          "gl_account_category_info": {
            "id": "Category",
            "name": "Category",
            "ramp_id": "96bb7007-eec5-430f-8d09-e033cbc000c2"
          },
          "id": "514",
          "is_active": true,
          "name": "Employees:Salaries & Wages",
          "ramp_id": "46910cc3-ab41-4b80-b4a7-94dab9f1b795",
          "updated_at": "2020-08-28T14:40:12+00:00"
        },
        "properties": {
          "classification": {
            "enum": ["ANY", "ASSET", "CREDCARD", "EQUITY", "EXPENSE", "LIABILITY", "REVENUE", "UNKNOWN"],
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "code": {
            "description": "e.g. 400-100.",
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "gl_account_category_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiAccountingCategoryInfo"
              }
            ],
            "description": "Category info of the general ledger account."
          },
          "id": {
            "description": "Remote/external ID of GL account in ERP system.",
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          },
          "name": {
            "description": "e.g. Travel : Travel - Lodging.",
            "type": "string"
          },
          "ramp_id": {
            "description": "id to uniquely identify a general ledger account within Ramp system",
            "format": "uuid",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": ["created_at", "is_active", "name", "ramp_id"],
        "type": "object"
      },
      "InsertCellsResponse": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/NumInserted"
          }
        },
        "required": ["metadata"],
        "type": "object"
      },
      "IntValue": {
        "properties": {
          "child_type": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "enum": ["INT"],
            "type": "string"
          },
          "value": {
            "nullable": true,
            "type": "integer"
          }
        },
        "required": ["type"],
        "type": "object"
      },
      "JSONBValue": {
        "properties": {
          "child_type": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "enum": ["JSONB"],
            "type": "string"
          },
          "value": {
            "nullable": true
          }
        },
        "required": ["type"],
        "type": "object"
      },
      "KeyStateReference": {
        "properties": {
          "action_kwarg_type": {
            "enum": ["KEY_STATE_REFERENCE_TYPE"],
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "variable_name": {
            "type": "string"
          }
        },
        "required": ["action_kwarg_type", "key", "variable_name"],
        "type": "object"
      },
      "Lead": {
        "example": {
          "business_info": {
            "business_description": "We are in the empire business",
            "business_name_dba": "White & Pinkman Inc.",
            "business_name_legal": "White & Pinkman Inc.",
            "business_name_website": "www.whiteandpinkman.com",
            "date_of_incorporation": "2004-01-01",
            "ein_number": "12-3456789",
            "entity_type": "CORPORATION",
            "estimated_monthly_spend": "10,000",
            "industry": "Food Products",
            "industry_group": "Food, Beverage & Tobacco",
            "office_address": {
              "office_city": "Albuquerque",
              "office_country": "US",
              "office_postal_code": "100022",
              "office_state": "New Mexico",
              "office_street_address": "100 Main Street"
            },
            "sector": "Consumer Staples",
            "state_of_incorporation": "New Mexico"
          },
          "created_at": "",
          "email": "lead@whiteandpinkman.com",
          "external_id": "f26bfdb5-beei-4875-a9b5-a29f8af6f381",
          "first_name": "Walter",
          "id": "97ad0c67-c318-4591-9b0e-202ecceb8016",
          "last_name": "White",
          "source": "White & Pinkman",
          "updated_at": ""
        },
        "properties": {
          "business_info": {
            "$ref": "#/components/schemas/ApiSalesLeadBusinessDump"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "external_id": {
            "type": "string"
          },
          "financing_application_status": {
            "enum": [
              "ALLOY_COMPLETE",
              "Admin Approved",
              "DELETED",
              "DOCUMENTS_REQUIRED",
              "DOCUMENTS_SUBMITTED",
              "KYC Approved",
              "OPS_REVIEW",
              "Pending",
              "Rejected",
              "Submitted",
              "Withdrawn"
            ],
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "source": {
            "enum": ["AngelList", "Quanta"],
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": ["external_id", "source"],
        "type": "object"
      },
      "LightReceipt": {
        "example": {
          "id": "0a0ed428-0250-4993-96ad-94cd77bc86b6"
        },
        "properties": {
          "id": {
            "description": "Unique identifier for the receipt.",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Limit": {
        "example": {
          "balance": {
            "cleared": {
              "amount": 6500,
              "currency_code": "USD"
            },
            "pending": {
              "amount": 3500,
              "currency_code": "USD"
            },
            "total": {
              "amount": 10000,
              "currency_code": "USD"
            }
          },
          "cards": [
            {
              "card_id": "a40a6ce8-70d4-4d06-91e1-0728ad9bbe39",
              "expiration": "0227",
              "is_ap_card": false,
              "last_four": "2543",
              "via_new_product_or_service": false
            }
          ],
          "created_at": "2024-05-12T01:37:27+00:00",
          "display_name": "T&E",
          "entity_id": "c18d9d2e-964f-476d-8bb3-9ac078f00e11",
          "has_program_overridden": false,
          "id": "d8135cfe-0396-4b2d-b2cf-ad809fb04731",
          "is_shareable": true,
          "permitted_spend_types": {
            "primary_card_enabled": true,
            "reimbursements_enabled": false
          },
          "restrictions": {
            "auto_lock_date": null,
            "categories_whitelist": [35],
            "interval": "MONTHLY",
            "limit": 500,
            "next_interval_reset": "2022-12-01T00:00:00+00:00",
            "start_of_interval_date": "2022-11-01T00:00:00+00:00",
            "temporary_limit": null,
            "transaction_amount_limit": 200,
            "vendor_blacklist": [61]
          },
          "spend_program_id": "3a5b1f62-988f-4190-bf31-b7ae87c5dfee",
          "state": "ACTIVE",
          "suspension": {
            "acting_user_id": "e9186c3a-4650-48ef-aee4-56b77f5019bd",
            "inserted_at": "2022-11-03T00:00:00+00:00",
            "suspended_by_ramp": false
          },
          "users": [
            {
              "user_id": "2ba219ba-5867-453f-bec2-b8d0414b7f75"
            }
          ]
        },
        "properties": {
          "balance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSpendAllocationBalance"
              }
            ],
            "description": "Details about the current balance of the limit."
          },
          "cards": {
            "description": "List of cards linked to this limit.",
            "items": {
              "$ref": "#/components/schemas/ApiSpendLimitCardResource"
            },
            "type": "array"
          },
          "created_at": {
            "description": "Time at which the spend limit is created, presented in ISO8601 format.",
            "format": "date-time",
            "type": "string"
          },
          "display_name": {
            "description": "Display name of the limit and all linked cards.",
            "type": "string"
          },
          "entity_id": {
            "description": "Associated business entity of the limit.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "entities",
              "type": "many-to-one"
            }
          },
          "has_program_overridden": {
            "description": "Indicates if the limit's settings override those of its Spend Program.",
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier of the limit.",
            "format": "uuid",
            "type": "string"
          },
          "is_shareable": {
            "description": "Whether this spend limit is shareable.",
            "type": "boolean"
          },
          "permitted_spend_types": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiPermittedSpendTypesDump"
              }
            ],
            "description": "Specifies the permitted spend types of the limit."
          },
          "restrictions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSpendingRestrictionsDump"
              }
            ],
            "description": "Restrictions imposed on this limit."
          },
          "spend_program_id": {
            "description": "Unique identifier of the associated Spend Program.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "spend_programs",
              "type": "many-to-one"
            }
          },
          "state": {
            "description": "Current state of the limit.",
            "enum": ["ACTIVE", "SUSPENDED", "TERMINATED"],
            "type": "string"
          },
          "suspension": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSuspensionDump"
              }
            ],
            "description": "Suspension (lock) on the limit.",
            "nullable": true
          },
          "users": {
            "description": "Members who can spend from the limit.",
            "items": {
              "$ref": "#/components/schemas/ApiSpendLimitMember"
            },
            "type": "array"
          }
        },
        "type": "object",
        "x-resource-name": "limits"
      },
      "Location": {
        "example": {
          "entity_id": "bb25a7e8-cc2f-4ba7-9bf4-7730ffe152bb",
          "id": "f4efe11c-221f-4b49-a1e4-33eaf96a49ee",
          "name": "New York City, NY"
        },
        "properties": {
          "entity_id": {
            "description": "Identifier of the business entity this location belongs to.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "entities",
              "type": "many-to-one"
            }
          },
          "id": {
            "description": "Unique identifier for the location.",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Name of the location.",
            "type": "string"
          }
        },
        "required": ["id", "name"],
        "type": "object",
        "x-resource-name": "locations"
      },
      "Memo": {
        "properties": {
          "id": {
            "description": "Unique identifier for the transaction associated with this memo.",
            "format": "uuid",
            "type": "string"
          },
          "memo": {
            "description": "Text content of the memo.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Merchant": {
        "example": {
          "id": "d38a988c-377a-421b-9017-0c8f40a4304e",
          "is_auto_approved": true,
          "merchant_name": "Google",
          "sk_category_name": "Advertising"
        },
        "properties": {
          "id": {
            "description": "Unique identifier for the merchant.",
            "format": "uuid",
            "type": "string"
          },
          "is_auto_approved": {
            "description": "Indicates if transactions from this merchant are exempt from receipt submission requirements.",
            "readOnly": true,
            "type": "boolean"
          },
          "merchant_name": {
            "description": "Display name of the merchant.",
            "type": "string"
          },
          "sk_category_name": {
            "description": "Category classification of the merchant.",
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["id", "is_auto_approved", "merchant_name", "sk_category_name"],
        "type": "object",
        "x-resource-name": "merchants"
      },
      "MerchantCategoryValueDumpSchema": {
        "properties": {
          "category_id": {
            "title": "Category Id",
            "type": "integer"
          },
          "category_name": {
            "title": "Category Name",
            "type": "string"
          }
        },
        "required": ["category_id", "category_name"],
        "title": "MerchantCategoryValueDumpSchema",
        "type": "object"
      },
      "MerchantValueDumpSchema": {
        "properties": {
          "merchant_id": {
            "title": "Merchant Id",
            "type": "integer"
          },
          "merchant_name": {
            "title": "Merchant Name",
            "type": "string"
          }
        },
        "required": ["merchant_id", "merchant_name"],
        "title": "MerchantValueDumpSchema",
        "type": "object"
      },
      "MonetaryAmountValueSchema": {
        "properties": {
          "amount": {
            "description": "Monetary amount in currency units (e.g. dollars, euros, etc.)",
            "title": "Amount",
            "type": "number"
          },
          "currency": {
            "description": "Currency code",
            "title": "Currency",
            "type": "string"
          }
        },
        "required": ["amount", "currency"],
        "title": "MonetaryAmountValueSchema",
        "type": "object"
      },
      "NativeRowColumnContentsByColumnNameRequestBody": {
        "properties": {
          "cells": {
            "description": "The contents of the cells in the row. The column name should be the name of the column, and the contents should be the value to insert into the cell. When setting a cell to reference many rows, each reference must be a separate entry in the list.",
            "items": {
              "$ref": "#/components/schemas/ColumnNameAndContentsRequestBody"
            },
            "type": "array"
          },
          "row": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NativeRowIdentifierRequestBody"
              }
            ],
            "description": "An identifier for the Ramp object"
          }
        },
        "required": ["cells", "row"],
        "type": "object"
      },
      "NativeRowIdentifierRequestBody": {
        "properties": {
          "column_name": {
            "description": "The name of the Ramp table column that value corresponds to.",
            "type": "string"
          },
          "value": {
            "description": "The value of the Ramp object in the specified column. Must match exactly one Ramp object.",
            "type": "string"
          }
        },
        "required": ["column_name", "value"],
        "type": "object"
      },
      "NativeTableReference": {
        "example": {
          "table_name": "users",
          "type": "native_table"
        },
        "properties": {
          "table_name": {
            "description": "The name of the native Ramp table",
            "enum": [
              "accounting_field_options",
              "bills",
              "business_entities",
              "departments",
              "locations",
              "reimbursements",
              "transactions",
              "users"
            ],
            "type": "string"
          },
          "type": {
            "default": "native_table",
            "enum": ["native_table"],
            "type": "string"
          }
        },
        "required": ["table_name", "type"],
        "type": "object"
      },
      "NativeTableReferenceCellContentsForDisplay": {
        "properties": {
          "has_more": {
            "description": "Indicates if there are more rows in the table than are included in this response",
            "type": "boolean"
          },
          "rows": {
            "description": "The rows referenced by this cell",
            "items": {
              "$ref": "#/components/schemas/NativeTableRowForDisplay"
            },
            "type": "array"
          },
          "table_name": {
            "description": "The native table that referenced rows are part of",
            "enum": [
              "accounting_field_options",
              "bills",
              "business_entities",
              "departments",
              "locations",
              "reimbursements",
              "transactions",
              "users"
            ],
            "type": "string"
          },
          "type": {
            "default": "native_table",
            "enum": ["native_table"],
            "type": "string"
          }
        },
        "required": ["has_more", "rows", "table_name", "type"],
        "type": "object"
      },
      "NativeTableReferenceRequestBody": {
        "example": {
          "table_name": "users",
          "type": "native_table"
        },
        "properties": {
          "table_name": {
            "description": "The name of the native Ramp table",
            "enum": [
              "accounting_field_options",
              "bills",
              "business_entities",
              "departments",
              "locations",
              "reimbursements",
              "transactions",
              "users"
            ],
            "type": "string"
          },
          "type": {
            "default": "native_table",
            "enum": ["native_table"],
            "type": "string"
          }
        },
        "required": ["table_name"],
        "type": "object"
      },
      "NativeTableRowForDisplay": {
        "properties": {
          "display_name": {
            "type": "string"
          },
          "external_key": {
            "description": "The id of the Ramp object",
            "type": "string"
          },
          "type": {
            "default": "native_table",
            "enum": ["native_table"],
            "type": "string"
          }
        },
        "required": ["display_name", "external_key", "type"],
        "type": "object"
      },
      "NestedConditionGroup": {
        "properties": {
          "condition_item_type": {
            "enum": ["CONDITION_GROUP"],
            "type": "string"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/ConditionItem"
            },
            "type": "array"
          },
          "operator": {
            "enum": ["ALL", "ANY", "NOT"],
            "type": "string"
          }
        },
        "required": ["condition_item_type", "items", "operator"],
        "type": "object"
      },
      "NestedPage": {
        "properties": {
          "next": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["next"],
        "type": "object"
      },
      "NumDeleted": {
        "properties": {
          "deleted": {
            "type": "integer"
          }
        },
        "required": ["deleted"],
        "type": "object"
      },
      "NumInserted": {
        "properties": {
          "inserted": {
            "type": "integer"
          }
        },
        "required": ["inserted"],
        "type": "object"
      },
      "NumInsertedNumUpdated": {
        "properties": {
          "inserted": {
            "description": "The number of rows inserted.",
            "type": "integer"
          },
          "updated": {
            "description": "The number of rows updated.",
            "type": "integer"
          }
        },
        "required": ["inserted", "updated"],
        "type": "object"
      },
      "NumericValue": {
        "properties": {
          "child_type": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "enum": ["NUMERIC"],
            "type": "string"
          },
          "value": {
            "nullable": true,
            "type": "number"
          }
        },
        "required": ["type"],
        "type": "object"
      },
      "ObjectValuePoly": {
        "properties": {
          "object": {
            "$ref": "#/components/schemas/SingleObject"
          },
          "object_type": {
            "type": "string"
          },
          "operand_type": {
            "enum": ["OBJECT"],
            "type": "string"
          }
        },
        "required": ["object", "object_type", "operand_type"],
        "type": "object"
      },
      "Operand": {
        "discriminator": {
          "mapping": {
            "OBJECT": "#/components/schemas/ObjectValuePoly",
            "OBJECT_LIST": "#/components/schemas/PolyObjectValuePoly",
            "STATE_OBJECT_LIST_REFERENCE": "#/components/schemas/StateObjectListReference",
            "STATE_OBJECT_REFERENCE": "#/components/schemas/StateObjectReference",
            "STATE_REFERENCE": "#/components/schemas/StateReference",
            "STATIC_VALUE": "#/components/schemas/StaticValue"
          },
          "propertyName": "operand_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ObjectValuePoly"
          },
          {
            "$ref": "#/components/schemas/PolyObjectValuePoly"
          },
          {
            "$ref": "#/components/schemas/StateObjectListReference"
          },
          {
            "$ref": "#/components/schemas/StateObjectReference"
          },
          {
            "$ref": "#/components/schemas/StateReference"
          },
          {
            "$ref": "#/components/schemas/StaticValue"
          }
        ]
      },
      "Operator": {
        "properties": {
          "operator": {
            "type": "string"
          },
          "operator_display": {
            "readOnly": true,
            "type": "string"
          }
        },
        "required": ["operator", "operator_display"],
        "type": "object"
      },
      "OutboundWebhookSubscriptionCreateRequestBody": {
        "example": {
          "additional_headers": {
            "Authorization": "Bearer token123",
            "X-Custom-Header": "value"
          },
          "endpoint_url": "https://example.com/webhook",
          "event_types": ["TRANSACTION_REFUNDED", "USER_INVITED"]
        },
        "properties": {
          "additional_headers": {
            "additionalProperties": {
              "maxLength": 1000,
              "minLength": 1,
              "type": "string"
            },
            "description": "Optional headers to include with webhook requests. Max 5 headers, header names max 100 chars, values max 1000 chars.",
            "maxLength": 5,
            "type": "object"
          },
          "endpoint_url": {
            "description": "URL where webhook events will be sent",
            "format": "url",
            "type": "string"
          },
          "event_types": {
            "description": "Events that this subscription will receive",
            "items": {
              "enum": [
                "bills.approved",
                "bills.created",
                "bills.paid",
                "bills.rejected",
                "purchase_orders.created",
                "purchase_orders.updated",
                "reimbursements.ready_for_review",
                "reimbursements.ready_to_sync",
                "tests.test_event",
                "transactions.authorized",
                "transactions.cleared",
                "transactions.ready_for_review",
                "transactions.ready_to_sync",
                "webhooks.verification"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": ["endpoint_url", "event_types"],
        "type": "object"
      },
      "OutboundWebhookSubscriptionResource": {
        "example": {
          "business_id": "b12a3456-7890-1234-5678-901234567890",
          "created_at": "2023-01-01T00:00:00Z",
          "endpoint_url": "https://example.com/webhook",
          "event_types": ["TRANSACTION_REFUNDED", "USER_INVITED"],
          "id": "c16b6ee1-2f5d-45e9-9fb4-c1c541a9ea70",
          "status": "ACTIVE",
          "updated_at": "2023-01-02T00:00:00Z"
        },
        "properties": {
          "business_id": {
            "description": "UUID of the business that this webhook subscription is for",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "businesses",
              "type": "many-to-one"
            }
          },
          "created_at": {
            "description": "ISO-8601 timestamp when the subscription was created",
            "format": "date-time",
            "type": "string"
          },
          "endpoint_url": {
            "description": "URL where webhook events will be sent",
            "type": "string"
          },
          "event_types": {
            "description": "Types of events this subscription will receive",
            "items": {
              "enum": [
                "bills.approved",
                "bills.created",
                "bills.paid",
                "bills.rejected",
                "purchase_orders.created",
                "purchase_orders.updated",
                "reimbursements.ready_for_review",
                "reimbursements.ready_to_sync",
                "tests.test_event",
                "transactions.authorized",
                "transactions.cleared",
                "transactions.ready_for_review",
                "transactions.ready_to_sync",
                "webhooks.verification"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "Unique identifier for the webhook subscription",
            "type": "string"
          },
          "status": {
            "description": "Current status of the webhook subscription",
            "enum": ["active", "inactive", "pending_verification"],
            "type": "string"
          },
          "updated_at": {
            "description": "ISO-8601 timestamp when the subscription was last updated",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": ["created_at", "endpoint_url", "event_types", "id", "status", "updated_at"],
        "type": "object",
        "x-resource-name": "outbound_webhook_subscription"
      },
      "OutboundWebhookSubscriptionVerifyRequestBody": {
        "example": {
          "challenge": "ramp_challenge_a8f5f167f44f4964e6c998dee827110c"
        },
        "properties": {
          "challenge": {
            "description": "Challenge to verify webhook endpoint",
            "type": "string"
          }
        },
        "required": ["challenge"],
        "type": "object"
      },
      "OutboundWebhookSubscriptionWithSecretResource": {
        "example": {
          "additional_headers": {
            "Authorization": "Bearer token123",
            "X-Custom-Header": "value"
          },
          "business_id": "b12a3456-7890-1234-5678-901234567890",
          "created_at": "2023-01-01T00:00:00Z",
          "endpoint_url": "https://example.com/webhook",
          "event_types": ["TRANSACTION_REFUNDED", "USER_INVITED"],
          "id": "c16b6ee1-2f5d-45e9-9fb4-c1c541a9ea70",
          "secret": "ramp_sec_aXbKpLmNqRsTuVwXyZaBcDeFgHiJkLmN",
          "status": "ACTIVE",
          "updated_at": "2023-01-02T00:00:00Z"
        },
        "properties": {
          "additional_headers": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Headers to include with webhook requests",
            "type": "object"
          },
          "business_id": {
            "description": "UUID of the business that this webhook subscription is for",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "businesses",
              "type": "many-to-one"
            }
          },
          "created_at": {
            "description": "ISO-8601 timestamp when the subscription was created",
            "format": "date-time",
            "type": "string"
          },
          "endpoint_url": {
            "description": "URL where webhook events will be sent",
            "type": "string"
          },
          "event_types": {
            "description": "Types of events this subscription will receive",
            "items": {
              "enum": [
                "bills.approved",
                "bills.created",
                "bills.paid",
                "bills.rejected",
                "purchase_orders.created",
                "purchase_orders.updated",
                "reimbursements.ready_for_review",
                "reimbursements.ready_to_sync",
                "tests.test_event",
                "transactions.authorized",
                "transactions.cleared",
                "transactions.ready_for_review",
                "transactions.ready_to_sync",
                "webhooks.verification"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "Unique identifier for the webhook subscription",
            "type": "string"
          },
          "secret": {
            "description": "Secret key for the webhook subscription",
            "type": "string"
          },
          "status": {
            "description": "Current status of the webhook subscription",
            "enum": ["active", "inactive", "pending_verification"],
            "type": "string"
          },
          "updated_at": {
            "description": "ISO-8601 timestamp when the subscription was last updated",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "additional_headers",
          "created_at",
          "endpoint_url",
          "event_types",
          "id",
          "secret",
          "status",
          "updated_at"
        ],
        "type": "object",
        "x-resource-name": "outbound_webhook_subscription"
      },
      "PaginatedResponseApiAccountingCustomFieldOptionResourceSchema": {
        "example": {
          "data": [
            {
              "code": "20001",
              "created_at": "2019-08-28T14:15:22+00:00",
              "id": "123",
              "is_active": true,
              "ramp_id": "649b6731-33c6-4ff5-8a5d-2333fcc90ace",
              "updated_at": "2020-08-28T14:40:12+00:00",
              "value": "Office/Admin:Phone & Internet"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CustomFieldOption"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiAccountingCustomFieldResourceSchema": {
        "example": {
          "data": [
            {
              "created_at": "2019-08-28T14:15:22+00:00",
              "display_name": "Dept",
              "id": "Department",
              "input_type": "SINGLE_CHOICE",
              "is_active": true,
              "is_splittable": true,
              "name": "Department",
              "ramp_id": "46910cc3-ab41-4b80-b4a7-94dab9f1b795",
              "updated_at": "2020-08-28T14:40:12+00:00"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ApiAccountingCustomFieldResource"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiAccountingGLAccountResourceSchema": {
        "example": {
          "data": [
            {
              "classification": "EXPENSE",
              "code": "6410",
              "created_at": "2019-08-28T14:15:22+00:00",
              "gl_account_category_info": {
                "id": "Category",
                "name": "Category",
                "ramp_id": "96bb7007-eec5-430f-8d09-e033cbc000c2"
              },
              "id": "514",
              "is_active": true,
              "name": "Employees:Salaries & Wages",
              "ramp_id": "46910cc3-ab41-4b80-b4a7-94dab9f1b795",
              "updated_at": "2020-08-28T14:40:12+00:00"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/GeneralLedgerAccount"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiAccountingVendorResourceSchema": {
        "example": {
          "data": [
            {
              "code": "19566",
              "created_at": "2019-08-28T14:15:22+00:00",
              "id": "123",
              "is_active": true,
              "is_synced": true,
              "name": "Amazon",
              "ramp_id": "649b6731-33c6-4ff5-8a5d-2333fcc90ace",
              "updated_at": "2020-08-28T14:40:12+00:00",
              "vendor_category_info": {
                "id": "Merchant",
                "name": "Merchant",
                "ramp_id": "96bb7007-eec5-430f-8d09-e033cbc000c2"
              }
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/VendorAccount"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiBillResourceSchema": {
        "example": {
          "data": [
            {
              "accounting_date": "2024-05-12T00:00:00+00:00",
              "accounting_field_selections": [],
              "accounting_sync_date": "2024-05-12T00:00:00+00:00",
              "amount": {
                "amount": 96993,
                "currency_code": "USD"
              },
              "bill_owner": {
                "first_name": "John",
                "id": "96bb7007-eec5-430f-8d09-e033cbc000c2",
                "last_name": "Doe"
              },
              "created_at": "2024-05-12T01:37:27+00:00",
              "deep_link_url": null,
              "due_at": "2022-12-31T00:00:00+00:00",
              "entity_id": "5bcc3734-f03a-4756-bc4b-afeb52d738ad",
              "fx_conversion_rate": "1.0",
              "id": "6e3816e3-0e53-42ae-b075-bdb0adff10c4",
              "inventory_line_items": [
                {
                  "accounting_field_selections": [
                    {
                      "category_info": {
                        "external_id": "Category",
                        "id": "0c0d0bcc-8716-4e05-a651-4ad5e64d2b3e",
                        "name": "Category",
                        "type": "GL_ACCOUNT"
                      },
                      "external_id": "426",
                      "id": "07b4ce4d-2750-412e-aef4-6b7815f1411a",
                      "name": "Ramp Category",
                      "type": "Subsidiary"
                    }
                  ],
                  "amount": {
                    "amount": 25000,
                    "currency_code": "USD"
                  },
                  "memo": "Staplers.",
                  "unit_price": {
                    "amount": 5000,
                    "currency_code": "USD"
                  },
                  "unit_quantity": 5
                }
              ],
              "invoice_number": "432",
              "invoice_urls": ["https://receipts.ramp.com/some-url"],
              "issued_at": "2022-12-31T00:00:00+00:00",
              "line_items": [
                {
                  "accounting_field_selections": [],
                  "amount": {
                    "amount": 1998,
                    "currency_code": "USD"
                  },
                  "memo": "Telephone Headset"
                },
                {
                  "accounting_field_selections": [],
                  "amount": {
                    "amount": 94995,
                    "currency_code": "USD"
                  },
                  "memo": "2-Drawer Lateral File Cabinet Steel White"
                }
              ],
              "memo": "Office Supplies",
              "paid_at": "2024-05-15T14:02:28.298Z",
              "payment": {
                "amount": {
                  "amount": 96993,
                  "currency_code": "USD"
                },
                "effective_date": "2024-05-13T00:00:00+00:00",
                "payment_date": "2024-05-13T00:00:00+00:00",
                "payment_method": "ACH",
                "trace_id": {
                  "descriptor": "ACH Trace ID",
                  "trace_id": "076921900257224"
                }
              },
              "posting_date": "2024-05-12T00:00:00+00:00",
              "remote_id": null,
              "status": "OPEN",
              "sync_status": "NOT_SYNCED",
              "vendor": {
                "remote_code": "AMZON12",
                "remote_id": "Amazon",
                "remote_name": "Amazon",
                "type": "BUSINESS"
              },
              "vendor_contact_id": "ef825336-820e-4dd5-9d7f-0fc508e978c9",
              "vendor_memo": "Invoice #432 - July 2020"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Bill"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiCardProgramResourceSchema": {
        "example": {
          "data": [
            {
              "description": "Offer a yearly stipend for conferences and courses.",
              "display_name": "Education Stipend",
              "icon": "EducationStipendIcon",
              "id": "97ad0c67-c318-4591-9b0e-202ecceb8016",
              "is_default": false,
              "is_physical": false,
              "spending_restrictions": {
                "amount": 750,
                "categories": [33],
                "interval": "YEARLY",
                "lock_date": "2024-08-20T00:00:00+00:00",
                "transaction_amount_limit": 200
              }
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ApiCardProgramResource"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiCardResourceSchema": {
        "example": {
          "data": [
            {
              "card_program_id": null,
              "cardholder_id": "3a5b1f62-988f-4190-bf31-b7ae87c5df42",
              "cardholder_name": "Julie Phillip",
              "created_at": "2022-05-04T00:00:00+00:00",
              "display_name": "T&E",
              "entity_id": "c6c61be9-f278-47bc-a814-f98a7fc2dfdc",
              "expiration": "0227",
              "fulfillment": {
                "fulfillment_status": "ISSUED",
                "shipping": {
                  "recipient_address": {
                    "address1": "123 Main St",
                    "city": "New York City",
                    "country": "US",
                    "first_name": "Julie",
                    "last_name": "Phillip",
                    "postal_code": "10003",
                    "state": "NY"
                  }
                },
                "shipping_date": null,
                "shipping_eta": null,
                "shipping_tracking_url": null
              },
              "has_program_overridden": false,
              "id": "d8135cfe-0396-4b2d-b2cf-ad809fb04731",
              "is_physical": false,
              "last_four": "3751",
              "spending_restrictions": {
                "amount": 5000,
                "auto_lock_date": null,
                "blocked_categories": [],
                "categories": [],
                "interval": "MONTHLY",
                "suspended": false,
                "transaction_amount_limit": null
              },
              "state": "ACTIVE"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Card"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiCashbackResourceSchema": {
        "example": {
          "data": [{}],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Cashback"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiDepartmentResourceSchema": {
        "example": {
          "data": [
            {
              "id": "c16b6ee1-2f5d-45e9-9fb4-c1c541a9ea70",
              "name": "Bookkeeping"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Department"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiDraftBillResourceSchema": {
        "example": {
          "data": [{}],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/DraftBill"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiEntityResourceSchema": {
        "example": {
          "data": [
            {
              "accounts": [
                {
                  "classification": "ASSET",
                  "created_at": "2020-01-12T01:30:00+00:00",
                  "external_id": "123456",
                  "external_name": "Checking Account",
                  "internal_id": "",
                  "usage_type": "CASH_ACCOUNT"
                }
              ],
              "currency": "CAD",
              "entity_name": "Jill's Art Shop Canada",
              "id": "d290f1ee-6c54-4b01-90e6-d701748f0851",
              "is_primary": true,
              "location_ids": ["cabfda32-91a9-41d7-9d24-5c9c6dd19419"]
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ApiEntityResource"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiItemReceiptResourceSchema": {
        "example": {
          "data": [
            {
              "archived_at": null,
              "created_at": "2022-05-10T00:00:00Z",
              "documents": ["https://someurl.com"],
              "id": "123e4567-e89b-12d3-a456-426614174000",
              "item_receipt_number": "1234567890",
              "line_items": [
                {
                  "accounting_field_selections": [],
                  "amount": {
                    "amount": 100,
                    "currency_code": "USD"
                  },
                  "memo": null,
                  "purchase_order_line_item_id": "123e4567-e89b-12d3-a456-426614174000",
                  "unit_price": {
                    "amount": 500,
                    "currency_code": "USD"
                  },
                  "unit_quantity": 1
                }
              ],
              "memo": null,
              "purchase_order_id": "123e4567-e89b-12d3-a456-426614174000",
              "received_at": "2022-05-09T00:00:00Z",
              "remote_id": "1"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ApiItemReceiptResource"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiLocationResourceSchema": {
        "example": {
          "data": [
            {
              "entity_id": "bb25a7e8-cc2f-4ba7-9bf4-7730ffe152bb",
              "id": "f4efe11c-221f-4b49-a1e4-33eaf96a49ee",
              "name": "New York City, NY"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Location"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiMemoResourceSchema": {
        "example": {
          "data": [{}],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Memo"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiMerchantResourceSchema": {
        "example": {
          "data": [
            {
              "id": "d38a988c-377a-421b-9017-0c8f40a4304e",
              "is_auto_approved": true,
              "merchant_name": "Google",
              "sk_category_name": "Advertising"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Merchant"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiPurchaseOrderResourceSchema": {
        "example": {
          "data": [
            {
              "accounting_field_selections": [],
              "amount": {
                "amount": 10000,
                "currency": "USD"
              },
              "archived_at": null,
              "bill_ids": [
                "ac6b4c79-9fcd-47d5-9c7e-55b6746903ef",
                "ea0a40d9-d7c4-4cf5-a8a8-e9230fb17459"
              ],
              "billing_status": "CLOSED",
              "created_at": "2022-05-10T00:00:00Z",
              "creation_source": "ACCOUNTING_PROVIDER",
              "entity_id": "7b96a1f2-4b86-45f8-943a-f1ca6b5194d4",
              "id": "54683adc-f49d-4163-b407-f231c62943ea",
              "line_items": [
                {
                  "accounting_field_selections": [],
                  "amount": {
                    "amount": 100,
                    "currency_code": "USD"
                  },
                  "description": "my line item",
                  "id": "54683adc-f49d-4163-b407-f231c62943ea",
                  "remote_id": null,
                  "unit_price": {
                    "amount": 100,
                    "currency_code": "USD"
                  },
                  "unit_quantity": 1
                }
              ],
              "memo": "Purchase order for general software services",
              "name": "Purchase order for general software services",
              "net_payment_terms": 30,
              "promise_date": "2024-05-10T00:00:00Z",
              "purchase_order_number": "PO-0001",
              "receipt_status": "FULLY_RECEIVED",
              "spend_end_date": "2024-05-31T00:00:00Z",
              "spend_request_id": "fb718d18-5435-416b-940e-083fc637614",
              "spend_start_date": "2024-05-01T00:00:00Z",
              "spend_total_amount": {
                "amount": 10000,
                "currency_code": "USD"
              },
              "three_way_match_enabled": false,
              "transaction_ids": ["5a65cefc-5d59-40ec-9ae8-82fa657dc1b7"],
              "user_id": "54683adc-f49d-4163-b407-f231c62943ea",
              "vendor_id": "b901afe8-46d7-4f30-b7b5-3c8af127e5a0"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ApiPurchaseOrderResource"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiReceiptResourceSchema": {
        "example": {
          "data": [
            {
              "created_at": "2022-08-20T20:33:46+00:00",
              "id": "0a0ed428-0250-4993-96ad-94cd77bc86b6",
              "receipt_url": "https://receipts.ramp.com/sales_demo_instance/amazon_business_receipt.png?Expires=1661130671",
              "transaction_id": "065916d9-7bdf-4aae-a46a-9b82225f2a20",
              "user_id": "ea0d554a-78bb-4402-a3e9-2d4bc138502f"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Receipt"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiReimbursementResourceSchema": {
        "example": {
          "data": [
            {
              "accounting_field_selections": [
                {
                  "category_info": {
                    "external_id": "Category",
                    "id": "0c0d0bcc-8716-4e05-a651-4ad5e64d2b3e",
                    "name": "Category",
                    "type": "GL_ACCOUNT"
                  },
                  "external_id": "Category",
                  "id": "07b4ce4d-2750-412e-aef4-6b7815f1411c",
                  "name": "Category",
                  "type": "GL_ACCOUNT"
                }
              ],
              "amount": 484.46,
              "attendees": [
                {
                  "name": "Jack Johnson",
                  "user_id": null
                },
                {
                  "name": "Joe Johnson",
                  "user_id": "7979392e-8d41-4f97-815b-ccd7584802bf"
                }
              ],
              "created_at": "2023-08-20T:00:00+00:00",
              "currency": "USD",
              "direction": "BUSINESS_TO_USER",
              "distance": 55,
              "end_location": "456 Business Ave, Philadelphia, PA 19103",
              "entity_id": "4bec9dc1-710e-4781-b254-fc606c76a241",
              "expense_group": {
                "id": "4bec9dc1-710e-4781-b254-fc606c76a241",
                "name": "New York offsite - Feb"
              },
              "id": "d47ba06e-14ac-4a7b-89b4-4775412ba545",
              "line_items": [
                {
                  "accounting_field_selections": [
                    {
                      "category_info": {
                        "external_id": "Category",
                        "id": "0c0d0bcc-8716-4e05-a651-4ad5e64d2b3e",
                        "name": "Category",
                        "type": "GL_ACCOUNT"
                      },
                      "external_id": "425",
                      "id": "07b4ce4d-2750-412e-aef4-6b7815f1411b",
                      "name": "Ramp LP",
                      "type": "Subsidiary"
                    }
                  ],
                  "amount": {
                    "amount": 43446,
                    "currency_code": "USD"
                  }
                },
                {
                  "accounting_field_selections": [
                    {
                      "category_info": {
                        "external_id": "Category",
                        "id": "0c0d0bcc-8716-4e05-a651-4ad5e64d2b3e",
                        "name": "Category",
                        "type": "GL_ACCOUNT"
                      },
                      "external_id": "426",
                      "id": "07b4ce4d-2750-412e-aef4-6b7815f1411a",
                      "name": "Ramp BV",
                      "type": "Subsidiary"
                    }
                  ],
                  "amount": {
                    "amount": 5000,
                    "currency_code": "USD"
                  }
                }
              ],
              "memo": "Airfare for business travel",
              "merchant": "Delta Airlines",
              "merchant_id": "752ba160-72f0-4935-b405-7fc333b1e273",
              "original_reimbursement_amount": {
                "amount": 48446,
                "currency_code": "USD"
              },
              "payee_amount": {
                "amount": 48446,
                "currency_code": "USD"
              },
              "payment_id": "NDPHKHCN6G",
              "receipts": [],
              "spend_limit_id": "92a68991-8374-4c0a-b5c0-5180c41b5148",
              "start_location": "123 Main St, Scranton, PA 18503",
              "state": "REIMBURSED",
              "submitted_at": "2023-08-20T:00:00+00:00",
              "synced_at": "2023-08-21T:00:00+00:00",
              "transaction_date": "2022-08-19",
              "trip_id": "ec6aae2b-38c6-4eeb-adf0-80f25dbf9aad",
              "type": "OUT_OF_POCKET",
              "updated_at": "2023-08-22T:00:00+00:00",
              "user_email": "dwight@dundermilflin.com",
              "user_full_name": "Dwight Schrute",
              "user_id": "7979392e-8d41-4f97-815b-ccd7584802bf",
              "waypoints": ["789 Highway Stop, Allentown, PA 18101"]
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Reimbursement"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiSpendLimitResourceSchema": {
        "example": {
          "data": [
            {
              "balance": {
                "cleared": {
                  "amount": 6500,
                  "currency_code": "USD"
                },
                "pending": {
                  "amount": 3500,
                  "currency_code": "USD"
                },
                "total": {
                  "amount": 10000,
                  "currency_code": "USD"
                }
              },
              "cards": [
                {
                  "card_id": "a40a6ce8-70d4-4d06-91e1-0728ad9bbe39",
                  "expiration": "0227",
                  "is_ap_card": false,
                  "last_four": "2543",
                  "via_new_product_or_service": false
                }
              ],
              "created_at": "2024-05-12T01:37:27+00:00",
              "display_name": "T&E",
              "entity_id": "c18d9d2e-964f-476d-8bb3-9ac078f00e11",
              "has_program_overridden": false,
              "id": "d8135cfe-0396-4b2d-b2cf-ad809fb04731",
              "is_shareable": true,
              "permitted_spend_types": {
                "primary_card_enabled": true,
                "reimbursements_enabled": false
              },
              "restrictions": {
                "auto_lock_date": null,
                "categories_whitelist": [35],
                "interval": "MONTHLY",
                "limit": 500,
                "next_interval_reset": "2022-12-01T00:00:00+00:00",
                "start_of_interval_date": "2022-11-01T00:00:00+00:00",
                "temporary_limit": null,
                "transaction_amount_limit": 200,
                "vendor_blacklist": [61]
              },
              "spend_program_id": "3a5b1f62-988f-4190-bf31-b7ae87c5dfee",
              "state": "ACTIVE",
              "suspension": {
                "acting_user_id": "e9186c3a-4650-48ef-aee4-56b77f5019bd",
                "inserted_at": "2022-11-03T00:00:00+00:00",
                "suspended_by_ramp": false
              },
              "users": [
                {
                  "user_id": "2ba219ba-5867-453f-bec2-b8d0414b7f75"
                }
              ]
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Limit"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiSpendProgramResourceSchema": {
        "example": {
          "data": [
            {
              "description": "Offer a yearly stipend for conferences and courses.",
              "display_name": "Education Stipend",
              "icon": "EducationStipendIcon",
              "id": "796dab75-a23f-4e2a-984e-20da003c38ef",
              "is_shareable": true,
              "issue_physical_card_if_needed": false,
              "permitted_spend_types": {
                "primary_card_enabled": true,
                "reimbursements_enabled": true
              },
              "restrictions": {
                "allowed_categories": [33],
                "allowed_vendors": [],
                "auto_lock_date": "2025-10-28T00:00:00+00:00",
                "blocked_categories": [],
                "blocked_vendors": [],
                "interval": "YEARLY",
                "limit": {
                  "amount": 75000,
                  "currency_code": "USD"
                },
                "next_interval_reset": "2024-01-01T00:00:00+00:00",
                "start_of_interval": "2023-01-01T00:00:00+00:00",
                "temporary_limit": null,
                "transaction_amount_limit": null
              }
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ApiSpendProgramResource"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiStatementResourceSchema": {
        "example": {
          "data": [
            {
              "balance_sections": [
                {
                  "charges": {
                    "amount": 180061925,
                    "currency_code": "USD"
                  },
                  "credits": {
                    "amount": 0,
                    "currency_code": "USD"
                  },
                  "ending_balance": {
                    "amount": 178098867,
                    "currency_code": "USD"
                  },
                  "entity_id": "9d8abf0f-389c-4a18-816e-a6e1c5784624",
                  "id": "6ff695fd-b09b-4529-a622-545d6c059129",
                  "opening_balance": {
                    "amount": 0,
                    "currency_code": "USD"
                  },
                  "payments": {
                    "amount": 1963058,
                    "currency_code": "USD"
                  }
                }
              ],
              "charges": {
                "amount": 180061925,
                "currency_code": "USD"
              },
              "credits": {
                "amount": 0,
                "currency_code": "USD"
              },
              "end_date": "2023-05-08T08:39:37+00:00",
              "ending_balance": {
                "amount": 178098867,
                "currency_code": "USD"
              },
              "id": "df44006c-410b-420e-80a2-1522a2e5b722",
              "opening_balance": {
                "amount": 0,
                "currency_code": "USD"
              },
              "payments": {
                "amount": 1963058,
                "currency_code": "USD"
              },
              "start_date": "2023-05-06T08:51:57+00:00",
              "statement_lines": [
                {
                  "id": "06a09605-b0b8-4c89-b29f-d12c6aabac58",
                  "type": "CARD_TRANSACTION"
                },
                {
                  "id": "0f01bc2d-04cf-407a-8442-bcbdaf1c07f8",
                  "type": "CARD_TRANSACTION"
                },
                {
                  "id": "2682717d-8231-46f2-9e02-c0f4f7ef410a",
                  "type": "TRANSFER_PAYMENT"
                },
                {
                  "id": "415fe9fb-1608-4cd6-ac8b-d2fbb85bdc11",
                  "type": "CARD_TRANSACTION"
                },
                {
                  "id": "4c7700b6-1ff9-4228-9b13-73b38d5a7623",
                  "type": "CARD_TRANSACTION"
                },
                {
                  "id": "61b89311-f0b3-4689-91ee-8edb72054de4",
                  "type": "CARD_TRANSACTION"
                },
                {
                  "id": "78c9eac8-67ae-443d-998a-f416e959225c",
                  "type": "CASHBACK"
                },
                {
                  "id": "af87a6bd-929a-4de6-85f3-0105a046a608",
                  "type": "CARD_TRANSACTION"
                }
              ],
              "statement_url": "https://statements.ramp.com/businesses/my-widget-store/1baa7091-d312-883f-0938-19387462a9eb/Ramp_Statement_20211127-20211227/2021-11-27-my-widget-store-overview.pdf?Expires=1704717900&Signature=uz7vpgRv1e23POuT__&Key-Pair-Id=b8AgE+b8MZ6GL5Wv"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Statement"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiTransactionCanonicalSchema": {
        "example": {
          "data": [
            {
              "accounting_categories": [],
              "accounting_date": "2022-05-03T00:00:00+00:00",
              "accounting_field_selections": [
                {
                  "category_info": {
                    "external_id": "Category",
                    "id": "0c0d0bcc-8716-4e05-a651-4ad5e64d2b3e",
                    "name": "Category",
                    "type": "GL_ACCOUNT"
                  },
                  "external_id": "Category",
                  "id": "07b4ce4d-2750-412e-aef4-6b7815f1411c",
                  "name": "Category",
                  "type": "GL_ACCOUNT"
                }
              ],
              "amount": 90.0,
              "attendees": [
                {
                  "name": "Jack Johnson",
                  "user_id": null
                },
                {
                  "name": "Joe Johnson",
                  "user_id": "7979392e-8d41-4f97-815b-ccd7584802bf"
                }
              ],
              "card_holder": {
                "department_id": "d471d830-2e73-4082-8a75-68540f83e86e",
                "department_name": "Executive",
                "first_name": "Patrick",
                "last_name": "Robinson",
                "location_id": "4fcf3423-a2e6-42f6-8dd8-9b3a8c51e069",
                "location_name": "San Francisco",
                "user_id": "a26c82c9-6b7d-4022-bc4b-a55b4c4743c7"
              },
              "card_id": "6bc41b14-f853-4862-bae5-4f122f123f6e",
              "currency_code": "USD",
              "disputes": [],
              "entity_id": "24850cdb-1b3f-4eb9-bf20-967ca9f97605",
              "id": "fd14cd6a-846e-4994-9315-5a59e6bb465f",
              "limit_id": "5e25f547-bd09-40ad-aab3-b8fefdf16885",
              "line_items": [
                {
                  "accounting_field_selections": [
                    {
                      "category_info": {
                        "external_id": "Subsidiary",
                        "id": "15e9565d-7e73-40d8-9fbc-5f6f89b1c075",
                        "name": "Subsidiary",
                        "type": "SUBSIDIARY"
                      },
                      "external_id": "425",
                      "id": "07b4ce4d-2750-412e-aef4-6b7815f1411b",
                      "name": "Ramp LP",
                      "type": "Subsidiary"
                    }
                  ],
                  "amount": {
                    "amount": 4000,
                    "currency_code": "USD"
                  },
                  "converted_amount": {
                    "amount": 4000,
                    "currency_code": "USD"
                  }
                },
                {
                  "accounting_field_selections": [
                    {
                      "category_info": {
                        "external_id": "Subsidiary",
                        "id": "15e9565d-7e73-40d8-9fbc-5f6f89b1c075",
                        "name": "Subsidiary",
                        "type": "SUBSIDIARY"
                      },
                      "external_id": "426",
                      "id": "07b4ce4d-2750-412e-aef4-6b7815f1411a",
                      "name": "Ramp BV",
                      "type": "SUBSIDIARY"
                    }
                  ],
                  "amount": {
                    "amount": 5000,
                    "currency_code": "USD"
                  },
                  "converted_amount": {
                    "amount": 5000,
                    "currency_code": "USD"
                  }
                }
              ],
              "memo": null,
              "merchant_category_code": null,
              "merchant_category_code_description": null,
              "merchant_data": {
                "auto_rental": null,
                "flight": null,
                "fuel": null,
                "lodging": null,
                "receipt": [
                  {
                    "commodity_code": null,
                    "description": "Vanta Automated Compliance",
                    "discount": null,
                    "quantity": 1,
                    "tax": null,
                    "total": 5000,
                    "unit_cost": 5000
                  },
                  {
                    "commodity_code": null,
                    "description": "Vanta Risk Management",
                    "discount": null,
                    "quantity": 1,
                    "tax": null,
                    "total": 4000,
                    "unit_cost": 4000
                  }
                ],
                "reference": "343165593943"
              },
              "merchant_descriptor": "VANTA",
              "merchant_id": "2907e304-cac2-4abf-84c4-b3b454ae3b8c",
              "merchant_location": {
                "city": "SAN FRANCISCO",
                "country": "USA",
                "postal_code": "941050000",
                "state": "06"
              },
              "merchant_name": "Vanta",
              "original_transaction_amount": {
                "amount": 9000,
                "currency_code": "EUR"
              },
              "policy_violations": [],
              "receipts": [],
              "settlement_date": "2022-05-03T00:00:00+00:00",
              "sk_category_id": "40,41",
              "sk_category_name": "SaaS / Software",
              "spend_program_id": "4a2b8c1e-9f63-4d75-ae12-3b9d47f85e29",
              "state": "CLEARED",
              "synced_at": "2022-05-04T00:00:00+00:00",
              "trip_id": "ec6aae2b-38c6-4eeb-adf0-80f25dbf9aad",
              "trip_name": "Trip to Europe",
              "user_transaction_time": "2022-04-28T00:00:00+00:00"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiTransferResourceSchema": {
        "example": {
          "data": [{}],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Transfer"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiUserResourceSchema": {
        "example": {
          "data": [
            {
              "business_id": "9abffcf0-dd7d-42f0-b806-ce0502ab6496",
              "custom_fields": [
                {
                  "name": "Cost Center",
                  "value": "R&D - Data"
                },
                {
                  "name": "Employee ID",
                  "value": "f4efe11c-337f-49a5-86b3-5df128233f2c"
                },
                {
                  "name": "Region",
                  "value": "EMEA"
                },
                {
                  "name": "Team",
                  "value": "Core Platform"
                }
              ],
              "department_id": "2d68eb67-f6eb-4284-8683-7d530c77a5a6",
              "email": "cardholder_7@company.com",
              "employee_id": "f4efe11c-337f-49a5-86b3-5df128233f2c",
              "entity_id": "0e90959a-28ba-4f7d-a75b-9c241f384b9a",
              "first_name": "Linda",
              "id": "bde8334e-042e-4f39-9a5d-355ae17342e6",
              "is_manager": false,
              "last_name": "Gu",
              "location_id": "f4efe11c-221f-4b49-a1e4-33eaf96a49ee",
              "manager_id": "ccc5d4cc-337f-49a5-86b3-5df128233f2c",
              "phone": 8004559999,
              "role": "BUSINESS_USER",
              "status": "USER_ACTIVE"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiVendorBankAccountResource": {
        "example": {
          "data": [{}],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ApiVendorBankAccountResource"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiVendorContactResourceSchema": {
        "example": {
          "data": [{}],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ApiVendorContactResource"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiVendorResourceSchema": {
        "example": {
          "data": [
            {
              "accounting_vendor_remote_id": "1234",
              "address": {
                "address_line_1": "442 Good St",
                "address_line_2": null,
                "city": "San Diego",
                "country": "US",
                "postal_code": "94105",
                "state": "CA"
              },
              "billing_frequency": null,
              "contacts": [
                "315eb85a-3a60-45ba-8d1c-67385cd0281f",
                "5453d095-38ad-4656-8d73-df4e204a51b4"
              ],
              "country": "US",
              "created_at": "2024-05-12T02:23:00+00:00",
              "description": "Vendor for art supplies",
              "federal_tax_classification": "C_CORPORATION",
              "id": "4f08baf7-e3f0-4271-aedd-4d2c2214ed9a",
              "is_active": true,
              "is_deletable": false,
              "merchant_id": null,
              "name": "Ali's Art shop",
              "name_legal": "Ali's Art shop LLC",
              "sk_category_id": 30,
              "sk_category_name": "General merchandise",
              "state": "CA",
              "tax_address": {
                "address_line_1": "1234 Main St",
                "address_line_2": "Suite 200",
                "city": "San Diego",
                "country": "US",
                "postal_code": "94105",
                "state": "CA"
              },
              "total_spend_all_time": {
                "amount": 18500,
                "currency_code": "USD"
              },
              "total_spend_last_30_days": {
                "amount": 18500,
                "currency_code": "USD"
              },
              "total_spend_last_365_days": {
                "amount": 18500,
                "currency_code": "USD"
              },
              "total_spend_ytd": {
                "amount": 18500,
                "currency_code": "USD"
              },
              "vendor_owner_id": "8ca6cfe2-2bea-46f9-998b-56c1a8ac9454",
              "vendor_type": "BUSINESS"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Vendor"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseCustomRowDataWithLoadedReferences": {
        "example": {
          "data": [
            {
              "cells": [
                {
                  "column_display_name": "Country",
                  "column_id": "<column_id>",
                  "value": {
                    "has_more": false,
                    "rows": [
                      {
                        "display_name": "USA",
                        "external_key": "USA",
                        "row_id": "<row_id>",
                        "type": "custom_table"
                      }
                    ],
                    "table_name": "countries",
                    "type": "custom_table"
                  }
                },
                {
                  "column_display_name": "Regional Director",
                  "column_id": "<column_id>",
                  "value": {
                    "has_more": false,
                    "rows": [
                      {
                        "display_name": "John Doe",
                        "external_key": "<existing_ramp_user_uuid>",
                        "row_id": "<row_id>",
                        "type": "native_table"
                      }
                    ],
                    "table_name": "users",
                    "type": "native_table"
                  }
                },
                {
                  "column_display_name": "States",
                  "column_id": "<column_id>",
                  "value": {
                    "has_more": true,
                    "rows": [
                      {
                        "display_name": "Arizona",
                        "external_key": "Arizona",
                        "row_id": "<row_id>",
                        "type": "custom_table"
                      },
                      {
                        "display_name": "California",
                        "external_key": "California",
                        "row_id": "<row_id>",
                        "type": "custom_table"
                      },
                      {
                        "display_name": "New Jersey",
                        "external_key": "New Jersey",
                        "row_id": "<row_id>",
                        "type": "custom_table"
                      },
                      {
                        "display_name": "New York",
                        "external_key": "New York",
                        "row_id": "<row_id>",
                        "type": "custom_table"
                      },
                      {
                        "display_name": "Texas",
                        "external_key": "Texas",
                        "row_id": "<row_id>",
                        "type": "custom_table"
                      }
                    ],
                    "table_name": "states",
                    "type": "custom_table"
                  }
                }
              ],
              "external_key": "Northeast",
              "id": "<row_id>"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CustomRowDataWithLoadedReferences"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseCustomTableReferenceUsingLabelAndName": {
        "example": {
          "data": [
            {
              "table_label": "Teams",
              "table_name": "teams",
              "type": "custom_table"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CustomTableReferenceUsingLabelAndName"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseDeveloperApiCustomRecordColumn": {
        "example": {
          "data": [
            {
              "allows_writes": true,
              "display_name": "Country",
              "id": "<column_id>",
              "name": "country",
              "type": "custom_reference"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/DeveloperApiCustomRecordColumn"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseNativeTableReference": {
        "example": {
          "data": [
            {
              "table_name": "users",
              "type": "native_table"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/NativeTableReference"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PartialApiCardSpendingRestrictionsUpdateRequestBody": {
        "properties": {
          "amount": {
            "description": "Amount limit total per interval.",
            "minimum": 0,
            "oneOf": [
              {
                "format": "decimal",
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          },
          "blocked_mcc_codes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "categories": {
            "description": "List of [Ramp Category Codes](/developer-api/v1/overview/conventions#ramp-category-codes) this card is restricted to.",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "categories_blacklist": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "categories_whitelist": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "currency": {
            "description": "Currency in which the amount is specified.",
            "type": "string"
          },
          "interval": {
            "description": "Time interval to apply limit to.",
            "enum": ["ANNUAL", "DAILY", "MONTHLY", "QUARTERLY", "TERTIARY", "TOTAL", "WEEKLY", "YEARLY"],
            "type": "string"
          },
          "lock_date": {
            "description": "Date to automatically lock the card. If `lock_date` has passed, set to a future date or to null to unlock the card.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "policy_id": {
            "type": "string"
          },
          "transaction_amount_limit": {
            "description": "Max amount limit per transaction.",
            "minimum": 0,
            "oneOf": [
              {
                "format": "decimal",
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          },
          "vendor_blacklist": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "vendor_whitelist": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object",
        "x-resource-name": "card_spending_restrictions_update"
      },
      "PayeeCustomFieldMappedFieldSchema": {
        "properties": {
          "mapped_custom_form_field_field_id": {
            "title": "Mapped Custom Form Field Field Id",
            "type": "string"
          },
          "mapped_field": {
            "enum": ["PAYEE__CUSTOM_FIELD"],
            "title": "Mapped Field",
            "type": "string"
          }
        },
        "required": ["mapped_custom_form_field_field_id", "mapped_field"],
        "title": "PayeeCustomFieldMappedFieldSchema",
        "type": "object"
      },
      "PayeeDescriptionMappedFieldSchema": {
        "properties": {
          "mapped_field": {
            "enum": ["PAYEE__DESCRIPTION"],
            "title": "Mapped Field",
            "type": "string"
          }
        },
        "required": ["mapped_field"],
        "title": "PayeeDescriptionMappedFieldSchema",
        "type": "object"
      },
      "PayeeDocumentCategory": {
        "enum": [
          "CAIQ_LITE",
          "CERTIFICATE_OF_INSURANCE",
          "DATA_PROTECTION_AGREEMENT",
          "ECOVADIS",
          "FAQ",
          "GDPR",
          "HIPAA",
          "ISO_27001",
          "ISO_9001",
          "MSA",
          "NDA",
          "NMSDC_CERTIFICATION",
          "ORDER_FORM",
          "OTHER",
          "PAYMENT_INSTRUCTIONS",
          "PCI_DSS",
          "PEN_TEST_REPORT",
          "PRIVACY_POLICY",
          "QUOTE",
          "SECURITY_DOCUMENT",
          "SIG",
          "SOC_1_TYPE_1",
          "SOC_1_TYPE_2",
          "SOC_2",
          "SOW",
          "TAX_DOCUMENT",
          "VENDOR_CONTRACT",
          "VOIDED_CHECK",
          "W8",
          "W9"
        ],
        "title": "PayeeDocumentCategory",
        "type": "string"
      },
      "PayeeNetPaymentTermsMappedFieldSchema": {
        "properties": {
          "mapped_field": {
            "enum": ["PAYEE__NET_PAYMENT_TERMS"],
            "title": "Mapped Field",
            "type": "string"
          }
        },
        "required": ["mapped_field"],
        "title": "PayeeNetPaymentTermsMappedFieldSchema",
        "type": "object"
      },
      "PolyObjectValuePoly": {
        "properties": {
          "object_type": {
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/SingleObject"
            },
            "type": "array"
          },
          "operand_type": {
            "enum": ["OBJECT_LIST"],
            "type": "string"
          }
        },
        "required": ["object_type", "objects", "operand_type"],
        "type": "object"
      },
      "PurchaseOrderAttachmentsMappedFieldSchema": {
        "properties": {
          "mapped_field": {
            "enum": ["PURCHASE_ORDER__ATTACHMENTS"],
            "title": "Mapped Field",
            "type": "string"
          }
        },
        "required": ["mapped_field"],
        "title": "PurchaseOrderAttachmentsMappedFieldSchema",
        "type": "object"
      },
      "PurchaseOrderBillToAddressMappedFieldSchema": {
        "properties": {
          "mapped_field": {
            "enum": ["PURCHASE_ORDER__BILL_TO_ADDRESS"],
            "title": "Mapped Field",
            "type": "string"
          }
        },
        "required": ["mapped_field"],
        "title": "PurchaseOrderBillToAddressMappedFieldSchema",
        "type": "object"
      },
      "PurchaseOrderBillingContactMappedFieldSchema": {
        "properties": {
          "mapped_field": {
            "enum": ["PURCHASE_ORDER__BILLING_CONTACT"],
            "title": "Mapped Field",
            "type": "string"
          }
        },
        "required": ["mapped_field"],
        "title": "PurchaseOrderBillingContactMappedFieldSchema",
        "type": "object"
      },
      "PurchaseOrderMemoMappedFieldSchema": {
        "properties": {
          "mapped_field": {
            "enum": ["PURCHASE_ORDER__MEMO"],
            "title": "Mapped Field",
            "type": "string"
          }
        },
        "required": ["mapped_field"],
        "title": "PurchaseOrderMemoMappedFieldSchema",
        "type": "object"
      },
      "PurchaseOrderNetPaymentTermsMappedFieldSchema": {
        "properties": {
          "mapped_field": {
            "enum": ["PURCHASE_ORDER__NET_PAYMENT_TERMS"],
            "title": "Mapped Field",
            "type": "string"
          }
        },
        "required": ["mapped_field"],
        "title": "PurchaseOrderNetPaymentTermsMappedFieldSchema",
        "type": "object"
      },
      "PurchaseOrderPayeeAddressMappedFieldSchema": {
        "properties": {
          "mapped_field": {
            "enum": ["PURCHASE_ORDER__PAYEE_ADDRESS"],
            "title": "Mapped Field",
            "type": "string"
          }
        },
        "required": ["mapped_field"],
        "title": "PurchaseOrderPayeeAddressMappedFieldSchema",
        "type": "object"
      },
      "PurchaseOrderPayeeContactMappedFieldSchema": {
        "properties": {
          "mapped_field": {
            "enum": ["PURCHASE_ORDER__PAYEE_CONTACT"],
            "title": "Mapped Field",
            "type": "string"
          }
        },
        "required": ["mapped_field"],
        "title": "PurchaseOrderPayeeContactMappedFieldSchema",
        "type": "object"
      },
      "PurchaseOrderPromiseDateMappedFieldSchema": {
        "properties": {
          "mapped_field": {
            "enum": ["PURCHASE_ORDER__PROMISE_DATE"],
            "title": "Mapped Field",
            "type": "string"
          }
        },
        "required": ["mapped_field"],
        "title": "PurchaseOrderPromiseDateMappedFieldSchema",
        "type": "object"
      },
      "PurchaseOrderShipToAddressMappedFieldSchema": {
        "properties": {
          "mapped_field": {
            "enum": ["PURCHASE_ORDER__SHIP_TO_ADDRESS"],
            "title": "Mapped Field",
            "type": "string"
          }
        },
        "required": ["mapped_field"],
        "title": "PurchaseOrderShipToAddressMappedFieldSchema",
        "type": "object"
      },
      "PurchaseOrderShippingContactMappedFieldSchema": {
        "properties": {
          "mapped_field": {
            "enum": ["PURCHASE_ORDER__SHIPPING_CONTACT"],
            "title": "Mapped Field",
            "type": "string"
          }
        },
        "required": ["mapped_field"],
        "title": "PurchaseOrderShippingContactMappedFieldSchema",
        "type": "object"
      },
      "PutCustomRowRequestBody": {
        "example": {
          "data": [
            {
              "cells": [
                {
                  "contents": "United States",
                  "name": "country"
                },
                {
                  "contents": {
                    "column_name": "email",
                    "value": "<existing_ramp_user_email>"
                  },
                  "name": "regional_director"
                }
              ],
              "external_key": "Southwest"
            },
            {
              "cells": [
                {
                  "contents": "United States",
                  "name": "country"
                },
                {
                  "contents": {
                    "column_name": "email",
                    "value": "<existing_ramp_user_email>"
                  },
                  "name": "regional_directors"
                },
                {
                  "contents": {
                    "column_name": "id",
                    "value": "<existing_ramp_user_uuid>"
                  },
                  "name": "regional_directors"
                }
              ],
              "external_key": "Northeast"
            }
          ]
        },
        "properties": {
          "data": {
            "description": "List of rows to insert or update. All entries must have the same set of column names, with `null` provided to indicate that a value should not be set.",
            "items": {
              "$ref": "#/components/schemas/CustomRowColumnContentsByColumnNameRequestBody"
            },
            "type": "array"
          }
        },
        "required": ["data"],
        "type": "object"
      },
      "PutCustomRowResponse": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/NumInsertedNumUpdated"
          }
        },
        "required": ["metadata"],
        "type": "object"
      },
      "PutNativeRowRequestBody": {
        "example": {
          "data": [
            {
              "cells": [
                {
                  "contents": "California",
                  "name": "home_state"
                },
                {
                  "contents": {
                    "column_name": "email",
                    "value": "<another_existing_ramp_user_email>"
                  },
                  "name": "budget_managers"
                },
                {
                  "contents": {
                    "column_name": "email",
                    "value": "<existing_ramp_user_email>"
                  },
                  "name": "budget_managers"
                }
              ],
              "row": {
                "column_name": "email",
                "value": "<existing_ramp_user_email>"
              }
            },
            {
              "cells": [
                {
                  "contents": "New York",
                  "name": "home_state"
                },
                {
                  "contents": null,
                  "name": "budget_managers"
                }
              ],
              "row": {
                "column_name": "id",
                "value": "<existing_ramp_user_uuid>"
              }
            }
          ]
        },
        "properties": {
          "data": {
            "description": "List of rows to insert or update. All entries must have the same set of column names, with `null` provided to indicate that a value should not be set.",
            "items": {
              "$ref": "#/components/schemas/NativeRowColumnContentsByColumnNameRequestBody"
            },
            "type": "array"
          }
        },
        "required": ["data"],
        "type": "object"
      },
      "Receipt": {
        "example": {
          "created_at": "2022-08-20T20:33:46+00:00",
          "id": "0a0ed428-0250-4993-96ad-94cd77bc86b6",
          "receipt_url": "https://receipts.ramp.com/sales_demo_instance/amazon_business_receipt.png?Expires=1661130671",
          "transaction_id": "065916d9-7bdf-4aae-a46a-9b82225f2a20",
          "user_id": "ea0d554a-78bb-4402-a3e9-2d4bc138502f"
        },
        "properties": {
          "created_at": {
            "description": "Timestamp when the receipt was created.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the receipt.",
            "format": "uuid",
            "type": "string"
          },
          "receipt_url": {
            "description": "Pre-signed URL to download receipt image (valid for 1 hour by default).",
            "readOnly": true,
            "type": "string"
          },
          "transaction_id": {
            "description": "Transaction associated with this receipt.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "transactions",
              "type": "many-to-one"
            }
          },
          "user_id": {
            "description": "User who uploaded the receipt.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "users",
              "type": "many-to-one"
            }
          }
        },
        "required": ["receipt_url"],
        "type": "object",
        "x-resource-name": "receipts"
      },
      "Reimbursement": {
        "example": {
          "accounting_field_selections": [
            {
              "category_info": {
                "external_id": "Category",
                "id": "0c0d0bcc-8716-4e05-a651-4ad5e64d2b3e",
                "name": "Category",
                "type": "GL_ACCOUNT"
              },
              "external_id": "Category",
              "id": "07b4ce4d-2750-412e-aef4-6b7815f1411c",
              "name": "Category",
              "type": "GL_ACCOUNT"
            }
          ],
          "amount": 484.46,
          "attendees": [
            {
              "name": "Jack Johnson",
              "user_id": null
            },
            {
              "name": "Joe Johnson",
              "user_id": "7979392e-8d41-4f97-815b-ccd7584802bf"
            }
          ],
          "created_at": "2023-08-20T:00:00+00:00",
          "currency": "USD",
          "direction": "BUSINESS_TO_USER",
          "distance": 55,
          "end_location": "456 Business Ave, Philadelphia, PA 19103",
          "entity_id": "4bec9dc1-710e-4781-b254-fc606c76a241",
          "expense_group": {
            "id": "4bec9dc1-710e-4781-b254-fc606c76a241",
            "name": "New York offsite - Feb"
          },
          "id": "d47ba06e-14ac-4a7b-89b4-4775412ba545",
          "line_items": [
            {
              "accounting_field_selections": [
                {
                  "category_info": {
                    "external_id": "Category",
                    "id": "0c0d0bcc-8716-4e05-a651-4ad5e64d2b3e",
                    "name": "Category",
                    "type": "GL_ACCOUNT"
                  },
                  "external_id": "425",
                  "id": "07b4ce4d-2750-412e-aef4-6b7815f1411b",
                  "name": "Ramp LP",
                  "type": "Subsidiary"
                }
              ],
              "amount": {
                "amount": 43446,
                "currency_code": "USD"
              }
            },
            {
              "accounting_field_selections": [
                {
                  "category_info": {
                    "external_id": "Category",
                    "id": "0c0d0bcc-8716-4e05-a651-4ad5e64d2b3e",
                    "name": "Category",
                    "type": "GL_ACCOUNT"
                  },
                  "external_id": "426",
                  "id": "07b4ce4d-2750-412e-aef4-6b7815f1411a",
                  "name": "Ramp BV",
                  "type": "Subsidiary"
                }
              ],
              "amount": {
                "amount": 5000,
                "currency_code": "USD"
              }
            }
          ],
          "memo": "Airfare for business travel",
          "merchant": "Delta Airlines",
          "merchant_id": "752ba160-72f0-4935-b405-7fc333b1e273",
          "original_reimbursement_amount": {
            "amount": 48446,
            "currency_code": "USD"
          },
          "payee_amount": {
            "amount": 48446,
            "currency_code": "USD"
          },
          "payment_id": "NDPHKHCN6G",
          "receipts": [],
          "spend_limit_id": "92a68991-8374-4c0a-b5c0-5180c41b5148",
          "start_location": "123 Main St, Scranton, PA 18503",
          "state": "REIMBURSED",
          "submitted_at": "2023-08-20T:00:00+00:00",
          "synced_at": "2023-08-21T:00:00+00:00",
          "transaction_date": "2022-08-19",
          "trip_id": "ec6aae2b-38c6-4eeb-adf0-80f25dbf9aad",
          "type": "OUT_OF_POCKET",
          "updated_at": "2023-08-22T:00:00+00:00",
          "user_email": "dwight@dundermilflin.com",
          "user_full_name": "Dwight Schrute",
          "user_id": "7979392e-8d41-4f97-815b-ccd7584802bf",
          "waypoints": ["789 Highway Stop, Allentown, PA 18101"]
        },
        "properties": {
          "accounting_date": {
            "description": "The date for the reimbursement for accounting purposes. If not specified, falls back to the transaction date.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "accounting_field_selections": {
            "description": "List of accounting fields selected to code the reimbursement.",
            "items": {
              "$ref": "#/components/schemas/ApiReimbursementAccountingFieldSelection"
            },
            "type": "array"
          },
          "amount": {
            "description": "The amount that the payor pays.",
            "type": "number"
          },
          "approved_at": {
            "description": "Time at which the reimbursement is approved. Presented in ISO8601 format.",
            "format": "date-time",
            "type": "string"
          },
          "attendees": {
            "description": "List of attendees for the reimbursement.",
            "items": {
              "$ref": "#/components/schemas/ApiReimbursementAttendee"
            },
            "type": "array"
          },
          "created_at": {
            "description": "Time at which the reimbursement is created. Presented in ISO8601 format.",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "The currency that the payor pays with.",
            "type": "string"
          },
          "direction": {
            "description": "The direction of the reimbursement. It could be either BUSINESS_TO_USER or USER_TO_BUSINESS.",
            "enum": ["BUSINESS_TO_USER", "USER_TO_BUSINESS"],
            "type": "string"
          },
          "distance": {
            "description": "The distance of the reimbursement in miles, for mileage reimbursements.",
            "nullable": true,
            "type": "number"
          },
          "employee_id": {
            "description": "Employee ID of the person who made the reimbursement.",
            "type": "string"
          },
          "end_location": {
            "description": "Ending location of the trip, for mileage reimbursements.",
            "nullable": true,
            "type": "string"
          },
          "entity_id": {
            "description": "Unique identifier of the associated business entity.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "entities",
              "type": "many-to-one"
            }
          },
          "id": {
            "description": "Unique identifier of the reimbursement.",
            "format": "uuid",
            "type": "string"
          },
          "line_items": {
            "description": "List of line items related to the reimbursement.",
            "items": {
              "$ref": "#/components/schemas/ApiReimbursementLineItem"
            },
            "type": "array"
          },
          "memo": {
            "description": "Reimbursement memo",
            "type": "string"
          },
          "merchant": {
            "description": "The name of the merchant that the reimbursement is associated with.",
            "type": "string"
          },
          "merchant_id": {
            "description": "The unique identifier of the merchant. Note that this field may be empty when merchant is populated if Ramp does not recognize the merchant.",
            "format": "uuid",
            "nullable": true,
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "merchants",
              "type": "many-to-one"
            }
          },
          "original_reimbursement_amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Original reimbursement amount before the currency conversion.",
            "nullable": true
          },
          "payee_amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Amount and currency received by the payee.",
            "nullable": true
          },
          "payment_id": {
            "description": "The unique identifier of the payment batch that the reimbursement is associated with, once paid.",
            "nullable": true,
            "type": "string"
          },
          "receipts": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "spend_limit_id": {
            "description": "Spend limit to which the reimbursement is attributed, if it exists.",
            "format": "uuid",
            "nullable": true,
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "limits",
              "type": "many-to-one"
            }
          },
          "start_location": {
            "description": "Starting location of the trip, for mileage reimbursements.",
            "nullable": true,
            "type": "string"
          },
          "state": {
            "description": "current state of the reimbursement.",
            "enum": [
              "APPROVED",
              "AWAITING_EXPORT",
              "AWAITING_PAYMENT",
              "AWAITING_PUSH_PAYMENT",
              "CANCELED",
              "DELETED",
              "DRAFT",
              "EXPORTED",
              "EXPORT_FAILED",
              "EXPORT_INITIATED",
              "EXPORT_SUCCESSFUL",
              "FAILED_REIMBURSEMENT",
              "INIT",
              "MANUALLY_REIMBURSED",
              "MISSING_ACH",
              "PENDING",
              "PROCESSING",
              "PUSH_PAYMENT_FAILED",
              "PUSH_PAYMENT_INITIATED",
              "REIMBURSED",
              "REIMBURSED_VIA_PUSH",
              "REJECTED"
            ],
            "type": "string"
          },
          "submitted_at": {
            "description": "Time when reimbursement was most recently submitted",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "sync_status": {
            "description": "Current sync status of the reimbursement.",
            "enum": ["NOT_SYNC_READY", "SYNCED", "SYNC_READY"],
            "readOnly": true,
            "type": "string"
          },
          "synced_at": {
            "description": "Time when reimbursement has been synced. Will be None if the reimbursement is not synced.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "transaction_date": {
            "format": "date",
            "type": "string"
          },
          "trip_id": {
            "description": "Trip ID associated with the reimbursement if a Trip ID is available.",
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "description": "The type of the reimbursement.",
            "enum": ["MILEAGE", "OUT_OF_POCKET", "PAYBACK_FULL", "PAYBACK_PARTIAL", "PER_DIEM"],
            "type": "string"
          },
          "updated_at": {
            "description": "Time at which the reimbursement was last updated. Presented in ISO8601 format.",
            "format": "date-time",
            "type": "string"
          },
          "user_email": {
            "description": "Email of the person who made the reimbursement.",
            "type": "string"
          },
          "user_full_name": {
            "description": "Full name of the person who made the reimbursement.",
            "type": "string"
          },
          "user_id": {
            "description": "Unique identifier of the person who made the reimbursement.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "users",
              "type": "many-to-one"
            }
          },
          "waypoints": {
            "description": "List of intermediate stops during the trip, for mileage reimbursements.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "accounting_date",
          "created_at",
          "currency",
          "direction",
          "distance",
          "end_location",
          "id",
          "merchant_id",
          "original_reimbursement_amount",
          "payee_amount",
          "payment_id",
          "spend_limit_id",
          "start_location",
          "state",
          "submitted_at",
          "sync_status",
          "synced_at",
          "type",
          "user_email",
          "user_full_name",
          "user_id",
          "waypoints"
        ],
        "type": "object",
        "x-resource-name": "reimbursements"
      },
      "RequestNameMappedFieldSchema": {
        "properties": {
          "mapped_field": {
            "enum": ["REQUEST_NAME"],
            "title": "Mapped Field",
            "type": "string"
          }
        },
        "required": ["mapped_field"],
        "title": "RequestNameMappedFieldSchema",
        "type": "object"
      },
      "SDKCondition": {
        "properties": {
          "available_operands": {
            "items": {
              "$ref": "#/components/schemas/AvailableOperand"
            },
            "readOnly": true,
            "type": "array"
          },
          "conditions": {
            "items": {
              "$ref": "#/components/schemas/Condition"
            },
            "type": "array"
          },
          "else_blocks": {
            "items": {
              "$ref": "#/components/schemas/Vertex"
            },
            "type": "array"
          },
          "else_condition_group": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionGroup"
              }
            ],
            "default": null,
            "nullable": true
          },
          "has_been_visited": {
            "readOnly": true,
            "type": "boolean"
          },
          "identifier": {
            "nullable": true,
            "type": "string"
          },
          "metadata": {},
          "uuid": {
            "format": "uuid",
            "type": "string"
          },
          "vertex_type": {
            "enum": ["SDK_CONDITION"],
            "type": "string"
          }
        },
        "required": [
          "available_operands",
          "conditions",
          "else_blocks",
          "else_condition_group",
          "uuid",
          "vertex_type"
        ],
        "type": "object"
      },
      "SimpleSuccess": {
        "properties": {
          "success": {
            "type": "boolean"
          }
        },
        "required": ["success"],
        "type": "object"
      },
      "SingleObject": {
        "properties": {
          "deleted": {
            "readOnly": true,
            "type": "boolean"
          },
          "display_name": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["display_name", "id"],
        "type": "object"
      },
      "SingleTransaction": {
        "example": {
          "accounting_categories": [],
          "accounting_date": "2022-05-03T00:00:00+00:00",
          "accounting_field_selections": [
            {
              "category_info": {
                "external_id": "Category",
                "id": "0c0d0bcc-8716-4e05-a651-4ad5e64d2b3e",
                "name": "Category",
                "type": "GL_ACCOUNT"
              },
              "external_id": "Category",
              "id": "07b4ce4d-2750-412e-aef4-6b7815f1411c",
              "name": "Category",
              "type": "GL_ACCOUNT"
            }
          ],
          "amount": 90.0,
          "attendees": [
            {
              "name": "Jack Johnson",
              "user_id": null
            },
            {
              "name": "Joe Johnson",
              "user_id": "7979392e-8d41-4f97-815b-ccd7584802bf"
            }
          ],
          "card_holder": {
            "department_id": "d471d830-2e73-4082-8a75-68540f83e86e",
            "department_name": "Executive",
            "first_name": "Patrick",
            "last_name": "Robinson",
            "location_id": "4fcf3423-a2e6-42f6-8dd8-9b3a8c51e069",
            "location_name": "San Francisco",
            "user_id": "a26c82c9-6b7d-4022-bc4b-a55b4c4743c7"
          },
          "card_id": "6bc41b14-f853-4862-bae5-4f122f123f6e",
          "currency_code": "USD",
          "disputes": [],
          "entity_id": "24850cdb-1b3f-4eb9-bf20-967ca9f97605",
          "id": "fd14cd6a-846e-4994-9315-5a59e6bb465f",
          "limit_id": "5e25f547-bd09-40ad-aab3-b8fefdf16885",
          "line_items": [
            {
              "accounting_field_selections": [
                {
                  "category_info": {
                    "external_id": "Subsidiary",
                    "id": "15e9565d-7e73-40d8-9fbc-5f6f89b1c075",
                    "name": "Subsidiary",
                    "type": "SUBSIDIARY"
                  },
                  "external_id": "425",
                  "id": "07b4ce4d-2750-412e-aef4-6b7815f1411b",
                  "name": "Ramp LP",
                  "type": "Subsidiary"
                }
              ],
              "amount": {
                "amount": 4000,
                "currency_code": "USD"
              },
              "converted_amount": {
                "amount": 4000,
                "currency_code": "USD"
              }
            },
            {
              "accounting_field_selections": [
                {
                  "category_info": {
                    "external_id": "Subsidiary",
                    "id": "15e9565d-7e73-40d8-9fbc-5f6f89b1c075",
                    "name": "Subsidiary",
                    "type": "SUBSIDIARY"
                  },
                  "external_id": "426",
                  "id": "07b4ce4d-2750-412e-aef4-6b7815f1411a",
                  "name": "Ramp BV",
                  "type": "SUBSIDIARY"
                }
              ],
              "amount": {
                "amount": 5000,
                "currency_code": "USD"
              },
              "converted_amount": {
                "amount": 5000,
                "currency_code": "USD"
              }
            }
          ],
          "memo": null,
          "merchant_category_code": null,
          "merchant_category_code_description": null,
          "merchant_data": {
            "auto_rental": null,
            "flight": null,
            "fuel": null,
            "lodging": null,
            "receipt": [
              {
                "commodity_code": null,
                "description": "Vanta Automated Compliance",
                "discount": null,
                "quantity": 1,
                "tax": null,
                "total": 5000,
                "unit_cost": 5000
              },
              {
                "commodity_code": null,
                "description": "Vanta Risk Management",
                "discount": null,
                "quantity": 1,
                "tax": null,
                "total": 4000,
                "unit_cost": 4000
              }
            ],
            "reference": "343165593943"
          },
          "merchant_descriptor": "VANTA",
          "merchant_id": "2907e304-cac2-4abf-84c4-b3b454ae3b8c",
          "merchant_location": {
            "city": "SAN FRANCISCO",
            "country": "USA",
            "postal_code": "941050000",
            "state": "06"
          },
          "merchant_name": "Vanta",
          "original_transaction_amount": {
            "amount": 9000,
            "currency_code": "EUR"
          },
          "policy_violations": [],
          "receipts": [],
          "settlement_date": "2022-05-03T00:00:00+00:00",
          "sk_category_id": "40,41",
          "sk_category_name": "SaaS / Software",
          "spend_program_id": "4a2b8c1e-9f63-4d75-ae12-3b9d47f85e29",
          "state": "CLEARED",
          "synced_at": "2022-05-04T00:00:00+00:00",
          "trip_id": "ec6aae2b-38c6-4eeb-adf0-80f25dbf9aad",
          "trip_name": "Trip to Europe",
          "user_transaction_time": "2022-04-28T00:00:00+00:00"
        },
        "properties": {
          "accounting_categories": {
            "deprecated": true,
            "description": "[Deprecated - use accounting_field_selections instead] Accounting categories related to the transaction.",
            "items": {
              "$ref": "#/components/schemas/ApiAccountingCategory"
            },
            "readOnly": true,
            "type": "array"
          },
          "accounting_date": {
            "description": "The date for the transaction for accounting purposes. Based on the cleared date, transaction date, or a manually overridden date, depending on your accounting preferences in Ramp.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "accounting_field_selections": {
            "description": "List of accounting fields selected to code the transaction.",
            "items": {
              "$ref": "#/components/schemas/ApiTransactionAccountingFieldSelection"
            },
            "type": "array"
          },
          "amount": {
            "description": "Settled amount of the transaction.",
            "type": "number"
          },
          "attendees": {
            "description": "List of attendees for the transaction",
            "items": {
              "$ref": "#/components/schemas/ApiTransactionAttendee"
            },
            "type": "array"
          },
          "card_holder": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiTransactionCardHolder"
              }
            ],
            "description": "Information about the card holder."
          },
          "card_id": {
            "description": "Identifier of the physical or virtual card associated with the transaction.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "cards",
              "type": "many-to-one"
            }
          },
          "card_present": {
            "description": "Whether the transaction was processed using a card present terminal.",
            "type": "boolean"
          },
          "currency_code": {
            "description": "Currency that the transaction is settled in.",
            "type": "string"
          },
          "decline_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiTransactionDeclineDetails"
              }
            ],
            "description": "Details about a transaction decline."
          },
          "disputes": {
            "description": "A list of disputes sorted in descending order by their creation time.",
            "items": {
              "$ref": "#/components/schemas/ApiTransactionDispute"
            },
            "readOnly": true,
            "type": "array"
          },
          "entity_id": {
            "description": "Unique identifier of business entity associated with the transaction.",
            "format": "uuid",
            "nullable": true,
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "entities",
              "type": "many-to-one"
            }
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "limit_id": {
            "description": "Unique identifier of the spend limit associated with the transaction",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "limits",
              "type": "many-to-one"
            }
          },
          "line_items": {
            "description": "List of line items related to the transaction.",
            "items": {
              "$ref": "#/components/schemas/ApiTransactionLineItem"
            },
            "type": "array"
          },
          "memo": {
            "maxLength": 255,
            "nullable": true,
            "type": "string"
          },
          "merchant_category_code": {
            "description": "Merchant category code is a four-digit number in ISP 18245 used to classify a business by the types of goods and services it provides.",
            "type": "string"
          },
          "merchant_category_code_description": {
            "description": "Description about the merchant category code.",
            "type": "string"
          },
          "merchant_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiTransactionPurchaseData"
              }
            ],
            "description": "Purchase data associated related to a transaction provided by the merchant"
          },
          "merchant_descriptor": {
            "description": "A merchant descriptor is the name that appears on a customer's bank statement when they make a purchase from that merchant.",
            "type": "string"
          },
          "merchant_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "merchants",
              "type": "many-to-one"
            }
          },
          "merchant_location": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiMerchantLocation"
              }
            ],
            "description": "Card acceptor data such as country, city, state, and postal code if available."
          },
          "merchant_name": {
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "original_transaction_amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "the original transaction amount before the currency conversion.",
            "nullable": true
          },
          "policy_violations": {
            "description": "A list of policy violations sorted in descending order by their creation time.",
            "items": {
              "$ref": "#/components/schemas/ApiTransactionPolicyViolation"
            },
            "readOnly": true,
            "type": "array"
          },
          "receipt_affidavit": {
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "receipts": {
            "description": "Receipts listed in ascending order by their creation time, related to the transaction.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "settlement_date": {
            "description": "Time when funds were moved for a transaction.",
            "format": "date-time",
            "type": "string"
          },
          "sk_category_id": {
            "description": "Ramp-internal category id.",
            "nullable": true,
            "type": "integer"
          },
          "sk_category_name": {
            "description": "Ramp-internal category name.",
            "nullable": true,
            "type": "string"
          },
          "spend_program_id": {
            "description": "Unique identifier of the spend program from which this limit was issued.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "spend_programs",
              "type": "many-to-one"
            }
          },
          "state": {
            "description": "transaction state.",
            "enum": [
              "ALL",
              "CLEARED",
              "COMPLETION",
              "DECLINED",
              "ERROR",
              "PENDING",
              "PENDING_INITIATION"
            ],
            "type": "string"
          },
          "statement_id": {
            "description": "Statement ID associated with the transaction if one is available.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "statements",
              "type": "many-to-one"
            }
          },
          "sync_status": {
            "enum": ["NOT_SYNC_READY", "SYNCED", "SYNC_READY"],
            "readOnly": true,
            "type": "string"
          },
          "synced_at": {
            "description": "Time when transaction has been synced. Will be None if the transaction is not synced.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "trip_id": {
            "description": "Trip ID associated with the transaction if one is available.",
            "format": "uuid",
            "type": "string"
          },
          "trip_name": {
            "description": "Trip name associated with the transaction if one is available.",
            "type": "string"
          },
          "user_transaction_time": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "accounting_date",
          "card_present",
          "entity_id",
          "merchant_id",
          "original_transaction_amount",
          "sk_category_id",
          "sk_category_name",
          "sync_status",
          "synced_at"
        ],
        "type": "object",
        "x-resource-name": "transactions"
      },
      "SpendAllocationEndDateMappedFieldSchema": {
        "properties": {
          "mapped_field": {
            "enum": ["SPEND_ALLOCATION__END_DATE"],
            "title": "Mapped Field",
            "type": "string"
          }
        },
        "required": ["mapped_field"],
        "title": "SpendAllocationEndDateMappedFieldSchema",
        "type": "object"
      },
      "SpendAllocationExpenseAmountLimitMappedFieldSchema": {
        "properties": {
          "mapped_field": {
            "enum": ["SPEND_ALLOCATION__EXPENSE_AMOUNT_LIMIT"],
            "title": "Mapped Field",
            "type": "string"
          }
        },
        "required": ["mapped_field"],
        "title": "SpendAllocationExpenseAmountLimitMappedFieldSchema",
        "type": "object"
      },
      "SpendAllocationIsShareableMappedFieldSchema": {
        "properties": {
          "mapped_field": {
            "enum": ["SPEND_ALLOCATION__IS_SHAREABLE"],
            "title": "Mapped Field",
            "type": "string"
          }
        },
        "required": ["mapped_field"],
        "title": "SpendAllocationIsShareableMappedFieldSchema",
        "type": "object"
      },
      "SpendAllocationMerchantCategoryRestrictionsAllowListMappedFieldSchema": {
        "properties": {
          "mapped_field": {
            "enum": ["SPEND_ALLOCATION__MERCHANT_CATEGORY_RESTRICTIONS_ALLOWLIST"],
            "title": "Mapped Field",
            "type": "string"
          }
        },
        "required": ["mapped_field"],
        "title": "SpendAllocationMerchantCategoryRestrictionsAllowListMappedFieldSchema",
        "type": "object"
      },
      "SpendAllocationMerchantCategoryRestrictionsBlockListMappedFieldSchema": {
        "properties": {
          "mapped_field": {
            "enum": ["SPEND_ALLOCATION__MERCHANT_CATEGORY_RESTRICTIONS_BLOCKLIST"],
            "title": "Mapped Field",
            "type": "string"
          }
        },
        "required": ["mapped_field"],
        "title": "SpendAllocationMerchantCategoryRestrictionsBlockListMappedFieldSchema",
        "type": "object"
      },
      "SpendAllocationMerchantCategoryRestrictionsMappedFieldResponseSchema": {
        "properties": {
          "mapped_field": {
            "default": "SPEND_ALLOCATION__MERCHANT_CATEGORY_RESTRICTIONS",
            "enum": ["SPEND_ALLOCATION__MERCHANT_CATEGORY_RESTRICTIONS"],
            "title": "Mapped Field",
            "type": "string"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomFormFieldMappingMetadataRestrictionControlTypeSchema"
              }
            ],
            "default": null,
            "nullable": true
          }
        },
        "title": "SpendAllocationMerchantCategoryRestrictionsMappedFieldResponseSchema",
        "type": "object"
      },
      "SpendAllocationMerchantRestrictionsAllowListMappedFieldSchema": {
        "properties": {
          "mapped_field": {
            "enum": ["SPEND_ALLOCATION__MERCHANT_RESTRICTIONS_ALLOWLIST"],
            "title": "Mapped Field",
            "type": "string"
          }
        },
        "required": ["mapped_field"],
        "title": "SpendAllocationMerchantRestrictionsAllowListMappedFieldSchema",
        "type": "object"
      },
      "SpendAllocationMerchantRestrictionsBlockListMappedFieldSchema": {
        "properties": {
          "mapped_field": {
            "enum": ["SPEND_ALLOCATION__MERCHANT_RESTRICTIONS_BLOCKLIST"],
            "title": "Mapped Field",
            "type": "string"
          }
        },
        "required": ["mapped_field"],
        "title": "SpendAllocationMerchantRestrictionsBlockListMappedFieldSchema",
        "type": "object"
      },
      "SpendAllocationMerchantRestrictionsMappedFieldResponseSchema": {
        "properties": {
          "mapped_field": {
            "default": "SPEND_ALLOCATION__MERCHANT_RESTRICTIONS",
            "enum": ["SPEND_ALLOCATION__MERCHANT_RESTRICTIONS"],
            "title": "Mapped Field",
            "type": "string"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomFormFieldMappingMetadataRestrictionControlTypeSchema"
              }
            ],
            "default": null,
            "nullable": true
          }
        },
        "title": "SpendAllocationMerchantRestrictionsMappedFieldResponseSchema",
        "type": "object"
      },
      "SpendAllocationStartDateMappedFieldSchema": {
        "properties": {
          "mapped_field": {
            "enum": ["SPEND_ALLOCATION__START_DATE"],
            "title": "Mapped Field",
            "type": "string"
          }
        },
        "required": ["mapped_field"],
        "title": "SpendAllocationStartDateMappedFieldSchema",
        "type": "object"
      },
      "SpendIntentApiSpendingRestrictionsDump": {
        "properties": {
          "allowed_categories": {
            "description": " List of [Ramp category codes](/developer-api/v1/overview/conventions#ramp-category-codes) allowed for the limit.",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "allowed_vendors": {
            "description": "List of merchants allowed for the limit.",
            "items": {
              "format": "uuid",
              "type": "string",
              "x-relationship": {
                "inverse_field_name": null,
                "reference_field_name": "id",
                "target_resource": "merchants",
                "type": "many-to-many"
              }
            },
            "type": "array"
          },
          "auto_lock_date": {
            "description": "Date to automatically to lock the limit.",
            "format": "date-time",
            "type": "string"
          },
          "blocked_categories": {
            "description": "List of [Ramp category codes](/developer-api/v1/overview/conventions#ramp-category-codes) blocked for the limit.",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "blocked_vendors": {
            "description": "List of merchants  blocked for the limit.",
            "items": {
              "format": "uuid",
              "type": "string",
              "x-relationship": {
                "inverse_field_name": null,
                "reference_field_name": "id",
                "target_resource": "merchants",
                "type": "many-to-many"
              }
            },
            "type": "array"
          },
          "interval": {
            "description": "Time interval the limit is applied on.",
            "enum": [
              "ANNUAL",
              "CUSTOM",
              "DAILY",
              "MONTHLY",
              "QUARTERLY",
              "TERTIARY",
              "TOTAL",
              "WEEKLY",
              "YEARLY"
            ],
            "type": "string"
          },
          "limit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Amount limit total per interval denominated in cents. Currency is USD.",
            "nullable": true,
            "readOnly": true
          },
          "next_interval_reset": {
            "description": "Date and time for the next interval reset.",
            "format": "date-time",
            "type": "string"
          },
          "start_of_interval": {
            "description": "Date and time for the start of the current interval.",
            "format": "date-time",
            "type": "string"
          },
          "temporary_limit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Temporary limit total per interval.",
            "nullable": true,
            "readOnly": true
          },
          "transaction_amount_limit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Max amount allowed on a single transaction.",
            "nullable": true,
            "readOnly": true
          }
        },
        "required": ["limit", "temporary_limit", "transaction_amount_limit"],
        "type": "object"
      },
      "SpendLimitDeferredTask": {
        "example": {
          "context": {
            "acting_user_id": "c45f22e0-4c15-4a64-8580-3819e89baf6d"
          },
          "data": {
            "spend_limit_id": "f4efe11c-221f-4b49-a1e4-33eaf96a49ee"
          },
          "id": "2d68eb67-f6eb-4284-8683-7d530c77a5a6",
          "status": "SUCCESS"
        },
        "properties": {
          "context": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSpendLimitDeferredTaskContext"
              }
            ],
            "description": "Further context for the deferred task."
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSpendLimitDeferredTaskData"
              }
            ],
            "description": "Detailed data of the deferred task.",
            "readOnly": true
          },
          "id": {
            "description": "Unique identifier of the deferred task.",
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "description": "Status of the deferred task. It could be one of the following values: STARTED, IN_PROGRESS, ERROR, SUCCESS",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": ["data", "status"],
        "type": "object",
        "x-resource-name": "limit_deferred_tasks"
      },
      "StateObjectListReference": {
        "properties": {
          "display": {
            "readOnly": true,
            "type": "string"
          },
          "mask": {
            "enum": ["CURRENCY", "DAY", "PERCENTAGE"],
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "object_list_type": {
            "readOnly": true,
            "type": "string"
          },
          "operand_type": {
            "enum": ["STATE_OBJECT_LIST_REFERENCE"],
            "type": "string"
          },
          "variable_name": {
            "type": "string"
          }
        },
        "required": ["display", "object_list_type", "operand_type", "variable_name"],
        "type": "object"
      },
      "StateObjectReference": {
        "properties": {
          "display": {
            "readOnly": true,
            "type": "string"
          },
          "mask": {
            "enum": ["CURRENCY", "DAY", "PERCENTAGE"],
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "operand_type": {
            "enum": ["STATE_OBJECT_REFERENCE"],
            "type": "string"
          },
          "variable_name": {
            "type": "string"
          }
        },
        "required": ["display", "object_type", "operand_type", "variable_name"],
        "type": "object"
      },
      "StateReference": {
        "properties": {
          "child_type": {
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "display": {
            "readOnly": true,
            "type": "string"
          },
          "mask": {
            "enum": ["CURRENCY", "DAY", "PERCENTAGE"],
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "operand_type": {
            "enum": ["STATE_REFERENCE"],
            "type": "string"
          },
          "type": {
            "enum": ["ARRAY", "BOOL", "INT", "JSONB", "NUMERIC", "STR"],
            "readOnly": true,
            "type": "string"
          },
          "variable_name": {
            "type": "string"
          }
        },
        "required": ["display", "operand_type", "variable_name"],
        "type": "object"
      },
      "Statement": {
        "example": {
          "balance_sections": [
            {
              "charges": {
                "amount": 180061925,
                "currency_code": "USD"
              },
              "credits": {
                "amount": 0,
                "currency_code": "USD"
              },
              "ending_balance": {
                "amount": 178098867,
                "currency_code": "USD"
              },
              "entity_id": "9d8abf0f-389c-4a18-816e-a6e1c5784624",
              "id": "6ff695fd-b09b-4529-a622-545d6c059129",
              "opening_balance": {
                "amount": 0,
                "currency_code": "USD"
              },
              "payments": {
                "amount": 1963058,
                "currency_code": "USD"
              }
            }
          ],
          "charges": {
            "amount": 180061925,
            "currency_code": "USD"
          },
          "credits": {
            "amount": 0,
            "currency_code": "USD"
          },
          "end_date": "2023-05-08T08:39:37+00:00",
          "ending_balance": {
            "amount": 178098867,
            "currency_code": "USD"
          },
          "id": "df44006c-410b-420e-80a2-1522a2e5b722",
          "opening_balance": {
            "amount": 0,
            "currency_code": "USD"
          },
          "payments": {
            "amount": 1963058,
            "currency_code": "USD"
          },
          "start_date": "2023-05-06T08:51:57+00:00",
          "statement_lines": [
            {
              "id": "06a09605-b0b8-4c89-b29f-d12c6aabac58",
              "type": "CARD_TRANSACTION"
            },
            {
              "id": "0f01bc2d-04cf-407a-8442-bcbdaf1c07f8",
              "type": "CARD_TRANSACTION"
            },
            {
              "id": "2682717d-8231-46f2-9e02-c0f4f7ef410a",
              "type": "TRANSFER_PAYMENT"
            },
            {
              "id": "415fe9fb-1608-4cd6-ac8b-d2fbb85bdc11",
              "type": "CARD_TRANSACTION"
            },
            {
              "id": "4c7700b6-1ff9-4228-9b13-73b38d5a7623",
              "type": "CARD_TRANSACTION"
            },
            {
              "id": "61b89311-f0b3-4689-91ee-8edb72054de4",
              "type": "CARD_TRANSACTION"
            },
            {
              "id": "78c9eac8-67ae-443d-998a-f416e959225c",
              "type": "CASHBACK"
            },
            {
              "id": "af87a6bd-929a-4de6-85f3-0105a046a608",
              "type": "CARD_TRANSACTION"
            }
          ],
          "statement_url": "https://statements.ramp.com/businesses/my-widget-store/1baa7091-d312-883f-0938-19387462a9eb/Ramp_Statement_20211127-20211227/2021-11-27-my-widget-store-overview.pdf?Expires=1704717900&Signature=uz7vpgRv1e23POuT__&Key-Pair-Id=b8AgE+b8MZ6GL5Wv"
        },
        "properties": {
          "balance_sections": {
            "description": "Breakdown of statement balances by entity and currency.",
            "items": {
              "$ref": "#/components/schemas/StatementBalanceSection"
            },
            "type": "array"
          },
          "charges": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "deprecated": true,
            "description": "Total charges incurred during the statement period"
          },
          "credits": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "deprecated": true,
            "description": "Total credits accumulated during the statement period"
          },
          "end_date": {
            "description": "End date of the statement period.",
            "format": "date-time",
            "type": "string"
          },
          "ending_balance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "deprecated": true,
            "description": "Balance at the end of the statement period"
          },
          "id": {
            "description": "Unique identifier for the statement.",
            "format": "uuid",
            "type": "string"
          },
          "opening_balance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "deprecated": true,
            "description": "Balance at the beginning of the statement period"
          },
          "payments": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "deprecated": true,
            "description": "Total payments made during the statement period"
          },
          "preceding_statement_id": {
            "description": "Identifier of the previous statement in sequence.",
            "format": "uuid",
            "type": "string"
          },
          "start_date": {
            "description": "Start date of the statement period.",
            "format": "date-time",
            "type": "string"
          },
          "statement_lines": {
            "description": "Financial activities including card transactions, transfers, and cashbacks during the statement period.",
            "items": {
              "$ref": "#/components/schemas/ApiStatementItem"
            },
            "type": "array"
          },
          "statement_url": {
            "description": "Pre-signed URL to download statement PDF, valid for 1 hour after generation.",
            "format": "url",
            "type": "string"
          }
        },
        "required": [
          "balance_sections",
          "charges",
          "credits",
          "end_date",
          "ending_balance",
          "id",
          "opening_balance",
          "payments",
          "start_date",
          "statement_lines"
        ],
        "type": "object",
        "x-resource-name": "statements"
      },
      "StatementBalanceSection": {
        "properties": {
          "charges": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Total charges incurred during the statement period."
          },
          "credits": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Total credits accumulated during the statement period."
          },
          "ending_balance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Balance at the end of the statement period."
          },
          "entity_id": {
            "description": "Business entity this balance section belongs to.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "entities",
              "type": "many-to-one"
            }
          },
          "id": {
            "description": "Unique identifier for the balance section.",
            "format": "uuid",
            "type": "string"
          },
          "opening_balance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Balance at the beginning of the statement period."
          },
          "payments": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Total payments made during the statement period."
          }
        },
        "required": [
          "charges",
          "credits",
          "ending_balance",
          "entity_id",
          "id",
          "opening_balance",
          "payments"
        ],
        "type": "object"
      },
      "StaticValue": {
        "properties": {
          "operand_type": {
            "enum": ["STATIC_VALUE"],
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/TypedValue"
          }
        },
        "required": ["operand_type", "value"],
        "type": "object"
      },
      "StrValue": {
        "properties": {
          "child_type": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "enum": ["STR"],
            "type": "string"
          },
          "value": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["type"],
        "type": "object"
      },
      "StringValueSchema": {
        "properties": {
          "value": {
            "title": "Value",
            "type": "string"
          }
        },
        "required": ["value"],
        "title": "StringValueSchema",
        "type": "object"
      },
      "TextCellContentsForDisplay": {
        "properties": {
          "display_name": {
            "type": "string"
          },
          "type": {
            "default": "text",
            "enum": ["text"],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": ["display_name", "type", "value"],
        "type": "object"
      },
      "TokenRequestBody": {
        "example": {
          "code": "wUvTfJmrDiTogz3dRNsUJdBRtSl658ibsH8xLKwKQ2PbttRr",
          "grant_type": "authorization_code",
          "redirect_uri": "https://www.yourawesomeapp.com",
          "refresh_token": "ramp_tok_IwOGYzYTlmM2YxOTQ5MGE3YmNmMDFkNTVk",
          "scope": "users:read users:write"
        },
        "properties": {
          "code": {
            "description": "Authorization code obtained from request to https://app.ramp.com/v1/authorize, to be exchanged for access token. Field is required if grant_type=authorization_code.",
            "type": "string"
          },
          "grant_type": {
            "description": "Grant type, must be one of: ['authorization_code', 'client_credentials', 'refresh_token']. Refresh token and client credentials grants must be added to app's permitted Grant Types.",
            "enum": ["authorization_code", "client_credentials", "refresh_token"],
            "type": "string"
          },
          "redirect_uri": {
            "description": "The redirect URI previously used in the authorization request, used to verify app. Field is required if grant_type=authorization_code.",
            "type": "string"
          },
          "refresh_token": {
            "description": "The refresh token issued to you to get a new access token.",
            "type": "string"
          },
          "scope": {
            "description": "Space-separated list of scopes to be granted to the returned token. These must be a subset (including full set) of the app's allowed scopes. Field is required if grant_type=client_credentials.",
            "type": "string"
          }
        },
        "required": ["grant_type"],
        "type": "object"
      },
      "TokenResponse": {
        "example": {
          "access_token": "ramp_tok_o4bfbrfhDBdXcjjTBMD1iTTXdprRuHdcmne8gR5zfSV78uPe",
          "expires_in": 3600,
          "refresh_token": "ramp_tok_IwOGYzYTlmM2YxOTQ5MGE3YmNmMDFkNTVk",
          "scope": "business:read transactions:read",
          "token_type": "Bearer"
        },
        "properties": {
          "access_token": {
            "description": "The access token string. Prefixed with ramp_tok_.",
            "type": "string"
          },
          "expires_in": {
            "description": "The duration of which the token is valid, measured in seconds.",
            "type": "integer"
          },
          "refresh_token": {
            "description": "Refresh token can be used to get a new access token. Note that refresh token won't appear in the response for client_credentials grant type. Prefixed with ramp_tok_.",
            "type": "string"
          },
          "scope": {
            "description": "Space-separated list of scopes of the access token.",
            "type": "string"
          },
          "token_type": {
            "description": "The type of the token. This should always be 'Bearer'. ",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TokenRevokeRequestBody": {
        "example": {
          "token": "ramp_tok_IwOGYzYTlmM2YxOTQ5MGE3YmNmMDFkNTVk",
          "token_type_hint": "refresh_token"
        },
        "properties": {
          "token": {
            "description": "Access token or refresh token to be revoked.",
            "type": "string"
          },
          "token_type_hint": {
            "description": "Type of the token to be revoked.",
            "enum": ["access_token", "refresh_token"],
            "type": "string"
          }
        },
        "required": ["token"],
        "type": "object"
      },
      "Transaction": {
        "example": {
          "accounting_categories": [],
          "accounting_date": "2022-05-03T00:00:00+00:00",
          "accounting_field_selections": [
            {
              "category_info": {
                "external_id": "Category",
                "id": "0c0d0bcc-8716-4e05-a651-4ad5e64d2b3e",
                "name": "Category",
                "type": "GL_ACCOUNT"
              },
              "external_id": "Category",
              "id": "07b4ce4d-2750-412e-aef4-6b7815f1411c",
              "name": "Category",
              "type": "GL_ACCOUNT"
            }
          ],
          "amount": 90.0,
          "attendees": [
            {
              "name": "Jack Johnson",
              "user_id": null
            },
            {
              "name": "Joe Johnson",
              "user_id": "7979392e-8d41-4f97-815b-ccd7584802bf"
            }
          ],
          "card_holder": {
            "department_id": "d471d830-2e73-4082-8a75-68540f83e86e",
            "department_name": "Executive",
            "first_name": "Patrick",
            "last_name": "Robinson",
            "location_id": "4fcf3423-a2e6-42f6-8dd8-9b3a8c51e069",
            "location_name": "San Francisco",
            "user_id": "a26c82c9-6b7d-4022-bc4b-a55b4c4743c7"
          },
          "card_id": "6bc41b14-f853-4862-bae5-4f122f123f6e",
          "currency_code": "USD",
          "disputes": [],
          "entity_id": "24850cdb-1b3f-4eb9-bf20-967ca9f97605",
          "id": "fd14cd6a-846e-4994-9315-5a59e6bb465f",
          "limit_id": "5e25f547-bd09-40ad-aab3-b8fefdf16885",
          "line_items": [
            {
              "accounting_field_selections": [
                {
                  "category_info": {
                    "external_id": "Subsidiary",
                    "id": "15e9565d-7e73-40d8-9fbc-5f6f89b1c075",
                    "name": "Subsidiary",
                    "type": "SUBSIDIARY"
                  },
                  "external_id": "425",
                  "id": "07b4ce4d-2750-412e-aef4-6b7815f1411b",
                  "name": "Ramp LP",
                  "type": "Subsidiary"
                }
              ],
              "amount": {
                "amount": 4000,
                "currency_code": "USD"
              },
              "converted_amount": {
                "amount": 4000,
                "currency_code": "USD"
              }
            },
            {
              "accounting_field_selections": [
                {
                  "category_info": {
                    "external_id": "Subsidiary",
                    "id": "15e9565d-7e73-40d8-9fbc-5f6f89b1c075",
                    "name": "Subsidiary",
                    "type": "SUBSIDIARY"
                  },
                  "external_id": "426",
                  "id": "07b4ce4d-2750-412e-aef4-6b7815f1411a",
                  "name": "Ramp BV",
                  "type": "SUBSIDIARY"
                }
              ],
              "amount": {
                "amount": 5000,
                "currency_code": "USD"
              },
              "converted_amount": {
                "amount": 5000,
                "currency_code": "USD"
              }
            }
          ],
          "memo": null,
          "merchant_category_code": null,
          "merchant_category_code_description": null,
          "merchant_data": {
            "auto_rental": null,
            "flight": null,
            "fuel": null,
            "lodging": null,
            "receipt": [
              {
                "commodity_code": null,
                "description": "Vanta Automated Compliance",
                "discount": null,
                "quantity": 1,
                "tax": null,
                "total": 5000,
                "unit_cost": 5000
              },
              {
                "commodity_code": null,
                "description": "Vanta Risk Management",
                "discount": null,
                "quantity": 1,
                "tax": null,
                "total": 4000,
                "unit_cost": 4000
              }
            ],
            "reference": "343165593943"
          },
          "merchant_descriptor": "VANTA",
          "merchant_id": "2907e304-cac2-4abf-84c4-b3b454ae3b8c",
          "merchant_location": {
            "city": "SAN FRANCISCO",
            "country": "USA",
            "postal_code": "941050000",
            "state": "06"
          },
          "merchant_name": "Vanta",
          "original_transaction_amount": {
            "amount": 9000,
            "currency_code": "EUR"
          },
          "policy_violations": [],
          "receipts": [],
          "settlement_date": "2022-05-03T00:00:00+00:00",
          "sk_category_id": "40,41",
          "sk_category_name": "SaaS / Software",
          "spend_program_id": "4a2b8c1e-9f63-4d75-ae12-3b9d47f85e29",
          "state": "CLEARED",
          "synced_at": "2022-05-04T00:00:00+00:00",
          "trip_id": "ec6aae2b-38c6-4eeb-adf0-80f25dbf9aad",
          "trip_name": "Trip to Europe",
          "user_transaction_time": "2022-04-28T00:00:00+00:00"
        },
        "properties": {
          "accounting_categories": {
            "deprecated": true,
            "description": "[Deprecated - use accounting_field_selections instead] Accounting categories related to the transaction.",
            "items": {
              "$ref": "#/components/schemas/ApiAccountingCategory"
            },
            "readOnly": true,
            "type": "array"
          },
          "accounting_date": {
            "description": "The date for the transaction for accounting purposes. Based on the cleared date, transaction date, or a manually overridden date, depending on your accounting preferences in Ramp.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "accounting_field_selections": {
            "description": "List of accounting fields selected to code the transaction.",
            "items": {
              "$ref": "#/components/schemas/ApiTransactionAccountingFieldSelection"
            },
            "type": "array"
          },
          "amount": {
            "description": "Settled amount of the transaction.",
            "type": "number"
          },
          "attendees": {
            "description": "List of attendees for the transaction",
            "items": {
              "$ref": "#/components/schemas/ApiTransactionAttendee"
            },
            "type": "array"
          },
          "card_holder": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiTransactionCardHolder"
              }
            ],
            "description": "Information about the card holder."
          },
          "card_id": {
            "description": "Identifier of the physical or virtual card associated with the transaction.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "cards",
              "type": "many-to-one"
            }
          },
          "card_present": {
            "description": "Whether the transaction was processed using a card present terminal.",
            "type": "boolean"
          },
          "currency_code": {
            "description": "Currency that the transaction is settled in.",
            "type": "string"
          },
          "decline_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiTransactionDeclineDetails"
              }
            ],
            "description": "Details about a transaction decline."
          },
          "disputes": {
            "description": "A list of disputes sorted in descending order by their creation time.",
            "items": {
              "$ref": "#/components/schemas/ApiTransactionDispute"
            },
            "readOnly": true,
            "type": "array"
          },
          "entity_id": {
            "description": "Unique identifier of business entity associated with the transaction.",
            "format": "uuid",
            "nullable": true,
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "entities",
              "type": "many-to-one"
            }
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "limit_id": {
            "description": "Unique identifier of the spend limit associated with the transaction",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "limits",
              "type": "many-to-one"
            }
          },
          "line_items": {
            "description": "List of line items related to the transaction.",
            "items": {
              "$ref": "#/components/schemas/ApiTransactionLineItem"
            },
            "type": "array"
          },
          "memo": {
            "maxLength": 255,
            "nullable": true,
            "type": "string"
          },
          "merchant_category_code": {
            "description": "Merchant category code is a four-digit number in ISP 18245 used to classify a business by the types of goods and services it provides.",
            "type": "string"
          },
          "merchant_category_code_description": {
            "description": "Description about the merchant category code.",
            "type": "string"
          },
          "merchant_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiTransactionPurchaseData"
              }
            ],
            "description": "Purchase data associated related to a transaction provided by the merchant"
          },
          "merchant_descriptor": {
            "description": "A merchant descriptor is the name that appears on a customer's bank statement when they make a purchase from that merchant.",
            "type": "string"
          },
          "merchant_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "merchants",
              "type": "many-to-one"
            }
          },
          "merchant_location": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiMerchantLocation"
              }
            ],
            "description": "Card acceptor data such as country, city, state, and postal code if available."
          },
          "merchant_name": {
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "original_transaction_amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "the original transaction amount before the currency conversion.",
            "nullable": true
          },
          "policy_violations": {
            "description": "A list of policy violations sorted in descending order by their creation time.",
            "items": {
              "$ref": "#/components/schemas/ApiTransactionPolicyViolation"
            },
            "readOnly": true,
            "type": "array"
          },
          "receipts": {
            "description": "Receipts listed in ascending order by their creation time, related to the transaction.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "settlement_date": {
            "description": "Time when funds were moved for a transaction.",
            "format": "date-time",
            "type": "string"
          },
          "sk_category_id": {
            "description": "Ramp-internal category id.",
            "nullable": true,
            "type": "integer"
          },
          "sk_category_name": {
            "description": "Ramp-internal category name.",
            "nullable": true,
            "type": "string"
          },
          "spend_program_id": {
            "description": "Unique identifier of the spend program from which this limit was issued.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "spend_programs",
              "type": "many-to-one"
            }
          },
          "state": {
            "description": "transaction state.",
            "enum": [
              "ALL",
              "CLEARED",
              "COMPLETION",
              "DECLINED",
              "ERROR",
              "PENDING",
              "PENDING_INITIATION"
            ],
            "type": "string"
          },
          "statement_id": {
            "description": "Statement ID associated with the transaction if one is available.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "statements",
              "type": "many-to-one"
            }
          },
          "sync_status": {
            "enum": ["NOT_SYNC_READY", "SYNCED", "SYNC_READY"],
            "readOnly": true,
            "type": "string"
          },
          "synced_at": {
            "description": "Time when transaction has been synced. Will be None if the transaction is not synced.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "trip_id": {
            "description": "Trip ID associated with the transaction if one is available.",
            "format": "uuid",
            "type": "string"
          },
          "trip_name": {
            "description": "Trip name associated with the transaction if one is available.",
            "type": "string"
          },
          "user_transaction_time": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "accounting_date",
          "card_present",
          "entity_id",
          "merchant_id",
          "original_transaction_amount",
          "sk_category_id",
          "sk_category_name",
          "sync_status",
          "synced_at"
        ],
        "type": "object",
        "x-resource-name": "transactions"
      },
      "Transfer": {
        "properties": {
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Amount of the transfer."
          },
          "created_at": {
            "description": "Timestamp when the transfer was created.",
            "format": "date-time",
            "type": "string"
          },
          "entity_id": {
            "description": "Business entity associated with this transfer.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "entities",
              "type": "many-to-one"
            }
          },
          "id": {
            "description": "Unique identifier for the transfer.",
            "format": "uuid",
            "type": "string"
          },
          "payment_id": {
            "description": "Unique payment identifier for the transfer.",
            "type": "string"
          },
          "status": {
            "description": "Status of the transfer. See [Transfers Guide](/developer-api/v1/guides/transfers) for definitions.",
            "enum": [
              "ACH_CONFIRMED",
              "CANCELED",
              "COMPLETED",
              "ERROR",
              "INITIATED",
              "NOT_ACKED",
              "NOT_ENOUGH_FUNDS",
              "PROCESSING_BY_ODFI",
              "REJECTED_BY_ODFI",
              "RETURNED_BY_RDFI",
              "SUBMITTED_TO_FED",
              "SUBMITTED_TO_RDFI",
              "UNNECESSARY",
              "UPLOADED"
            ],
            "type": "string"
          },
          "sync_status": {
            "description": "Current sync status of the transfer.",
            "enum": ["NOT_SYNC_READY", "SYNCED", "SYNC_READY"],
            "readOnly": true,
            "type": "string"
          }
        },
        "required": ["sync_status"],
        "type": "object",
        "x-resource-name": "transfers"
      },
      "TypedValue": {
        "discriminator": {
          "mapping": {
            "ARRAY": "#/components/schemas/ArrayValue",
            "BOOL": "#/components/schemas/BoolValue",
            "INT": "#/components/schemas/IntValue",
            "JSONB": "#/components/schemas/JSONBValue",
            "NUMERIC": "#/components/schemas/NumericValue",
            "STR": "#/components/schemas/StrValue"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ArrayValue"
          },
          {
            "$ref": "#/components/schemas/BoolValue"
          },
          {
            "$ref": "#/components/schemas/IntValue"
          },
          {
            "$ref": "#/components/schemas/JSONBValue"
          },
          {
            "$ref": "#/components/schemas/NumericValue"
          },
          {
            "$ref": "#/components/schemas/StrValue"
          }
        ]
      },
      "Upload": {
        "properties": {
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "document_type": {
            "type": "string"
          },
          "sales_lead_id": {
            "format": "uuid",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "User": {
        "example": {
          "business_id": "9abffcf0-dd7d-42f0-b806-ce0502ab6496",
          "custom_fields": [
            {
              "name": "Cost Center",
              "value": "R&D - Data"
            },
            {
              "name": "Employee ID",
              "value": "f4efe11c-337f-49a5-86b3-5df128233f2c"
            },
            {
              "name": "Region",
              "value": "EMEA"
            },
            {
              "name": "Team",
              "value": "Core Platform"
            }
          ],
          "department_id": "2d68eb67-f6eb-4284-8683-7d530c77a5a6",
          "email": "cardholder_7@company.com",
          "employee_id": "f4efe11c-337f-49a5-86b3-5df128233f2c",
          "entity_id": "0e90959a-28ba-4f7d-a75b-9c241f384b9a",
          "first_name": "Linda",
          "id": "bde8334e-042e-4f39-9a5d-355ae17342e6",
          "is_manager": false,
          "last_name": "Gu",
          "location_id": "f4efe11c-221f-4b49-a1e4-33eaf96a49ee",
          "manager_id": "ccc5d4cc-337f-49a5-86b3-5df128233f2c",
          "phone": 8004559999,
          "role": "BUSINESS_USER",
          "status": "USER_ACTIVE"
        },
        "properties": {
          "business_id": {
            "description": "Unique identifier of the company that the employee's working for.",
            "format": "uuid",
            "nullable": true,
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "businesses",
              "type": "many-to-one"
            }
          },
          "custom_fields": {
            "description": "A list of custom fields of the user.",
            "items": {
              "$ref": "#/components/schemas/ApiUserCustomField"
            },
            "readOnly": true,
            "type": "array"
          },
          "department_id": {
            "description": "Unique identifier of the employee's department",
            "format": "uuid",
            "nullable": true,
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "departments",
              "type": "many-to-one"
            }
          },
          "email": {
            "description": "The employee's email address",
            "type": "string"
          },
          "employee_id": {
            "description": "An alternative identifier for an employee, coming from external systems, which can be used in place of an email.",
            "type": "string"
          },
          "entity_id": {
            "description": "Unique identifier of business entity user is associated with.",
            "format": "uuid",
            "nullable": true,
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "entities",
              "type": "many-to-one"
            }
          },
          "first_name": {
            "description": "First name of the employee",
            "type": "string"
          },
          "id": {
            "description": "Unique employee identifier",
            "format": "uuid",
            "type": "string"
          },
          "is_manager": {
            "description": "Whether the employee is a manager",
            "readOnly": true,
            "type": "boolean"
          },
          "last_name": {
            "description": "Last name of the employee",
            "type": "string"
          },
          "location_id": {
            "description": "Unique identifier of the employee's location",
            "format": "uuid",
            "nullable": true,
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "locations",
              "type": "many-to-one"
            }
          },
          "manager_id": {
            "description": "Unique identifier of the employee's manager",
            "format": "uuid",
            "nullable": true,
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "users",
              "type": "many-to-one"
            }
          },
          "phone": {
            "description": "The employee's phone number",
            "type": "string"
          },
          "role": {
            "description": "The employee's role",
            "enum": [
              "AUDITOR",
              "BUSINESS_ADMIN",
              "BUSINESS_BOOKKEEPER",
              "BUSINESS_OWNER",
              "BUSINESS_USER",
              "GUEST_USER",
              "IT_ADMIN"
            ],
            "type": "string"
          },
          "status": {
            "enum": [
              "INVITE_EXPIRED",
              "INVITE_PENDING",
              "USER_ACTIVE",
              "USER_INACTIVE",
              "USER_ONBOARDING",
              "USER_SUSPENDED"
            ],
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "business_id",
          "custom_fields",
          "department_id",
          "entity_id",
          "is_manager",
          "location_id",
          "manager_id",
          "status"
        ],
        "type": "object",
        "x-resource-name": "users"
      },
      "UserDeferredTask": {
        "example": {
          "context": {
            "acting_user_id": "c45f22e0-4c15-4a64-8580-3819e89baf6d"
          },
          "data": {
            "user_id": "f4efe11c-221f-4b49-a1e4-33eaf96a49ee"
          },
          "id": "2d68eb67-f6eb-4284-8683-7d530c77a5a6",
          "status": "SUCCESS"
        },
        "properties": {
          "context": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiUserDeferredTaskContext"
              }
            ],
            "description": "Further context for the deferred task."
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiUserDeferredTaskData"
              }
            ],
            "description": "Detailed data of the deferred task."
          },
          "id": {
            "description": "Unique identifier of the deferred task.",
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "description": "Status of the deferred task. It could be one of the following values: STARTED, IN_PROGRESS, ERROR, SUCCESS",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Vendor": {
        "example": {
          "accounting_vendor_remote_id": "1234",
          "address": {
            "address_line_1": "442 Good St",
            "address_line_2": null,
            "city": "San Diego",
            "country": "US",
            "postal_code": "94105",
            "state": "CA"
          },
          "billing_frequency": null,
          "contacts": ["315eb85a-3a60-45ba-8d1c-67385cd0281f", "5453d095-38ad-4656-8d73-df4e204a51b4"],
          "country": "US",
          "created_at": "2024-05-12T02:23:00+00:00",
          "description": "Vendor for art supplies",
          "federal_tax_classification": "C_CORPORATION",
          "id": "4f08baf7-e3f0-4271-aedd-4d2c2214ed9a",
          "is_active": true,
          "is_deletable": false,
          "merchant_id": null,
          "name": "Ali's Art shop",
          "name_legal": "Ali's Art shop LLC",
          "sk_category_id": 30,
          "sk_category_name": "General merchandise",
          "state": "CA",
          "tax_address": {
            "address_line_1": "1234 Main St",
            "address_line_2": "Suite 200",
            "city": "San Diego",
            "country": "US",
            "postal_code": "94105",
            "state": "CA"
          },
          "total_spend_all_time": {
            "amount": 18500,
            "currency_code": "USD"
          },
          "total_spend_last_30_days": {
            "amount": 18500,
            "currency_code": "USD"
          },
          "total_spend_last_365_days": {
            "amount": 18500,
            "currency_code": "USD"
          },
          "total_spend_ytd": {
            "amount": 18500,
            "currency_code": "USD"
          },
          "vendor_owner_id": "8ca6cfe2-2bea-46f9-998b-56c1a8ac9454",
          "vendor_type": "BUSINESS"
        },
        "properties": {
          "accounting_vendor_remote_id": {
            "description": "The accounting remote id of the vendor.",
            "nullable": true,
            "type": "string"
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiAddressResource"
              }
            ],
            "description": "The address of the vendor."
          },
          "billing_frequency": {
            "description": "The billing frequency for this vendor.",
            "enum": [
              "ANNUAL",
              "MONTHLY",
              "MULTIPLE",
              "NA",
              "OTHER",
              "QUARTERLY",
              "ROLLING",
              "TBD",
              "TWICE_A_YEAR"
            ],
            "type": "string"
          },
          "contacts": {
            "description": "Unique identifiers of contacts associated with this vendor.",
            "items": {
              "description": "Unique identifier of the vendor contact.",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "country": {
            "description": "The 2-letter country of the vendor.",
            "type": "string"
          },
          "created_at": {
            "description": "The date and time when this vendor was created.",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "Description of the vendor.",
            "type": "string"
          },
          "federal_tax_classification": {
            "description": "The federal tax classification of the vendor.",
            "enum": [
              "C_CORPORATION",
              "INDIVIDUAL_SOLE_PROPRIETOR_SINGLE_MEMBER_LLC",
              "INTERNATIONAL",
              "LLC_C_CORPORATION",
              "LLC_PARTNERSHIP",
              "LLC_S_CORPORATION",
              "OTHER",
              "PARTNERSHIP",
              "S_CORPORATION",
              "TRUST_ESTATE"
            ],
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the vendor.",
            "format": "uuid",
            "type": "string"
          },
          "is_active": {
            "description": "Whether this vendor is active.",
            "type": "boolean"
          },
          "is_deletable": {
            "description": "Whether this vendor is deletable.",
            "readOnly": true,
            "type": "boolean"
          },
          "merchant_id": {
            "description": "The id of the card merchant.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "merchants",
              "type": "many-to-many"
            }
          },
          "name": {
            "description": "Name of the vendor.",
            "type": "string"
          },
          "name_legal": {
            "description": "Legal name of the vendor.",
            "type": "string"
          },
          "sk_category_id": {
            "description": "Ramp category code of the vendor.",
            "type": "integer"
          },
          "sk_category_name": {
            "description": "The category name of the vendor.",
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "tax_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiAddressResource"
              }
            ],
            "description": "The tax address of the vendor."
          },
          "total_spend_all_time": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Total spend for all time for this vendor.",
            "readOnly": true
          },
          "total_spend_last_30_days": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Total spend for the last 30 days for this vendor.",
            "readOnly": true
          },
          "total_spend_last_365_days": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Total spend for the last 365 days for this vendor.",
            "readOnly": true
          },
          "total_spend_ytd": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Total spend year-to-date for this vendor.",
            "readOnly": true
          },
          "vendor_owner_id": {
            "description": "Unique identifier of the user which owns this vendor.",
            "format": "uuid",
            "type": "string",
            "x-relationship": {
              "inverse_field_name": null,
              "reference_field_name": "id",
              "target_resource": "users",
              "type": "many-to-one"
            }
          },
          "vendor_type": {
            "description": "The type of vendor if bill pay.",
            "enum": ["BUSINESS", "INDIVIDUAL"],
            "type": "string"
          }
        },
        "required": [
          "accounting_vendor_remote_id",
          "contacts",
          "country",
          "created_at",
          "id",
          "is_active",
          "is_deletable",
          "name",
          "total_spend_all_time",
          "total_spend_last_30_days",
          "total_spend_last_365_days",
          "total_spend_ytd"
        ],
        "type": "object",
        "x-resource-name": "vendors"
      },
      "VendorACHDetailsRequestBody": {
        "properties": {
          "account_name": {
            "default": "Business Account",
            "description": "Account name",
            "type": "string"
          },
          "account_number": {
            "description": "ACH account number",
            "type": "string"
          },
          "account_owner_type": {
            "default": "BUSINESS",
            "description": "Account owner type",
            "enum": ["BUSINESS", "INDIVIDUAL"],
            "type": "string"
          },
          "account_type": {
            "default": "Checking",
            "description": "Account type",
            "enum": ["Checking", "Savings"],
            "type": "string"
          },
          "routing_number": {
            "description": "ACH routing number",
            "type": "string"
          }
        },
        "required": ["account_number", "routing_number"],
        "type": "object"
      },
      "VendorAccount": {
        "example": {
          "code": "19566",
          "created_at": "2019-08-28T14:15:22+00:00",
          "id": "123",
          "is_active": true,
          "is_synced": true,
          "name": "Amazon",
          "ramp_id": "649b6731-33c6-4ff5-8a5d-2333fcc90ace",
          "updated_at": "2020-08-28T14:40:12+00:00",
          "vendor_category_info": {
            "id": "Merchant",
            "name": "Merchant",
            "ramp_id": "96bb7007-eec5-430f-8d09-e033cbc000c2"
          }
        },
        "properties": {
          "code": {
            "description": "e.g. 19566",
            "type": "string"
          },
          "created_at": {
            "description": "Date time at which the vendor account was created on Ramp.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Remote/external ID of accounting vendor in ERP system.",
            "type": "string"
          },
          "is_active": {
            "description": "Whether this vendor account is active on Ramp",
            "type": "boolean"
          },
          "is_synced": {
            "description": "Whether this vendor has been synced to remote ERP.",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the vendor.",
            "type": "string"
          },
          "ramp_id": {
            "description": "id to uniquely identify a vendor account within Ramp system",
            "format": "uuid",
            "type": "string"
          },
          "updated_at": {
            "description": "Date time at which the vendor account was most recently updated.",
            "format": "date-time",
            "type": "string"
          },
          "vendor_category_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiAccountingCategoryInfo"
              }
            ],
            "description": "Category info of the general ledger account."
          }
        },
        "required": ["created_at", "is_active", "is_synced", "name", "ramp_id", "updated_at"],
        "type": "object"
      },
      "VendorContactValueDumpSchema": {
        "properties": {
          "email": {
            "title": "Email",
            "type": "string"
          },
          "first_name": {
            "default": null,
            "nullable": true,
            "title": "First Name",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "string"
          },
          "is_default": {
            "title": "Is Default",
            "type": "boolean"
          },
          "last_name": {
            "default": null,
            "nullable": true,
            "title": "Last Name",
            "type": "string"
          },
          "phone": {
            "default": null,
            "nullable": true,
            "title": "Phone",
            "type": "string"
          }
        },
        "required": ["email", "id", "is_default"],
        "title": "VendorContactValueDumpSchema",
        "type": "object"
      },
      "VendorValueDumpSchema": {
        "properties": {
          "payee_uuid": {
            "default": null,
            "nullable": true,
            "title": "Payee Uuid",
            "type": "string"
          },
          "vendor_contact": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VendorContactValueDumpSchema"
              }
            ],
            "default": null,
            "nullable": true
          },
          "vendor_logo": {
            "default": null,
            "nullable": true,
            "title": "Vendor Logo",
            "type": "string"
          },
          "vendor_name": {
            "title": "Vendor Name",
            "type": "string"
          }
        },
        "required": ["vendor_name"],
        "title": "VendorValueDumpSchema",
        "type": "object"
      },
      "VendorWireDetailsRequestBody": {
        "properties": {
          "account_name": {
            "default": "Business Account",
            "description": "Account name",
            "type": "string"
          },
          "account_number": {
            "description": "Wire account number",
            "type": "string"
          },
          "routing_number": {
            "description": "Wire routing number",
            "type": "string"
          }
        },
        "required": ["account_number", "routing_number"],
        "type": "object"
      },
      "Vertex": {
        "discriminator": {
          "mapping": {
            "ACTION": "#/components/schemas/Action",
            "BLOCK_GROUP": "#/components/schemas/BlockGroup",
            "CONDITION": "#/components/schemas/ConditionVertex",
            "SDK_CONDITION": "#/components/schemas/SDKCondition"
          },
          "propertyName": "vertex_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/Action"
          },
          {
            "$ref": "#/components/schemas/BlockGroup"
          },
          {
            "$ref": "#/components/schemas/ConditionVertex"
          },
          {
            "$ref": "#/components/schemas/SDKCondition"
          }
        ]
      },
      "WorkflowsCondition": {
        "properties": {
          "condition": {
            "$ref": "#/components/schemas/ConditionGroup"
          },
          "then": {
            "items": {
              "$ref": "#/components/schemas/Vertex"
            },
            "type": "array"
          }
        },
        "required": ["condition", "then"],
        "type": "object"
      }
    },
    "securitySchemes": {
      "oauth2": {
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://api.ramp.com/v1/authorize",
            "scopes": {
              "accounting:read": "Grant read access to accounting",
              "accounting:write": "Grant write access to accounting",
              "bank_accounts:read": "Grant read access to bank_accounts",
              "bills:read": "Grant read access to bills",
              "bills:write": "Grant write access to bills",
              "business:read": "Grant read access to business",
              "cards:read": "Grant read access to cards",
              "cards:read_vault": "Grant read_vault access to cards",
              "cards:write": "Grant write access to cards",
              "cashbacks:read": "Grant read access to cashbacks",
              "custom_records:read": "Grant read access to custom_records",
              "custom_records:write": "Grant write access to custom_records",
              "departments:read": "Grant read access to departments",
              "departments:write": "Grant write access to departments",
              "entities:read": "Grant read access to entities",
              "item_receipts:read": "Grant read access to item_receipts",
              "item_receipts:write": "Grant write access to item_receipts",
              "leads:read": "Grant read access to leads",
              "leads:write": "Grant write access to leads",
              "limits:read": "Grant read access to limits",
              "limits:write": "Grant write access to limits",
              "locations:read": "Grant read access to locations",
              "locations:write": "Grant write access to locations",
              "memos:read": "Grant read access to memos",
              "memos:write": "Grant write access to memos",
              "merchants:read": "Grant read access to merchants",
              "purchase_orders:read": "Grant read access to purchase_orders",
              "purchase_orders:write": "Grant write access to purchase_orders",
              "receipt_integrations:read": "Grant read access to receipt_integrations",
              "receipt_integrations:write": "Grant write access to receipt_integrations",
              "receipts:read": "Grant read access to receipts",
              "receipts:write": "Grant write access to receipts",
              "reimbursements:read": "Grant read access to reimbursements",
              "reimbursements:write": "Grant write access to reimbursements",
              "repayments:read": "Grant read access to repayments",
              "spend_programs:read": "Grant read access to spend_programs",
              "spend_programs:write": "Grant write access to spend_programs",
              "statements:read": "Grant read access to statements",
              "transactions:read": "Grant read access to transactions",
              "transfers:read": "Grant read access to transfers",
              "users:read": "Grant read access to users",
              "users:write": "Grant write access to users",
              "vendors:read": "Grant read access to vendors",
              "vendors:write": "Grant write access to vendors"
            },
            "tokenUrl": "https://api.ramp.com/developer/v1/token"
          },
          "clientCredentials": {
            "scopes": {
              "accounting:read": "Grant read access to accounting",
              "accounting:write": "Grant write access to accounting",
              "bank_accounts:read": "Grant read access to bank_accounts",
              "bills:read": "Grant read access to bills",
              "bills:write": "Grant write access to bills",
              "business:read": "Grant read access to business",
              "cards:read": "Grant read access to cards",
              "cards:read_vault": "Grant read_vault access to cards",
              "cards:write": "Grant write access to cards",
              "cashbacks:read": "Grant read access to cashbacks",
              "custom_records:read": "Grant read access to custom_records",
              "custom_records:write": "Grant write access to custom_records",
              "departments:read": "Grant read access to departments",
              "departments:write": "Grant write access to departments",
              "entities:read": "Grant read access to entities",
              "item_receipts:read": "Grant read access to item_receipts",
              "item_receipts:write": "Grant write access to item_receipts",
              "leads:read": "Grant read access to leads",
              "leads:write": "Grant write access to leads",
              "limits:read": "Grant read access to limits",
              "limits:write": "Grant write access to limits",
              "locations:read": "Grant read access to locations",
              "locations:write": "Grant write access to locations",
              "memos:read": "Grant read access to memos",
              "memos:write": "Grant write access to memos",
              "merchants:read": "Grant read access to merchants",
              "purchase_orders:read": "Grant read access to purchase_orders",
              "purchase_orders:write": "Grant write access to purchase_orders",
              "receipt_integrations:read": "Grant read access to receipt_integrations",
              "receipt_integrations:write": "Grant write access to receipt_integrations",
              "receipts:read": "Grant read access to receipts",
              "receipts:write": "Grant write access to receipts",
              "reimbursements:read": "Grant read access to reimbursements",
              "reimbursements:write": "Grant write access to reimbursements",
              "repayments:read": "Grant read access to repayments",
              "spend_programs:read": "Grant read access to spend_programs",
              "spend_programs:write": "Grant write access to spend_programs",
              "statements:read": "Grant read access to statements",
              "transactions:read": "Grant read access to transactions",
              "transfers:read": "Grant read access to transfers",
              "users:read": "Grant read access to users",
              "users:write": "Grant write access to users",
              "vendors:read": "Grant read access to vendors",
              "vendors:write": "Grant write access to vendors"
            },
            "tokenUrl": "https://api.ramp.com/developer/v1/token"
          }
        },
        "type": "oauth2"
      }
    }
  },
  "x-relationship-summary": [
    {
      "resource": "bills",
      "relationships": [
        {
          "field": "id",
          "target": "users",
          "type": "many-to-one"
        },
        {
          "field": "id",
          "target": "vendors",
          "type": "one-to-many"
        },
        {
          "field": "entity_id",
          "target": "entities",
          "type": "many-to-one"
        },
        {
          "field": "vendor_contact_id",
          "target": "vendor_contacts",
          "type": "many-to-one"
        }
      ]
    },
    {
      "resource": "reimbursements",
      "relationships": [
        {
          "field": "user_id",
          "target": "users",
          "type": "many-to-one"
        },
        {
          "field": "entity_id",
          "target": "entities",
          "type": "many-to-one"
        },
        {
          "field": "merchant_id",
          "target": "merchants",
          "type": "many-to-one"
        },
        {
          "field": "spend_limit_id",
          "target": "limits",
          "type": "many-to-one"
        },
        {
          "field": "user_id",
          "target": "users",
          "type": "many-to-one"
        }
      ]
    },
    {
      "resource": "limits",
      "relationships": [
        {
          "field": "card_id",
          "target": "cards",
          "type": "one-to-many"
        },
        {
          "field": "entity_id",
          "target": "entities",
          "type": "many-to-one"
        },
        {
          "field": "spend_program_id",
          "target": "spend_programs",
          "type": "many-to-one"
        },
        {
          "field": "user_id",
          "target": "users",
          "type": "many-to-one"
        },
        {
          "field": "allowed_vendors",
          "target": "merchants",
          "type": "many-to-many"
        },
        {
          "field": "blocked_vendors",
          "target": "merchants",
          "type": "many-to-many"
        },
        {
          "field": "acting_user_id",
          "target": "users",
          "type": "many-to-one"
        },
        {
          "field": "entity_id",
          "target": "entities",
          "type": "many-to-one"
        },
        {
          "field": "spend_program_id",
          "target": "spend_programs",
          "type": "many-to-one"
        }
      ]
    },
    {
      "resource": "limit_deferred_tasks",
      "relationships": [
        {
          "field": "acting_user_id",
          "target": "users",
          "type": "many-to-one"
        },
        {
          "field": "spend_limit_id",
          "target": "limits",
          "type": "one-to-one"
        },
        {
          "field": "spend_limit_id",
          "target": "limits",
          "type": "many-to-one"
        }
      ]
    },
    {
      "resource": "transactions",
      "relationships": [
        {
          "field": "user_id",
          "target": "users",
          "type": "many-to-one"
        },
        {
          "field": "department_id",
          "target": "departments",
          "type": "many-to-one"
        },
        {
          "field": "location_id",
          "target": "locations",
          "type": "many-to-one"
        },
        {
          "field": "user_id",
          "target": "users",
          "type": "many-to-one"
        },
        {
          "field": "card_id",
          "target": "cards",
          "type": "many-to-one"
        },
        {
          "field": "entity_id",
          "target": "entities",
          "type": "many-to-one"
        },
        {
          "field": "limit_id",
          "target": "limits",
          "type": "many-to-one"
        },
        {
          "field": "merchant_id",
          "target": "merchants",
          "type": "many-to-one"
        },
        {
          "field": "spend_program_id",
          "target": "spend_programs",
          "type": "many-to-one"
        },
        {
          "field": "statement_id",
          "target": "statements",
          "type": "many-to-one"
        },
        {
          "field": "card_id",
          "target": "cards",
          "type": "many-to-one"
        },
        {
          "field": "entity_id",
          "target": "entities",
          "type": "many-to-one"
        },
        {
          "field": "limit_id",
          "target": "limits",
          "type": "many-to-one"
        },
        {
          "field": "merchant_id",
          "target": "merchants",
          "type": "many-to-one"
        },
        {
          "field": "spend_program_id",
          "target": "spend_programs",
          "type": "many-to-one"
        },
        {
          "field": "statement_id",
          "target": "statements",
          "type": "many-to-one"
        }
      ]
    },
    {
      "resource": "user_deferred_task_data",
      "relationships": [
        {
          "field": "user_id",
          "target": "users",
          "type": "many-to-one"
        }
      ]
    },
    {
      "resource": "vendors",
      "relationships": [
        {
          "field": "merchant_id",
          "target": "merchants",
          "type": "many-to-many"
        },
        {
          "field": "vendor_owner_id",
          "target": "users",
          "type": "many-to-one"
        },
        {
          "field": "merchant_id",
          "target": "merchants",
          "type": "many-to-many"
        },
        {
          "field": "vendor_owner_id",
          "target": "users",
          "type": "many-to-one"
        }
      ]
    },
    {
      "resource": "cards",
      "relationships": [
        {
          "field": "card_program_id",
          "target": "card_programs",
          "type": "many-to-one"
        },
        {
          "field": "cardholder_id",
          "target": "users",
          "type": "many-to-one"
        },
        {
          "field": "entity_id",
          "target": "entities",
          "type": "many-to-one"
        }
      ]
    },
    {
      "resource": "cashbacks",
      "relationships": [
        {
          "field": "entity_id",
          "target": "entities",
          "type": "many-to-one"
        }
      ]
    },
    {
      "resource": "draft_bills",
      "relationships": [
        {
          "field": "entity_id",
          "target": "entities",
          "type": "many-to-one"
        }
      ]
    },
    {
      "resource": "locations",
      "relationships": [
        {
          "field": "entity_id",
          "target": "entities",
          "type": "many-to-one"
        }
      ]
    },
    {
      "resource": "outbound_webhook_subscription",
      "relationships": [
        {
          "field": "business_id",
          "target": "businesses",
          "type": "many-to-one"
        },
        {
          "field": "business_id",
          "target": "businesses",
          "type": "many-to-one"
        }
      ]
    },
    {
      "resource": "receipts",
      "relationships": [
        {
          "field": "transaction_id",
          "target": "transactions",
          "type": "many-to-one"
        },
        {
          "field": "user_id",
          "target": "users",
          "type": "many-to-one"
        }
      ]
    },
    {
      "resource": "spend_programs",
      "relationships": [
        {
          "field": "allowed_vendors",
          "target": "merchants",
          "type": "many-to-many"
        },
        {
          "field": "blocked_vendors",
          "target": "merchants",
          "type": "many-to-many"
        }
      ]
    },
    {
      "resource": "statements",
      "relationships": [
        {
          "field": "entity_id",
          "target": "entities",
          "type": "many-to-one"
        }
      ]
    },
    {
      "resource": "transfers",
      "relationships": [
        {
          "field": "entity_id",
          "target": "entities",
          "type": "many-to-one"
        }
      ]
    },
    {
      "resource": "users",
      "relationships": [
        {
          "field": "business_id",
          "target": "businesses",
          "type": "many-to-one"
        },
        {
          "field": "department_id",
          "target": "departments",
          "type": "many-to-one"
        },
        {
          "field": "entity_id",
          "target": "entities",
          "type": "many-to-one"
        },
        {
          "field": "location_id",
          "target": "locations",
          "type": "many-to-one"
        },
        {
          "field": "manager_id",
          "target": "users",
          "type": "many-to-one"
        }
      ]
    }
  ]
}
